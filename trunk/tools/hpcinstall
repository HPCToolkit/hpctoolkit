#! /usr/bin/env perl
# -*-Mode: perl;-*-

# make sure we execute perl
#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

## $Id$
## * BeginRiceCopyright *****************************************************
## 
## Copyright ((c)) 2002, Rice University 
## All rights reserved.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
## 
## * Redistributions of source code must retain the above copyright
##   notice, this list of conditions and the following disclaimer.
## 
## * Redistributions in binary form must reproduce the above copyright
##   notice, this list of conditions and the following disclaimer in the
##   documentation and/or other materials provided with the distribution.
## 
## * Neither the name of Rice University (RICE) nor the names of its
##   contributors may be used to endorse or promote products derived from
##   this software without specific prior written permission.
## 
## This software is provided by RICE and contributors "as is" and any
## express or implied warranties, including, but not limited to, the
## implied warranties of merchantability and fitness for a particular
## purpose are disclaimed. In no event shall RICE or contributors be
## liable for any direct, indirect, incidental, special, exemplary, or
## consequential damages (including, but not limited to, procurement of
## substitute goods or services; loss of use, data, or profits; or
## business interruption) however caused and on any theory of liability,
## whether in contract, strict liability, or tort (including negligence
## or otherwise) arising in any way out of the use of this software, even
## if advised of the possibility of such damage. 
## 
## ******************************************************* EndRiceCopyright *

#############################################################################
##
## $Source$ 
##
##   Nathan Tallent.
##
#############################################################################

use strict;
use IO::File;
use File::Spec;
use Getopt::Std;

STDOUT->autoflush(1); 

my $usage = 
"usage: hpcinstall [-n] [-p <platform>] <install_dir>

Installs files for a certain platform from \$HPCTOOKIT to <install_dir>.  
Be default the current platform (\$HPCTOOLKIT_PLATFORM) is installed.  

Multiple platforms may safely be installed in the same directory.
This may be useful on a cross-mounted file system.

Options:
  -n: Do not modify disk; just print files that would be copied.
  -p <platform>:
      By default \$HPCTOOLKIT_PLATFORM is installed.  To install another 
      platform specify one of 'alpha-OSF1', 'ia64-Linux', 'i686-Linux', 
      'mips-IRIX64', 'sparc-SunOS'.  (Actually, you may specify a string
      that would uniquely identify one platform, e.g. 'alpha'.)

\n";

#############################################################################
## Data
#############################################################################

my @platformList = ("alpha-OSF1", "ia64-Linux", "i686-Linux", 
		    "mips-IRIX64", "sparc-SunOS");

# A list of source (file expressions or directories) and destinations
# (directories) pairs, representing copies.  If the dest is undefined,
# it is assumed that source and dest and equivalent.  Directories
# should not end in '/'.
#
# The assumed base directory for sources is HPCTOOLKIT; the base for
# destinations is $installdir.  Note that $platform will be replaced
# with the value of this script's $platform in the shell copy
# commands.

my @BASE = ( ['README*', undef],
	     ['Sourceme*', undef], 
	     ['doc', undef],
	     ['examples', undef],
	     ['lib', undef]
	     );

my @BIN = ( ['bin/perl', undef],
	    ['bin/dcpicounts', undef],
	    ['bin/f90modfilt', undef],
	    ['bin/hpcquick', undef],
	    ['bin/hpcquick-papiprof', undef],
	    ['bin/ptran', undef],
	    ['bin/pxmlcat', undef],
	    ['bin/xprofquick', undef],
	    ['bin/$platform', undef]
	    );

my @LIB = ( ['../xercesc/$platform/lib', 'lib/xercesc/$platform/lib']
	    );

my @copylist = (@BASE, @BIN, @LIB);


#############################################################################
## main/driver
#############################################################################

my $program = $0;
my $options = 'p:nh';

my $hpctoolkit = undef;
my $platform = undef;
my $installdir = undef;
my $noCopy = undef;

# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

# HPCTOOLKIT
$hpctoolkit = $ENV{HPCTOOLKIT};
if (!defined($hpctoolkit)) {
    die "*** Env var HPCTOOLKIT is not defined! ***\n";
}


# Get options
my %opts;
getopts($options, \%opts);

# Make sure called with minimum number of arguments
my $numArgs = scalar(@ARGV);
if ($numArgs != 1) { die $usage; }

# Option: platform
if (defined($opts{p})) {
    $platform = $opts{p};
} else {
    $platform = $ENV{HPCTOOLKIT_PLATFORM};
}

if (!defined($platform)) {
    die "*** Could not determine platform for installation ***\n";
} else {
    my @matches = grep(/$platform/, @platformList);
    if (scalar(@matches) != 1) {
	die "*** Invalid platform '$platform' ***\n";
    } else {
	$platform = $matches[0];
    }
}

# Option: No copy
if (defined($opts{n})) {
    $noCopy = 1;
} 

# Option: help
if (defined($opts{h})) {
    printUsageAndExit($program);
} 

# Install Dir
$installdir = $ARGV[0]; 
#for (my $i ; $i < $numArgs; $i++) { }


# ----------------------------------------------------------
# Install
# ----------------------------------------------------------

print STDOUT "Installing '$platform' files to '$installdir'\n";
HPCToolkitInstall($platform, $installdir);

exit(0);


#############################################################################
## Subroutines
#############################################################################

# printUsageAndExit
sub printUsageAndExit 
{
    my ($command) = @_; # not used now
    print STDOUT ${usage};
    exit(-1);
}


#############################################################################
## Install
#############################################################################

# HPCToolkitInstall:
# returns:
# effect: 
# assumes:
sub HPCToolkitInstall
{
    my($platform, $installdir) = @_;
    
    my $cmd = undef;
    
    # make the install directory
    $cmd = "mkdir -p $installdir";
    if (!$noCopy) {
	system($cmd) == 0 
	    or die "*** system '$cmd' failed: $? ***";
    }

    # copy easy files
    for my $item (@copylist) {
	my ($src, $dest) = @$item;
	
	# find destination dir and file
	if (!defined($dest)) { $dest = $src; } 
	my ($vol, $destdir, $destfile) = File::Spec->splitpath($dest);

	my $vars = "platform=$platform ; "; 

	# make the destination dir if it does not exist
	$cmd = $vars . "mkdir -p $installdir/$destdir";
	if (!$noCopy) {
	    system($cmd) == 0 
		or die "*** system '$cmd' failed: $? ***";
	}
	
	# copy
	print STDOUT "  $hpctoolkit/$src -> $installdir/$destdir\n";
	$cmd = $vars . "cp -r $hpctoolkit/$src $installdir/$destdir";
	if (!$noCopy) {
	    system($cmd) == 0 
		or die "*** system '$cmd' failed: $? ***";
	}

    }

    RemoveCVSDirs($installdir);

    return 0;
}


# RemoveCVSDirs: Given a dir, remove all CVS dirs within it
sub RemoveCVSDirs
{
    my($dir) = @_;
    
    my $cmd = "find $dir " . '-name "CVS" -exec /bin/rm -r -f \{\} \;';
    if (!$noCopy) {
	system($cmd) == 0 
	    or die "*** system '$cmd' failed: $? ***";
    }
    
    return 0;
}

