#! /usr/bin/env perl
# -*-Mode: perl;-*-

# make sure we execute perl
#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

## $Id$
## * BeginRiceCopyright *****************************************************
## 
## Copyright ((c)) 2002, Rice University 
## All rights reserved.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
## 
## * Redistributions of source code must retain the above copyright
##   notice, this list of conditions and the following disclaimer.
## 
## * Redistributions in binary form must reproduce the above copyright
##   notice, this list of conditions and the following disclaimer in the
##   documentation and/or other materials provided with the distribution.
## 
## * Neither the name of Rice University (RICE) nor the names of its
##   contributors may be used to endorse or promote products derived from
##   this software without specific prior written permission.
## 
## This software is provided by RICE and contributors "as is" and any
## express or implied warranties, including, but not limited to, the
## implied warranties of merchantability and fitness for a particular
## purpose are disclaimed. In no event shall RICE or contributors be
## liable for any direct, indirect, incidental, special, exemplary, or
## consequential damages (including, but not limited to, procurement of
## substitute goods or services; loss of use, data, or profits; or
## business interruption) however caused and on any theory of liability,
## whether in contract, strict liability, or tort (including negligence
## or otherwise) arising in any way out of the use of this software, even
## if advised of the possibility of such damage. 
## 
## ******************************************************* EndRiceCopyright *

#############################################################################
##
## $Source$ 
##
##   Nathan Tallent.
##
#############################################################################

use strict;
use warnings;

use IO::File;
use FindBin qw($Script $RealBin);

use lib "$RealBin/../lib/perl";
use HPCToolkitVersionInfo;

STDOUT->autoflush(1); 

#############################################################################

my $the_program = $Script;
my $the_usage = 
"usage: ${the_program} <pxmlfile_1>...<pxmlfile_n>

Given a list of PROFILE (.pxml) files, produce one PROFILE file by
using the first file as the program (PGM) and converting each
successive file into a load module of the first.  In other words, the
first PROFILE file is considered to be the main program; every file
thereafter an associated load module.

Warning: The source PROFILE files should each contain the same set of 
metrics adn should *not* contain any load module elements (LM).

\n";

#############################################################################
## main/driver
#############################################################################

# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

## Make sure called with minimum number of arguments
my $numArgs = scalar(@ARGV);
if ($numArgs < 1) { die $the_usage; }

my $pxmlfiles = [ ];

my $fileidx = 0;

for ( ; $fileidx < $numArgs; $fileidx++) {
    my $file = $ARGV[$fileidx]; 
    if (! (-r $file)) {
	print STDERR "*** Cannot read file '$file' ***\n"; 
	printUsageAndExit($0);
    } 
    
    push @$pxmlfiles, $file;
}

# ----------------------------------------------------------
# 
# ----------------------------------------------------------

pxmlcat($pxmlfiles);
exit(0);

#############################################################################
## Subroutines
#############################################################################

# printUsageAndExit
sub printUsageAndExit 
{
    my ($command) = @_; # not used now
    print STDOUT $the_usage;
    exit(-1);
}

# printVersionAndExit
sub printVersionAndExit 
{
    my ($command) = @_; # not used now
    print STDERR "${the_program}: ", $HPCToolkitVersionInfo::info, "\n";
    exit(-1);
}


#############################################################################
## pxmlcat
#############################################################################

# pxmlcat: Given a list of pxml files, concatenate them into one
#   PROFILE of sevearl load modules.
# returns: 
# effect: 
# assumes: The list contains at least one file and that each file
#   exists.  Each PROFILE contains no prior load modules.
sub pxmlcat
{
    my($fileListRef) = @_;
  
    # ----------------------------------------------------------
    # The first PROFILE file should contain the main program information.
    #   - Directly copy the DOCTYPE, PROFILEHDR and PROFILEPARAMS
    #   - The PROFILESCOPETREE/PGM begin element is retained
    # ----------------------------------------------------------
    my $file = $fileListRef->[0];
    plagiarizeHeader($file);
    
    # ----------------------------------------------------------
    # For each of the PROFILE files: 
    #  - Skip DOCTYPE, PROFILEHDR, PROFILEPARAMS
    #  - Move PGM to a LM
    # ----------------------------------------------------------
    my $fileidx = 0;
    for ( ; $fileidx < scalar(@$fileListRef); $fileidx++) {
	plagiarizePGM($fileListRef->[$fileidx]);
    }

    # ----------------------------------------------------------
    # Add PGM, PROFILESCOPETREE, and PROFILE end elements
    # ----------------------------------------------------------
    print STDOUT "</PGM>\n";
    print STDOUT "</PROFILESCOPETREE>\n";
    print STDOUT "</PROFILE>\n";

    return 0;
}


# plagiarizeHeader: Given a PROFILE filename, copies the header
# (DOCTYPE, PROFILEHDR and PROFILEPARAMS) to STDOUT.  Also copies the
# PROFILESCOPETREE/PGM begin element.
sub plagiarizeHeader
{
    my($file) = @_;
    my $line = undef;    

    # Open/prepare file
    my $fhndl = new IO::File;
    $fhndl->open("< $file") 
	or die "Error! Can't open '$file'\n";
    
    # Copy only header
    while ($line = <$fhndl>) {
	print STDOUT $line;
	if ($line =~ /<PGM /) { last; }
    }
    print STDOUT "\n";

    $fhndl->close();

    return 0;
}


# plagiarizePGM: Given a PROFILE filename (that should exist), copies
# the PGM portion into a LM element that is sent to STDOUT.  If we
# find any LM attributes, an error is printed and the process dies.
# Returns 0 on success.

sub plagiarizePGM
{
    my($file) = @_;
    my $line = undef;

    my $comment = "<!-- *** Plagiarized from '$file' by ${the_program} *** -->";

    # Open/prepare file
    my $fhndl = new IO::File;
    $fhndl->open("< $file") 
	or die "Error! Can't open '$file'\n";
    
    # Skip header
    while ($line = <$fhndl>) {
	if ($line =~ /<PROFILESCOPETREE>/) { last; }
    }
    
    # Convert PGM to LM
    print STDOUT $comment, "\n";
    $line = <$fhndl>;
    $line =~ s/PGM /LM /;
    print STDOUT $line;
    
    # Copy the rest -- until we hit PGM end element
    while ($line = <$fhndl>) {
	if ($line =~ /<\/PGM>/) { last; }
	print STDOUT $line;
    }

    print STDOUT "</LM>\n";
    print STDOUT "\n";

    # Cleanup
    $fhndl->close();

    return 0;
}
