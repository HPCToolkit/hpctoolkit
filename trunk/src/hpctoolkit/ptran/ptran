#! /usr/bin/env perl

# Note: Using the following 'fool proof' method of starting Perl will
# cause problems unless HPCTOOLS stuff has been added to the shell
# initialization file.  The exec will start a new shell and ptran will
# not be found unless shell's initialization file sets the PATH.  This
# is probably not what we want.

#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

## $Id$
## * BeginRiceCopyright *****************************************************
## 
## Copyright ((c)) 2002, Rice University 
## All rights reserved.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
## 
## * Redistributions of source code must retain the above copyright
##   notice, this list of conditions and the following disclaimer.
## 
## * Redistributions in binary form must reproduce the above copyright
##   notice, this list of conditions and the following disclaimer in the
##   documentation and/or other materials provided with the distribution.
## 
## * Neither the name of Rice University (RICE) nor the names of its
##   contributors may be used to endorse or promote products derived from
##   this software without specific prior written permission.
## 
## This software is provided by RICE and contributors "as is" and any
## express or implied warranties, including, but not limited to, the
## implied warranties of merchantability and fitness for a particular
## purpose are disclaimed. In no event shall RICE or contributors be
## liable for any direct, indirect, incidental, special, exemplary, or
## consequential damages (including, but not limited to, procurement of
## substitute goods or services; loss of use, data, or profits; or
## business interruption) however caused and on any theory of liability,
## whether in contract, strict liability, or tort (including negligence
## or otherwise) arising in any way out of the use of this software, even
## if advised of the possibility of such damage. 
## 
## ******************************************************* EndRiceCopyright *


# ----------------------------------------------------------------------
# $Id$
# $Author$
# $Date$
# $Revision$
# $Log$
# Revision 1.2  2003/07/14 18:57:08  eraxxon
# Make -m consistent with usage (-m goes with machine, not platform!)
#
# Revision 1.1.1.1  2003/04/21 21:55:06  slindahl
# Initial import of HPCToolkit by Sarah Gonzales as of 4/21/03
#
# Revision 1.6  2003/03/26  21:25:20  eraxxon
# Rename HPCTools to HPCToolkit.
#
# Revision 1.5  2003/01/25  16:15:16  eraxxon
# Update usage; add version argument; change calling of perl.
#
# Revision 1.4  2003/01/22  21:40:50  eraxxon
# The select attribute of FILE defaults to 0.
#
# Revision 1.3  2002/07/17  18:09:00  eraxxon
# Update copyright notices and RCS strings.
#
# Revision 1.2  2002/03/26 13:43:01  eraxxon
# Fix error in RE for file names; misc. updates.
#
# Revision 1.2  2000/06/29  00:10:37  rjf
# extended to handle 'ideal' and 'pcsamp' correctly,
# also changed command line args -- rjf
#
# Revision 1.1  2000/05/04 21:31:57  xyuan
# Initial revision
#
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
#
# ptran.pl
#   A main driver to call different profile transforming modules for
#   different machine types.  Transforms architecture-dependent
#   profiles into source-independent PROFILE XML documents.
#
#   Please refer to each individual modules for details on what has been
#   implemented for each platform.
#
# ----------------------------------------------------------------------

use HPCToolkitVersionInfo;
use FileHandle;
use ptranSgi;
use ptranDec;
use Getopt::Std;

use vars qw($opt_m $opt_e);

#print STDOUT "path $ENV{PATH} \n";

# ----------------------------------------------------------------------

$usage = 
"Usage: 
  ptran [-V] [-m machine] [-e nn] [-h] < input > output

Reads a vendor-specific profile file and outputs a PROFILE document.

  -V : print version information
  -m machine :
     Specify a machine if it is not inferred correctly.
     sgi (ssrun) or compaq (uprofile).
  -e nn
     nn is an integer that selects specific metrics from experiments 
     (e.g. ideal on SGIs) that generate more than one interesting column 
     in the profile file.
  -h : prints help
";

# ----------------------------------------------------------------------

my $sgiRE = 'IRIX*';
my $compaqRE = 'OSF1';

my $options = 'Vm:e:h';
my %platForm = (
		sgi => 0,
		compaq => 1,
		);

getopts($options);

if (defined($opt_V)) {
    printVersion($0);
    exit(-1);
}

if (defined($opt_h)) {
    printUsage($0);
    exit(-1);
}

if (defined(opt_e)) {
    $exp_select = $opt_e;
}
else {
    $exp_select = 0;
}

if (defined($opt_m)) {
    $machine = $opt_m;
}
else {
    $os_name = `uname`;
    if ($os_name =~ /$sgiRE/ ) {
	$machine = "sgi";
    } elsif ($os_name =~ /$compaqRE/ ) {
	$machine = "compaq";
    } else {
	$machine = "unknown";
    }
}

if (defined($platForm{$machine})) {
    driver($machine, $exp_select);
}
else {
    print STDERR "Unexpected platform type : $machine\n";
    printUsage();
    exit(-1);
}

# ----------------------------------------------------------------------

sub printUsage {
    my $command = shift; # no longer used
    print STDERR ${usage};
}

sub printVersion {
    my $command = shift; # no longer used
    print STDERR "ptran: ", $HPCToolkitVersionInfo::info, "\n";
}

sub driver {
    my ($platform, $selector) = @_;

    # print STDERR "Transforming profile for platform ", $platform, "", $selector, "\n";

    # print out the PROFILE XML DTD header
    print STDOUT $PROFILEXMLWriter::PROFILEXmlDtd, "\n";

    if ($platForm{$platform} == 0) {
	my $ptranSgi = new ptranSgi(\*STDIN, \*STDOUT,);
	$ptranSgi->transform($selector);
    }
    elsif ($platForm{$platform} == 1) {
	my $ptranDec = new ptranDec(\*STDIN, \*STDOUT);
	$ptranDec->transform();
    }
}
