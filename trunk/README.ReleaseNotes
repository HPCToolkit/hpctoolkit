$Id$

=============================================================================
==
== README.ReleaseNotes
==
== Location: ${HPCTOOLKIT}
==
=============================================================================

This file contains release notes and highlights the history of
revisions to HPCTools.

Contents:
  0. Current Notes
  1. Current 'hpcview' Notes
  2. Current 'bloop' Notes
  3. Current 'xprof' Notes
  4. Revision History

=============================================================================

0. Current Notes
--------------------

See ${HPCTOOLKIT}/doc/index.html for manual pages on the toolset.
Generally speaking, running a tool without any options will output a
brief usage message.

0.1. HPCTools and GNU binutils 2.13:
----
We have had to make a number of fixes and changes to GNU binutils,
most significantly to support the reading of debugging information
generated by certain compilers and to tweak some of the instruction
decoders.  This means that, for now, you must use the binutils
distribution that we provide.  We hope to have most or all of our
fixes and changes included in future releases of binutils.

0.2. HPCTools and memory usage:
----
Our library for reading executable binaries can use a *lot* of memory
on large binaries.  This is because the whole binary is read into
memory and, among other things, we store a little information for each
instruction.  Consequently, if you are reading large binaries it is
possible that the heap memory usage limit imposed by your execution
environment may be exceeded.  In such cases, a message will be printed
notifying you that memory allocation has failed.  To continue working,
simply increase this limit and continue.

For example, while using 'bloop' to process a large binary, we reached
the shell's (soft) data size limit, 131072 Kb.  Using the following
command we doubled the (soft) data size limit and had no further
problems.

  csh variants: limit data 262144

  sh variants:  ulimit -S -d 262144

=============================================================================

1. Current 'hpcview' Notes
--------------------

=============================================================================

2. Current 'bloop' Notes
--------------------

2.1. Demangling and C++ programs:
----  
One caveat to supporting multiple targets is that C++ mangling is
often compiler specific.  Both the current platform's demangler and
GNU's demangler are used in attempts to demangle names.  But if the
binary to be analyzed was compiled on another platform with a
proprietary compiler, there is a good chance demangling will be
unsuccessful.

2.2. Sun Compilers and Sun stabs:
----
Unfortunately, we do not currently support Sun WorkShop/Forte/ONE
Compilers, even with the -g -xs options.  Because bloop currently uses
GNU's binutils to read executables and gather source file information,
and because binutils cannot fully understand Sun's stabs debugging
information, it will generate uninteresting output on such a binary.
Use GCC instead.

2.3. Fortran and implicit 'program' statements:
----
Please make sure to explicitly include a 'program' statement
designating your Fortran program's "main" routine.  The debugging
information generated by several compilers may be significantly and
adversely affected without such a statement.  (The compilers that we
have seen affected by this are: SGIPro f77 (mips-IRIX64); GCC g77
(mips-IRIX64, sparc-SunOS, i686-Linux); Intel efc (ia64-Linux).)
 
2.4. Compaq C++ and Templates:
----
The Compaq C++ compiler creates dummy file descriptors -- files that
do not exist -- to store debugging information about template
instantiations.  Because of this, templated procedures may be reported
to live in files with names like 'file.H~alt~deccxx_6431CCA5'.  This
is not actually a bug, but in the future we may develop a smarter way
to deal with such cases. (see moo/alpha-OSF1.cxx-pt.BLOOP)

2.5. GCC 2.9x and alpha-OSF1:
----
From what we can tell, sometimes GCC g++ (on alpha-OSF1) generates
erroneous file information.  This can cause 'bloop' to associate some
procedures with files that do not contain them and also to report some
strange line numbers. (see moo/alpha-OSF1.g++.BLOOP)

Sometimes 'bloop' reports erroneous procedure begin lines for
alpha-OSF1 binaries, often the end line of the immediately preceeding
function (but not always).  We have not had time to fully investigate
this issue.  However, it is most likely either bad debugging
information or a bug in GNU binutils ECOFF/stabs reader. (see
smg98/alpha-OSF1.gcc.BLOOP)

We have not yet tried GCC 3.x on an alpha machine.

[GCC apparently uses a very strange debugging format on the alpha: a
combination of ECOFF file and procedure descriptors (that contain
incorrect line numbers) and a stabs symbol table (that GNU's binutils
consults for file and line info).  The difficulty this creates is that
there is not an utility that I know of that can dump the debugging
info.  None of alpha's 'odump', 'coffobjanl' or GNU's 'objdump' fully
dump the debugging sections.]

2.6. GCC g++ 2.9x-3.0 and mips-IRIX64:
----
We have noticed in rare cases that the line numbers that GCC g++ (on
mips-IRIX64) generates are absurdly large, e.g. 18446744073709551479.
This appears to only occur in unimportant system libraries, and even
then, rarely.  At any rate, this is not a bug in bloop. (see
moo/mips-IRIX64.g++-64.BLOOP)

2.7. Performance:
----
The HPCTools/src/libs/ISA classes use the GNU ia64 instruction
decoder.  Because it is very inefficient, we have temporarily disabled
decoding on non-brach instruction packets.  This will only affect
'bloop' when it is used with the -D option, a debugging option that
dumps a procedure's instructions.

We have also noticed that many of GNU binutils' debugging information
lookup routines are very inefficient with respect to time.  This
causes an especially significant performance hit on 1) large
ia64-Linux (DWARF2) binaries and 2) large alpha-OSF1 binaries with
Compaq ECOFF debugging information.  However, it is also significant
on large binaries from other platforms.  We would like to fix this in
future releases, but it is not high on a priority list.

2.8. GNU binutils and the i686 disassembler:
----
Oddly enough, the GNU i686 disassembler produces very slightly
different output depending on what platform it is run on (e.g.,
cp. sparc32 and mips64).  This is an error within binutils (to verify
this use 'objdump -d'), but it should not adversely affect 'bloop'.
We might fix this if our wish that someone else would fix it is not
fulfilled.

2.9. GNU binutils, GCC and Linux/non-Linux OSs:
----
The BFD symbol names (used as procedure link names in 'bloop') and
procedure link types (only visible with 'bloop -D') that GNU binutils
reports for some GCC produced binaries sometimes differ depending upon
what platform they are processed on.  (In particular, it appears that
processing such binaries on Linux platforms differs from non-Linux
platforms.)  Rarely do the procedure link name differences negatively
affect the scope tree output of 'bloop'; link type differences never
affect the output.  Even so, it would be nice to fix this at some
point.  The differences arise from somewhere within GNU binutils and
not from a bug in 'bloop'.  (See moo/alpha-OSF1.g++.BLOOP for one of
several examples.)

=============================================================================

3. Current 'xprof' Notes
--------------------

'xprof' currently only converts output from Compaq's DCPI 'dcpicat'
(including ProfileMe).

Like bloop, it it can be used as a 'cross-tool'.

=============================================================================

4. Revision History
--------------------

HPCToolkit Version 3.5.2: [2003.03.28]
--------------------
- Rename from HPCTools to HPCToolkit to distinguish from others' use of 
  the name.
- Convert from RCS to CVS.

HPCTools Version 3.5.1: [2003.03.07]
--------------------
- Update PGM and PROFILE formats to support load modules; other minor
  tweaks.  Update hpcview, bloop, xprof and ptran to use the new formats.
- Add initial DSO support to LoadModule classes.
- Test updates
  - Add LoadModule library tester.
  - Update support library tests.
- Add filter script for f90 modules (f90modfilt).
- Miscellaneous tweaks
  - Fix strcpy bug in GetDemangledFuncName().
  - Makefile tweaks
  - Convert ArchIndType.h limits from const (statics) to #defines.
  - Make trace a global variable so that tracing can be globally
    switched on/off.
  - Update alpha macros to support alpha GCC compiler
  - hpcquick now supports recursive paths to option -I.

HPCTools Version 3.5.0: [2003.02.24]
--------------------
- Merge HPCView 3.1 and HPCTools 1.20 into one distribution
  - eliminate code duplication (support library, DTDs)
  - port HPCView to ANSI/ISO style C includes (<cheader>; all functions in 
    std namespace
  - unify and improve documentation
- Improve make system (e.g., each library is now built in a separate 
  location).
- Improve code organization (rename 'libs' to 'lib'; rename and cleanup
  bloop's scope tree files; move general types files to 'src/include')
- Improve and test hvprof with PAPI 2.3.1

[see below for HPCView revision history]

HPCTools Version 1.20: (bloop 1.20, xprof 1.20) [2002.10.11]
--------------------
- Add xprof test suite.
- Make minor changes to support GCC 3.2.
- Rewrite GNU binutils patch (for dwarf2.c) that handles the
  out-of-order line sequences of Intel's 6.0 compiler.  (The patch is
  faster, slightly more accurate, and makes GNU happy.)
- Change the method of preventing conflict between GNU and Sun's demangler.

HPCTools Version 1.10: (bloop 1.10, xprof 1.10) [2002.08.30]
--------------------
- Allow for use of either old-style C headers (<header.h>) or new
  ANSI/ISO style (<cheader>; all functions are in std namespace).  The
  new style is now default.
- Improve error and exception handling.  Detect memory allocation errors.
- Fix bug in GNU-binutils ECOFF reader.

HPCTools Version 1.05: (bloop 1.05, xprof 1.05) [2002.08.23]
--------------------
- Update to use binutils-2.13
- Extend VLIW interface throughout HPCTools. (Impose explicit pc +
  operation index interface for instructions.  Now, many comments are
  not lies!)
- Miscellaneous fixes and cleanup.

HPCTools Version 1.00: (bloop 1.00, xprof 1.00) [2002.08.16]
--------------------
- Major revisions:
  - Replace EEL binary support with new binutils library (uses GNU's
    binutils) and new ISA library
  - bloop: Replace EEL analysis with OpenAnalysis
  - bloop: Add two new targets (i686-Linux, ia64-Linux) and improve support
    for existing targets (alpha-OSF1, mips-IRIX64, sparc-SunOS);
  - Support 'cross target' processing
- Miscellaneous fixes and cleanup.
  - bloop: Use both system and GNU demangler in demangling attempts
- Update to use binutils-2.12
  - Update to read (abnormal) Compaq ECOFF debugging info.
  - Update to read (abnormal) SGI -64 DWARF2 and g++ -64 DWARF2 debugging
    info.
  - Update to read (abnormal) Intel DWARF2 debugging info
  - Misc. updates
- Reorganize HPCTools directory tree
- Remove (outdated) backwards compatibility for non-standard STL headers

- Add hvprof to HPCTools/tools/hvprof

HPCTools Version 0.90 (bloop 0.90, xprof 0.90) [2001.09]
--------------------
- Port to alpha-OSF1
  - Port EEL to alpha
  - Fix binutils 2.10 ECOFF support
- Add xprof tool (beta) for processing Compaq dcpi output
- Replace EEL dominator analysis with tarjan analysis
- Improve PGM scope tree normalization
- Bring code into compliance with ANSI/ISO C++ 
  - Remove STLPort and use standard STL
- Bug fixes

HPCTools Version 0.80 [2001.02]
--------------------
- Port to mips-IRIX64
  - Port EEL to IRIX64
  - Fix binutils 2.10 DWARF2 support
- Bug fixes  

HPCTools Initial Version 
--------------------
- Support for processing sparc-SunOS binaries compiled with GCC
  - Use EEL to read binaries and find loops
- Update EEL to use binutils 2.10
  
-----------------------------------------------------------------------------

HPCView Version 3.1: [2003.01]
--------------------
- Port to ia64-Linux
- Generated HTML/CSS and JavaScript now works with 
  Internet Explorer 5.0+, Netscape 4.x, Netscape 6.2+, or Mozilla 1.0+.  
  With one minor exception (in order to support Netscape 4.x) hpcview
  generates valid HTML 4.0 Transitional/Frameset and CSS1/2 style
  sheets.
- Update to use Xerces 2.1.0

HPCView Version 3.0 []
--------------------
- This is a major revision to add the option of emitting a compact, 
  XML-formatted representation of internal data representation 
  ("scope tree") so that it can be efficiently processed by 
  (1) HPCViewer, a stand-alone performance data browser (to be 
      released real soon now).
  or (2) other down-stream analysis tools.
  The original static HTML output is still supported.

- Almost all of the command line switches have changed. Type "hpcview"
  (no arguments) for command line documentation.
- More run-time assertion exits have been replaced with informative
  error messages.
- Update to use Xerces 1.7.0

HPCView Version 2.01 []
--------------------
- Fixed bugs in support for flattening that caused some files to be omitted.
- Regularized error handling for metrics so that file and computed metric
  errors are reported uniformly.
- Added -w option and omitted warnings for file synopsis generation at 
  default warning level.
- Fixed error handling so that errors caused by missing file metric data
  or missing inputs to computed metrics (among other metric errors) cause
  an error message to be printed and execution to halt.
- Separated out and removed dead code.

HPCView Version 2.0 []
--------------------
- Added support for incorporating program structure information
  generated by a binary analyzer. This enables the hierarchial scopes
  display to show loop-level information. The binary analyzer is
  language independent so this works for any programming language
  whose compiler generates standard symbol table information.
- Hierarchical scopes display now supports "flattening" which allows one to 
  compare not only children of a scope, but grand children, great
  grandchildren, etc. This allows one to view a program as composed as
  a set of files, procedures, loops, or (when completely flattened) a
  set of non-loop statements. 
- Source pane selections now navigate hierarchical scopes display to
  display the selection.
- Performance table eliminated because it is subsumed by the
  hierarchical scopes display with flattening.
- Generated HTML and JavaScript now works with Internet Explorer 5.5
  as well as Netscape Navigator 4.x.
- Sources adjusted to use standard STL.
