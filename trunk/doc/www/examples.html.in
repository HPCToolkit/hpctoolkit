<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- coding: utf-8 -*- -->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- ********************************************************************** -->

<head>
  <!-- meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /> -->

  <title>HPCToolkit Examples</title>

  <link rel="stylesheet" type="text/css" href="style/style.css" />
</head>

<body>

<!-- ********************************************************************** -->

@header-hpctoolkit@

<!-- ********************************************************************** -->


<h1>HPCToolkit Examples</h1>

<p>
<ul>
<li>
Chombo AMR Framework: amrGodunov3D on 1024 cores of a Cray XE6:
 <a href=http://hpctoolkit.org/examples/hpctoolkit-chombo-crayxe6-1024pe-trace.tgz>hpctoolkit-chombo-crayxe6-1024pe-trace.tgz</a> (78M)

<br />
<br />

The compressed tar file contains data for hpcviewer and hpctraceviewer interfaces.
You can use hpcviewer to explore where the code spends its time with top-down, bottom-up, and flat views of the performance data.
hpcviewer's top-down view of the calling context tree enables you to drill down and see what is important. hpcviewer's bottom-up view enables you to assess the cost of individual functions to their multiple invocation sites.
You can use hpctraceviewer to see how the execution unfolds over time at multiple levels of abstraction.
For details about how to use the hpcviewer and hpctraceviewer user interfaces, see Chapters 5 and 6 of the <a href=./manual/HPCToolkit-users-manual.pdf>HPCToolkit User's Manual</a>.
</li>

</ul>
</p>

<!-- 
<p>This page contains links that will enable you to download a copy of 
hpcviewer (HPCToolkit's performance data browser) and some sample 
databases to help give you get a sense of what it is like to use 
HPCToolkit for performance analysis. 
<br>
<ul>
<li>
Download hpcviewer
[<a href="http://hipersoft.rice.edu/hpctoolkit/SERVER/examples/HPCViewer.jar.gz">HPCViewer.jar.gz</a> (767KB)], 
[<a href="http://hipersoft.rice.edu/hpctoolkit/SERVER/examples/HPCViewer.jar">HPCViewer.jar</a> (2.5MB)], 
- This is a Java archive (jar) file that is HPCToolkit's user interface for interactive browsing of performance databases. The jar file was built with Java 1.4.1 and requires a recent version of Java, though it may work with Java versions earlier than 1.4.1.  Launching the jar file will start the viewer and bring up a file chooser dialog to open a performance database. The file chooser dialog should be used to open the XML file inside the top-level directory of a performance database. 
</li>
<br>
<li>
<a href="http://hipersoft.rice.edu/hpctoolkit/SERVER/examples/icc-vs-gcc.tar.gz">Download icc-vs-gcc.tar.gz</a> (5KB) - This gzipped tar file contains an HPCViewer performance 
database that compares the Intel 8.0 C compiler (-g -O3)
with gcc 3.2.3 (-O3 -g3 -funroll-all-loops) on an Itanium 2 (McKinley) 
(900MHz XS6000) for McAlpin's Streams benchmark.  The former 
generates code alomst 4x faster than the latter. 
<br>
<br>
This small but interesting example illustrates the compiler-independence
of HPCToolkit.  While the database provided only compares two compilers on the same architecture, HPCToolkit can also be used similarly for 
cross-architecture comparisons.
</li>
<br>
<li>
<a href="http://hipersoft.rice.edu/hpctoolkit/SERVER/examples/NAS-BT-meas-vs-predicted.tar.gz">Download NAS-BT-meas-vs-predicted.tar.gz</a> (57KB) - This gzipped tar file contains an HPCViewer performance 
database for 200x200x200 problem size executions of NAS BT. The database includes both a variety of metrics (L2 Miss, L3 Miss, Total Mem Access) measured on a 900MHz Itanium 2, as well as predictions of these values made using a combination of static and dynamic analysis of a SPARC binary. 
<br>
<br>
The performance prediction approach that is compared with measured data 
is described in the following  paper:
<br>
Gabriel Marin and John Mellor-Crummey. 
Cross Architecture Performance Predictions for Scientific Applications
Using Parameterized Models. In Proceedings of the Joint International Conference on Measurement and Modeling of Computer Systems, NY, NY, June 2004. 
<a href="http://www.cs.rice.edu/~johnmc/papers/MM-SIGMETRICS04-abstract.html">[abstract]</a>
<a href="http://www.cs.rice.edu/~johnmc/papers/MM-SIGMETRICS04.pdf">[pdf]</a>
</li>
<br>
</ul>
-->

<p>[<span class="lastupdated">Page last updated: 2011/12/30</span>]
</p>

<!-- ********************************************************************** -->

@footer-hpctoolkit@

<!-- ********************************************************************** -->

</body>
</html>


<!-- Local Variables: -->
<!-- eval: (add-hook 'write-file-hooks 'time-stamp) -->
<!-- time-stamp-start: "<span class=\"lastupdated\">Page last updated: " -->
<!-- time-stamp-format: "%:y/%02m/%02d" -->
<!-- time-stamp-end: "</span>" -->
<!-- time-stamp-line-limit: 10000 -->
<!-- End: -->
