// SPDX-FileCopyrightText: 2002-2024 Rice University
// SPDX-FileCopyrightText: 2024 Contributors to the HPCToolkit Project
//
// SPDX-License-Identifier: BSD-3-Clause

#include "compress.h"

#include <gmock/gmock-matchers.h>
#include <gtest/gtest.h>

#include <stdexcept>

static const std::array<unsigned char, 128> data = {
    0x40, 0x7a, 0xb4, 0x5d, 0xb2, 0xd6, 0x46, 0xdb, 0x39, 0x9a, 0x69, 0x7f, 0x43,
    0x4f, 0x40, 0x9f, 0xd6, 0xa2, 0x00, 0x50, 0x6e, 0x5a, 0x50, 0x70, 0x3e, 0xb3,
    0x96, 0x81, 0x3b, 0xbf, 0x42, 0xb4, 0xd1, 0x48, 0x11, 0xae, 0x39, 0xf9, 0xd0,
    0x46, 0x42, 0x5d, 0xa0, 0x64, 0xa7, 0x08, 0x88, 0x3d, 0xf6, 0x7c, 0x0d, 0x3c,
    0xc2, 0x9b, 0x2f, 0xfc, 0x7e, 0x3a, 0x41, 0x85, 0x1e, 0x42, 0xae, 0xd4, 0x69,
    0x06, 0x37, 0xd1, 0xc2, 0x0f, 0x3d, 0xe8, 0x68, 0xc6, 0x66, 0x1c, 0x9b, 0x6b,
    0x36, 0x09, 0x6c, 0xcd, 0x09, 0x33, 0xe6, 0x59, 0x38, 0x09, 0xbf, 0xe2, 0x9a,
    0x64, 0x71, 0x2f, 0x60, 0x0f, 0x3c, 0x29, 0xc1, 0x53, 0xc5, 0x46, 0x25, 0x07,
    0x92, 0x56, 0xc0, 0x0d, 0x19, 0x78, 0x4e, 0x68, 0xfa, 0xa6, 0x69, 0xd2, 0x1d,
    0x22, 0xf2, 0x3e, 0x65, 0xa5, 0x7f, 0x22, 0x46, 0x3d, 0x2b, 0x28};

TEST(CompressTest, RoundTrip) {
  FILE* fp_original = std::tmpfile();
  {
    const unsigned char* ptr = data.data();
    size_t size = data.size();
    while (size > 0) {
      auto written = std::fwrite(ptr, 1, size, fp_original);
      if (written == 0)
        throw std::runtime_error("fwrite failed");
      size -= written;
      ptr += written;
    }
  }

  if (std::fseek(fp_original, 0, SEEK_SET) != 0)
    throw std::runtime_error("fseek failed");
  FILE* fp_compressed = std::tmpfile();
  compress_deflate(fp_original, fp_compressed, 1);
  std::fclose(fp_original);

  if (std::fseek(fp_compressed, 0, SEEK_SET) != 0)
    throw std::runtime_error("fseek failed");
  FILE* fp_decompressed = std::tmpfile();
  compress_inflate(fp_compressed, fp_decompressed);
  std::fclose(fp_compressed);

  if (std::fseek(fp_decompressed, 0, SEEK_SET) != 0)
    throw std::runtime_error("fseek failed");
  std::vector<unsigned char> result;
  {
    result.reserve(data.size());
    for (int c = std::fgetc(fp_decompressed); c != EOF; c = std::fgetc(fp_decompressed))
      result.push_back(c);
  }
  std::fclose(fp_decompressed);

  ASSERT_THAT(result, testing::ElementsAreArray(data));
}
