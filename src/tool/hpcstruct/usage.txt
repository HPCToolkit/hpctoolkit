Description:
  hpcstruct recovers program structure information for CPU and GPU
  binaries.  hpcprof uses program structure information to relate
  performance measurements back to source code.
  
  Apply hpcstruct to a directory containing HPCToolkit performance
  measurements to recover the program structure for each CPU and GPU
  binary referenced by measurement data. Although not normally
  necessary, one can apply hpcstruct directly to an individual CPU or
  GPU binary to recover its program structure.

  Program structure is a mapping from addresses of machine
  instructions in a binary to source code contexts; this mapping is
  used to attribute measured performance metrics back to source
  code. A strength of hpcstruct is its ability to attribute metrics to
  inlined functions and loops; such mappings are especially useful for
  understanding the performance of programs generated using
  template-based programming models.  When hpcprof is invoked on a
  measurement-directory that contains program structure files, hpcprof
  uses these program structure files to attribute performance measurements.

  hpcstruct is designed to cache its results so that processing
  multiple measurement directories can copy previously generated
  structure files from the cache rather than regenerating the
  information.  A cache may be specified either on the command line
  (see the -C option, below) or by setting the
  HPCTOOLKIT_HPCSTRUCT_CACHE environment variable.  If one is
  specified, hpcstruct emits a message for each binary processed
  saying one of 'Added to cache', 'Copied from cache', or 'Copied from
  cache +'.  The latter indicates that although the structure file was
  found in the cache, it came from an identical binary with a
  different full path, so the cached content was edited to reflect the
  actual path.  If the --nocache option is set, hpcstruct will not use
  the cache, even if the environment variable is set, and the message
  will say '(Cache disabled by user)'.  If no cache is specified, the
  message will say 'Cache not specified' and, unless the --nocache
  option was set, an ADVICE message urging use of a cache will be
  written.  Users are strongly encouraged to use a cache,

  To accelerate analysis of a measurement directory, which contains
  references to an application as well as any shared libraries and/or
  GPU binaries it uses, hpcstruct employs multiple threads by
  default. A pool of threads equal to half of the threads in the CPU
  set for the process is used.  Binaries larger than a certain
  threshold (see the --psize option and its default) are analyzed
  using more threads than those smaller than the threshold.  Multiple
  binaries are processed concurrently.  hpcstruct will describe the
  actual parallelization and concurrency used when the run starts.

  hpcstruct is designed for analysis of optimized binaries created from
  C, C++, Fortran, CUDA, HIP, and DPC++ source code. Because hpcstruct's
  algorithms exploit the line map and debug information recorded in an
  application binary during compilation, for best results, we recommend that
  binaries be compiled with standard debug information or at a minimum,
  line map information. Typically, this is accomplished by pasing a '-g'
  option to each compiler along with any optimization flags. See the
  HPCToolkit manual for more information.

Options: General
  -V, --version        Print version information.
  -h, --help           Print this help message.

Options: Control caching of structure files
  -c <dir>, --cache <dir> Specify that structure files for CPU and GPU
                       binaries should be cached and reused in
                       directory <dir>. Overrides any default setting in
                       the HPCTOOLKIT_HPCSTRUCT_CACHE environment variable.
  --nocache            Specify that a structure cache should not be used,
                       even if the HPCTOOLKIT_HPCSTRUCT_CACHE environment
                       variable is set.

Options: Override parallelism defaults
  -j <num>, --jobs <num> Specify the number of threads to be used. <num>
                       OpenMP threads will be used to analyze any large
		       binaries. A pool of <num> threads will be used to
		       analyze small binaries.
  --psize <psize>      hpcstruct will consider any binary of at least
                       <psize> bytes as large. hpcstruct will use more
                       OpenMP threads to analyze large binaries than
                       it uses to analyze small binaries.  {100000000}

Options: Override structure recovery defaults
  --cpu <yes/no>       Analyze CPU binaries referenced by a measurements
                       directory. {yes} 
  --gpu <yes/no>       Analyze GPU binaries referenced by a measurements
                       directory. {yes} 
  --gpucfg <yes/no>    Compute loop nesting structure for GPU machine code.
                       Loop nesting structure is only useful with
                       instruction-level measurements collected using PC
                       sampling or instrumentation. {no} 


Options: Specify output file when analyzing a single binary
  -o <file>, --output <file>
                       Write hpcstruct file to <file>.
                       Use '--output=-' to write output to stdout.
                       Note: this option may only be used when analyzing
                       a single binary.

Options: Developers only
  --jobs-struct <num>  Use <num> threads for the MakeStructure() phase only.
  --jobs-parse  <num>  Use <num> threads for the ParseAPI::parse() phase only.
  --jobs-symtab <num>  Use <num> threads for the Symtab phase (if possible).
  --show-gaps          Feature to show unclaimed vma ranges (gaps)
                       in the control-flow graph.
  --time               Display stats on hpcstruct's time and space usage.

Options: Internal use only
  -M <measurement-dir> Indicates that hpcstruct was invoked by a
                       script used to process measurement directory
                       <measurement-dir>. This information is used to
                       control messages.
