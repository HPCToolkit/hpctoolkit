#!/bin/sh
# set -x
#
@copyright_hash@
#
# hpcrun -- set the environ variables for profiling with HPCToolkit
# and launch the program.  See 'hpcrun -h' for a list of options.
#

#------------------------------------------------------------
# Values from configure
#------------------------------------------------------------

@launch_script_vars@

# Relative paths are relative to HPCTOOLKIT.
hpcfnbounds_dir='libexec/hpctoolkit'
hpcrun_dir='lib/hpctoolkit'
libmonitor_dir='@LIBMONITOR_RUN_DIR@'
papi_libdir='@OPT_PAPI_LIBPATH@'
perfmon_libdir='@PERFMON_LIB@'
roctracer_lib_path='@OPT_ROCM_LD_LIB_PATH@'
gtpin_lib_path='@OPT_GTPIN_LIBDIR@'
# gotcha_lib_path='@GOTCHA_LIBDIR@'
memkind_libdir='@MEMKIND_LIBDIR@'
host_arm='@HOST_CPU_AARCH64@'
prog_name=hpcrun

if test $host_arm = "yes"; then
    export HPCRUN_AUDIT_FAKE_AUDITOR=1
fi

#------------------------------------------------------------
# Recent versions of MPI use UCX as a communication 
# substrate. Prevent UCX from catching SEGV by dropping it 
# from UCX's list of error signals. If UCX catches SEGV, 
# it will terminate the program. We can't allow UCX to
# do that since hpcrun may encounter a SEGV as part of its
# operation and want to drop a sample rather than 
# terminate the program.
#------------------------------------------------------------
export UCX_ERROR_SIGNALS=ILL,FPE,BUS

#------------------------------------------------------------
# Find path to this script
#------------------------------------------------------------

hpc_path_to_root=..
@export_hpctoolkit@

# Relative paths are relative to HPCTOOLKIT.
case "$hpcfnbounds_dir" in
    /* ) ;;
    * ) hpcfnbounds_dir="${HPCTOOLKIT}/${hpcfnbounds_dir}" ;;
esac
case "$hpcrun_dir" in
    /* ) ;;
    * ) hpcrun_dir="${HPCTOOLKIT}/${hpcrun_dir}" ;;
esac
case "$libmonitor_dir" in
    /* ) ;;
    * ) libmonitor_dir="${HPCTOOLKIT}/${libmonitor_dir}" ;;
esac
case "$papi_libdir" in
    '' ) ;;
    /* ) ;;
    * ) papi_libdir="${HPCTOOLKIT}/${papi_libdir}" ;;
esac

#
# Once hpcrun_dir is completely set, set
#
ext_libdir="$hpcrun_dir"/ext-libs

#------------------------------------------------------------
# Usage Message
#------------------------------------------------------------

die()
{
    cat <<EOF 1>&2
hpcrun: $*
use 'hpcrun -h' for a summary of options
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage:
  hpcrun [profiling-options] <command> [command-arguments]
  hpcrun [info-options]

hpcrun profiles the execution of an arbitrary command <command> using
statistical sampling (rather than instrumentation).  It collects
per-thread call path profiles that represent the full calling context of
sample points.  Sample points may be generated from multiple simultaneous
sampling sources.  hpcrun profiles complex applications that use forks,
execs, threads, and dynamic linking/unlinking; it may be used in conjuction
with parallel process launchers such as MPICH's mpiexec and SLURM's srun.

To profile a statically linked executable, make sure to link with hpclink.

To configure hpcrun's sampling sources, specify events and periods using
the -e/--event option.  For an event 'e' and period 'p', after every 'p'
instances of 'e', a sample is generated that causes hpcrun to inspect the
and record information about the monitored <command>.

When <command> terminates, a profile measurement databse will be written to
the directory:
  hpctoolkit-<command>-measurements[-<jobid>]
where <jobid> is a job launcher id that associated with the execution, if any.

hpcrun enables a user to abort a process and write the partial profiling
data to disk by sending a signal such as SIGINT (often bound to Ctrl-C).
This can be extremely useful on long-running or misbehaving applications.

Options: Informational
  -l, -L --list-events List available events. (N.B.: some may not be profilable)
  -V, --version        Print version information.
  -h, --help           Print help.

Options: Profiling (Defaults shown in curly brackets {})
  -e <event>[@<howoften>], --event <event>[@<howoften>]
                      <event> may be an architecture-independent hardware or
                      software event supported by Linux perf, a native hardware
                      counter event, a hardware counter event supported by the
                      PAPI library, or a Linux  system timer (CPUTIME and REALTIME).
                      This option may be given multiple times to profile several events 
                      at once. If the value for <howoften> is a number, it will be
                      interpreted as a sample period. For Linux perf events, one
                      may specify a sampling frequency for 'howoften' by writing f
                      before a number.  For instance, to sample an event 100 times
                      per second,  specify  <howoften>  as '@f100'. For Linux perf
                      events, if no value for <howoften> is specified, hpcrun
                      will monitor the event using frequency-based sampling at 300
                      samples/second. If no event is specified, hpcrun will collect
                      CPUTIME samples 200 times per second per application thread.

  -c, --count <howoften>
                      Only  available  for  events  managed  by Linux perf. This
                      option specifies a default value for how often to sample. The
                      value for <howoften> may be a number that will be used as a
                      default event period or an f followed by a number, e.g. f100,
                      to specify a default sampling frequency in samples/second.

  -t, --trace          Generate a call path trace in addition to a call
                       path profile.

  --omp-serial-only    When profiling using the OMPT interface for OpenMP,
                       suppress all samples not in serial code.

  -ds, --delay-sampling
                       Delay starting sampling until the application calls
                       hpctoolkit_sampling_start().

  -f <frac>, -fp <frac>, --process-fraction <frac>
                       Measure only a fraction <frac> of the execution's
                       processes.  For each process, enable measurement
                       (of all threads) with probability <frac>; <frac> is a
                       real number (0.10) or a fraction (1/10) between 0 and 1.

  -fnb <path>, --fnbounds <path>
                       Use <path> as alternate hpcfnbounds command.
                       (mostly for developers)

  -fnbs, --fnbounds-shutdown
                       Hpcrun uses hpcfnbounds to calculate function bounds. By default,
                       this process remains throughout the execution. 
                       If running out of memory, this command lets hpcfnbounds 
                       shutdown after the application started and each shared library 
                       processed. Note enabling shutdown adds runtime overhead.

  -js <num>, --jobs-symtab <num>
                       Use <num> openmp threads for Symtab in hpcfnbounds,
                       if Symtab supports openmp (default 1).

  -m, --merge-threads  Merge non-overlapped threads into one virtual thread.
                       This option is to reduce the number of generated
                       profile and trace files as each thread generates its own
                       profile and trace data. The options are:
                       0 : do not merge non-overlapped threads
                       1 : merge non-overlapped threads (default)

  -o <outpath>, --output <outpath>
                       Directory for output data.
                       {hpctoolkit-<command>-measurements[-<jobid>]}

                       Bug: Without a <jobid> or an output option, multiple
                       profiles of the same <command> will be placed in the
                       same output directory.

  -r, --retain-recursion
                       Normally, hpcrun will collapse (simple) recursive call chains
                       to save space and analysis time. This option disables that
                       behavior: all elements of a recursive call chain will be recorded
                       NOTE: If the user employs the RETCNT sample source, then this
                             option is enabled: RETCNT implies *all* elements of
                             call chains, including recursive elements, are recorded.

  -nu, --no-unwind     Disable unwinding and collect a flat profile of leaf 
                       procedures only instead of full calling contexts.


Options to consider only when hpcrun causes an application to fail:

  --disable-auditor    By default, hpcrun uses LD_AUDIT to track dynamic library
                       operations (see NOTES). This option instructs hpcrun
                       to track dynamic library operations by intercepting
                       dlopen and dlclose instead of using LD_AUDIT. Note
                       that this alternate approach can cause problem with
                       load modules that specify a RUNPATH. Due to a glibc bug,
                       this option is disabled by default on ARM.

  --enable-auditor     LD_AUDIT is by default disabled on ARM due to a glib bug.
                       Use this option to enable LD_AUDIT on ARM.

  --disable-auditor-got-rewriting
                       By default, hpcrun uses LD_AUDIT to help track dynamic
                       library operations using an 'auditor' library. When using
                       an auditor library, glibc unnecessarily intercepts
                       every call to a function in a shared library. hpcrun
                       avoids this overhead by rewriting each shared library's
                       global offset table (GOT). Such rewriting is tricky.
                       This option can be used to disable GOT rewriting if
                       it is believed that the rewriting is causing the
                       application to fail.

  --default-memkind    By default, hpcrun uses its own copy of libmemkind.so. It
                       does so to sidestep a Glibc bug that causes programs to SEGV
                       when loading libraries with properties commonly
                       found in libmemkind.so on Cray x86_64 platforms. This option
                       can be used to ensure that your program loads the default
                       version of libmemkind.so.

  --namespace-single   dlmopen may load a shared library into an alternate
                       namespace.  Use of dlmopen to create multiple namespaces
                       can cause an application to crash when using glibc < 2.32
                       (see NOTES). This option asks HPCToolkit to load all
                       shared libraries within the application namespace, which
                       might help avoid a crash.  (Default when performing
                       instruction-level measurements of Intel GPU binaries.)

  --namespace-multiple dlmopen may load a shared library into an alternate
                       namespace. Force HPCToolkit to allow dlmopen to create
                       alternate namespaces.  (Default unless performing
                       instruction-level measurements of Intel GPU binaries.)

  --disable-gprof      Override and disable gprof instrumentation  This option
                       is only useful when using hpcrun to add HPCToolkit's
                       measurement subsystem to a dynamically-linked application
                       that has been compiled with -pg. One can't measure
                       performance with HPCToolkit when gprof instrumentation
                       is active in the same execution.


NOTES:

* hpcrun uses preloaded shared libraries to initiate profiling.  For this
  reason, it cannot be used to profile setuid programs.

* By default, hpcrun use LD_AUDIT to monitor an application's use of dynamic
  libraries. Use of LD_AUDIT is needed to properly interpret a load module's
  RUNPATH attribute. However, use of LD_AUDIT will cause dlmopen to fail 
  for glibc < 2.32. Intel's GTPin library for instrumentation of Intel GPU 
  binaries uses dlmopen.

EOF
    exit 0
}

#------------------------------------------------------------
# Command Line Options
#------------------------------------------------------------

@launch_early_options@

# Return success (0) if $1 is not empty and not the next option.
non_empty()
{
    case "x$1" in
	x | x-* ) return 1 ;;
	* ) return 0 ;;
    esac
}

# Process options and export environ variables.  LD_LIBRARY_PATH and
# LD_PRELOAD should be delayed until we launch the program, but the
# others can be set now.

audit_list=
preload_list=
roctracer_libdir=
gtpin_libdir=
namespace_default=multiple
namespace_multiple=
namespace_single=

# All versions of glibc currently have a bug handling R_X86_64_TLSDESC
# relocations when LD_AUDIT is used. This bug causes programs to crash
# in the dynamic loader when loading any shared library that has
# R_X86_64_TLSDESC relocations. Such relocations are often found in
# libmemkind.so on Cray platforms. To avoid trouble, HPCToolkit uses
# spack to build its own libmemkind.so library without such relocations.
# If present, use HPCToolkit's copy of libmemkind.so with the
# hope of avoiding trouble.
if test "x$memkind_libdir" != x ; then
    use_memkind=yes
else
    use_memkind=no
fi

HPCRUN_DEBUG_FLAGS=
HPCRUN_EVENT_LIST=
HPCRUN_CONTROL_KNOBS=

while test "x$1" != x
do
    arg="$1" ; shift
    case "$arg" in

	-md | --monitor-debug )
	    export MONITOR_DEBUG=1
	    ;;

	-d | --debug )
	    export HPCRUN_WAIT=1
	    ;;

	-dd | --dynamic-debug )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_DEBUG_FLAGS="$HPCRUN_DEBUG_FLAGS $1"
	    shift
	    ;;

	-ad | --audit-debug )
	    export HPCRUN_AUDIT_DEBUG=1
	    ;;

	-ck | --control-knob )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_CONTROL_KNOBS="$HPCRUN_CONTROL_KNOBS $1"
	    shift
	    ;;

	-nu | --no-unwind )
	    export HPCRUN_NO_UNWIND=1
	    ;;

	-h | -help | --help )
	    usage
	    ;;

	# --------------------------------------------------

	-a | --agent )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_OPT_LUSH_AGENTS="$1"
	    shift
	    ;;

	# --------------------------------------------------

	-e | --event )
	    non_empty "$1" || die "missing argument for $arg"
	    case "$1" in
	        GA* )      preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_ga.so" ;;
		IO* )      preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_io.so" ;;
		MEMLEAK* ) preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_memleak.so" ;;
		DATACENTRIC*  ) preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_datacentric.so" ;;
		PTHREAD_WAIT* ) preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_pthread.so" ;;
		CPU_GPU_IDLE* ) preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_gpu.so" ;;
		MPI* )     preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_mpi.so" ;;
		gpu=amd) roctracer_libdir="${roctracer_lib_path}"
			 export HIP_ENABLE_DEFERRED_LOADING=0;;
		gpu=opencl)	 preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_opencl.so" ;;

		gpu=opencl,inst) gtpin_libdir="${gtpin_lib_path}"
			preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_opencl.so"
		    namespace_default=single_if_auditing ;;

		gpu=level0,inst) gtpin_libdir="${gtpin_lib_path}"
		    namespace_default=single_if_auditing ;;

		gpu=level0) preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_level0.so" ;;
	    esac
	    case "$HPCRUN_EVENT_LIST" in
		'' ) HPCRUN_EVENT_LIST="$1" ;;
		* )  HPCRUN_EVENT_LIST="$HPCRUN_EVENT_LIST $1" ;;
	    esac
	    shift
	    ;;

	-L | -l | --list-events )
	    export HPCRUN_EVENT_LIST=LIST
		export HPCRUN_LIST_EVENT=1
	    ;;

	-ds | --delay-sampling )
	    export HPCRUN_DELAY_SAMPLING=1
	    ;;

	# --------------------------------------------------

 	-c | --count )
 	    export HPCRUN_PERF_COUNT="$1"
	    shift
	    ;;

	# --------------------------------------------------

	-t | --trace )
	    export HPCRUN_TRACE=1
	    ;;

	# --------------------------------------------------

	-fnb | --fnbounds )
	    HPCRUN_FNBOUNDS_CMD="$1"
	    shift
	    ;;

	# --------------------------------------------------

	-fnbs | --fnbounds-shutdown )
	    export HPCRUN_FNBOUNDS_SHUTDOWN=1
	    ;;

	# --------------------------------------------------

	-js | --jobs-symtab )
	    export HPCFNBOUNDS_NUM_THREADS="$1"
	    shift
	    ;;

	# --------------------------------------------------

	-o | --output )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_OUT_PATH="$1"
	    shift
	    ;;

	# --------------------------------------------------

	--disable-gprof )
	    preload_list="${preload_list:+${preload_list}:}${hpcrun_dir}/libhpcrun_gprof.so"
	    ;;

	# --------------------------------------------------

	--omp-serial-only )
	    export HPCRUN_OMP_SERIAL_ONLY=1
	    ;;

	# --------------------------------------------------

	--namespace-multiple )
	    non_empty "$namespace_single" && die "can't use both --namespace-single and --namespace-multiple"
	    namespace_multiple=yes
	    ;;

	# --------------------------------------------------

	--namespace-single )
	    non_empty "$namespace_multiple" && die "can't use both --namespace-single and --namespace-multiple"
	    namespace_single=yes
	    ;;

	# --------------------------------------------------

	-r | --retain-recursion )
	    export HPCRUN_RETAIN_RECURSION=1
	    ;;

	# --------------------------------------------------

	-m | --merge-threads )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_MERGE_THREADS="$1"
	    shift
	    ;;

	# --------------------------------------------------

	-lm | --low-memsize )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_LOW_MEMSIZE="$1"
	    shift
	    ;;

	-ms | --memsize )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_MEMSIZE="$1"
	    shift
	    ;;

	# --------------------------------------------------

	-f | -fp | --process-fraction )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_PROCESS_FRACTION="$1"
	    shift
	    ;;

	-mp | --memleak-prob )
	    non_empty "$1" || die "missing argument for $arg"
	    export HPCRUN_MEMLEAK_PROB="$1"
	    shift
	    ;;

	# --------------------------------------------------

	--disable-auditor-got-rewriting )
	    export HPCRUN_AUDIT_DISABLE_PLT_CALL_OPT=1
	    ;;

	--disable-auditor )
	    export HPCRUN_AUDIT_FAKE_AUDITOR=1
	    ;;

        --enable-auditor )
            unset HPCRUN_AUDIT_FAKE_AUDITOR
            ;;

        --default-memkind )
            use_memkind=no
            ;;

        # --------------------------------------------------

	-- )
	    break
	    ;;

	-* )
	    die "unknown or invalid option: $arg"
	    ;;

	* )
	    set -- "$arg" "$@"
	    break
	    ;;
    esac
done

# Add default sampling source if needed.
case "$HPCRUN_EVENT_LIST" in
    '' ) HPCRUN_EVENT_LIST='CPUTIME@5000' ;;
    RETCNT ) HPCRUN_EVENT_LIST='CPUTIME@5000 RETCNT' ;;
esac
export HPCRUN_EVENT_LIST

# There must be a command to run, unless -L is set.
if test -z "$1" ; then
    if test "$HPCRUN_EVENT_LIST" = LIST ; then
	set -- /bin/ls
    else
	die "no command to profile"
    fi
fi


# collapse namespaces, if necessary
if test "$namespace_default" = single_if_auditing; then
  if test "$HPCRUN_AUDIT_FAKE_AUDITOR" = 1; then
    namespace_default=multiple
  else
    namespace_default=single
  fi
fi
if test "$namespace_multiple"x = x ; then
  if test $namespace_default = single || test "$namespace_single"x != x ; then
    preload_list="${hpcrun_dir}/libhpcrun_dlmopen.so${preload_list:+:${preload_list}}"
  fi
fi


#------------------------------------------------------------
# Pre-Launch Sanity Checks
#------------------------------------------------------------

# Find the command on PATH.  We need to run file and nm on the binary,
# so we need an actual path.

command="$1"
case "$command" in
    */* ) ;;
    * )
	OLDIFS="$IFS"
	IFS=:
	for dir in $PATH ; do
	    if test -x "${dir}/${command}" ; then
		command="${dir}/${command}"
		break
	    fi
	done
	IFS="$OLDIFS"
	;;
esac

# Sanity checks before launch.

file_exists=no
if type file >/dev/null 2>&1 ; then
    file_exists=yes
fi

if test -x "$command" && test "$file_exists" = yes ; then
    #
    # For dynamic binaries, verify that the application and libhpcrun
    # have the same wordsize, both 32-bit or both 64-bit.
    #
    cmd_file_out=`file -L "$command" 2>/dev/null`
    echo "$cmd_file_out" | grep -E -i -e 'elf.*dynamic' >/dev/null 2>&1
    if test $? -eq 0 ; then
	appl_bit=`expr "$cmd_file_out" : '.*ELF.*\([0-9][0-9].bit\)'`
	file_out=`file -L "${hpcrun_dir}/libhpcrun.so"`
	hpcrun_bit=`expr "$file_out" : '.*ELF.*\([0-9][0-9].bit\)'`
	if test "$appl_bit" != "$hpcrun_bit" ; then
	    echo "hpcrun: cannot profile application: $command" 1>&2
	    echo "application is $appl_bit but hpctoolkit is $hpcrun_bit" 1>&2
	    exit 1
	fi
    fi
    #
    # For static binaries, verify that hpcrun is linked in.  Use
    # strings instead of nm to handle stripped binaries.
    #
    echo "$cmd_file_out" | grep -E -i -e 'elf.*static' >/dev/null 2>&1
    if test $? -eq 0 ; then
	strings "$command" 2>&1 | grep -e hpcrun >/dev/null 2>&1
	if test $? -ne 0 ; then
	    echo "hpcrun: static binary is missing libhpcrun: $command" 1>&2
	    echo "rebuild the application with hpclink" 1>&2
	    exit 1
	fi
    fi
fi

#------------------------------------------------------------
# Final Environ Settings and Exec the Binary
#------------------------------------------------------------

# Disable the darshan I/O library.  This intercepts some I/O functions
# inside signal handlers and can cause deadlock.
export DARSHAN_DISABLE=1

# Add OMP_SKIP_MSB to HPCRUN_DEBUG_FLAGS if the binary contains
# _mp_init.

nm "$command" 2>/dev/null | grep -e ' _mp_init' >/dev/null 2>&1
if test $? -eq 0 ; then
    export HPCRUN_DEBUG_FLAGS="$HPCRUN_DEBUG_FLAGS OMP_SKIP_MSB"
fi

# Enable core files.
ulimit -S -c unlimited >/dev/null 2>&1

#------------------------------------------------------------
# assemble hpc_ld_library_path without any empty entries
#------------------------------------------------------------

hpc_ld_library_path="${hpcrun_dir}"
hpc_ld_library_path="${hpc_ld_library_path}${papi_libdir:+:${papi_libdir}}"
hpc_ld_library_path="${hpc_ld_library_path}${ext_libdir:+:${ext_libdir}}"
hpc_ld_library_path="${hpc_ld_library_path}${perfmon_libdir:+:${perfmon_libdir}}"
hpc_ld_library_path="${hpc_ld_library_path}${roctracer_libdir:+:${roctracer_libdir}}"
hpc_ld_library_path="${hpc_ld_library_path}${gtpin_libdir:+:${gtpin_libdir}}"
if test "$use_memkind" = yes ; then
    hpc_ld_library_path="${hpc_ld_library_path}${memkind_libdir:+:${memkind_libdir}}"
fi

#------------------------------------------------------------
# assemble preload list
#------------------------------------------------------------

preload_list="${libmonitor_dir}/libmonitor.so${preload_list:+:${preload_list}}"
preload_list="${hpcrun_dir}/libhpcrun.so${preload_list:+:${preload_list}}"

# Set up the auditor or fake auditor, depending on what's configured.
if test "$HPCRUN_AUDIT_FAKE_AUDITOR" = 1 ; then
    preload_list="${hpcrun_dir}/libhpcrun_fake_audit.so${preload_list:+:${preload_list}}"
else
    audit_list="${hpcrun_dir}/libhpcrun_audit.so${audit_list:+:${audit_list}}"
fi

# Allow fnbounds command relative to hpcfnbounds_dir.
case "$HPCRUN_FNBOUNDS_CMD" in
    /* ) ;;
    '' ) HPCRUN_FNBOUNDS_CMD="${hpcfnbounds_dir}/hpcfnbounds2" ;;
    * )  HPCRUN_FNBOUNDS_CMD="${hpcfnbounds_dir}/$HPCRUN_FNBOUNDS_CMD" ;;
esac

if test ! -x "$HPCRUN_FNBOUNDS_CMD" ; then
    echo "bad HPCRUN_FNBOUNDS_CMD command: $HPCRUN_FNBOUNDS_CMD" >&2
    HPCRUN_FNBOUNDS_CMD="${hpcfnbounds_dir}/hpcfnbounds2"
fi
export HPCRUN_FNBOUNDS_CMD

export HPCRUN_AUDIT_MAIN_LIB="${hpcrun_dir}/libhpcrun.so"

if test -n "${hpc_ld_library_path}"; then
  LD_LIBRARY_PATH="${hpc_ld_library_path}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
fi
if test -z "${LD_LIBRARY_PATH}"; then unset LD_LIBRARY_PATH; fi

if test -n "${preload_list}"; then
  LD_PRELOAD="${preload_list}${LD_PRELOAD:+:${LD_PRELOAD}}"
fi
if test -z "${LD_PRELOAD}"; then unset LD_PRELOAD; fi

if test -n "${audit_list}"; then
  LD_AUDIT="${audit_list}${LD_AUDIT:+:${LD_AUDIT}}"
fi
if test -z "${LD_AUDIT}"; then unset LD_AUDIT; fi

export LD_LIBRARY_PATH LD_PRELOAD LD_AUDIT
exec "$@"
