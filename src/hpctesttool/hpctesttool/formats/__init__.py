# SPDX-FileCopyrightText: 2022-2024 Rice University
# SPDX-FileCopyrightText: 2024 Contributors to the HPCToolkit Project
#
# SPDX-License-Identifier: BSD-3-Clause

import collections.abc
import contextlib
import tarfile
import tempfile
import typing
from pathlib import Path, PurePath

import ruamel.yaml

from . import base, v4

__all__ = ["from_path", "from_path_extended", "vcurrent"]

vcurrent = v4

dir_classes: typing.Tuple[typing.Type[base.DatabaseBase], ...] = (v4.Database,)
file_classes: typing.Tuple[typing.Type[base.DatabaseFile], ...] = (
    v4.metadb.MetaDB,
    v4.profiledb.ProfileDB,
    v4.cctdb.ContextDB,
    v4.tracedb.TraceDB,
)


def from_path(
    src: Path,
) -> typing.Optional[typing.Union[base.DatabaseBase, base.DatabaseFile]]:
    """Open a file/directory of any of the supported formats. Returns the object-form of the input,
    or None if it does not appear to be a supported format.
    """
    if src.is_dir():
        # Presume it's a database directory
        for dircls in dir_classes:
            with contextlib.suppress(
                base.InvalidFormatError, base.IncompatibleFormatError
            ):
                return dircls.from_dir(src)
    elif src.is_file():
        # Presume it's a loose data file
        with open(src, "rb") as srcf:
            for filecls in file_classes:
                with contextlib.suppress(
                    base.InvalidFormatError, base.IncompatibleFormatError
                ):
                    return filecls.from_file(srcf)
    elif not src.exists():
        raise FileNotFoundError(src)
    return None


def _iter_deep_dir(path: Path) -> "collections.abc.Iterator[Path]":
    yield path
    while path.is_dir():
        children = list(path.iterdir())
        if len(children) == 1:
            path = children[0]
            yield path


def from_path_extended(
    src: Path, *, subdir: typing.Optional[PurePath] = None
) -> typing.Optional[typing.Union[base.DatabaseBase, base.DatabaseFile]]:
    """Extension of from_path that also supports some more obscure but convenient formats.

    Supports:
     - Compressed (xz, gzip, bzip2) and uncompressed tarballs containing a single database dir/file
     - Tarballs containing multiple database directories (when subdir is provided)
     - YAML databases as generated by hpctoolkit.formats.print
    """
    # Attempt 1: It's a normal database/file
    result = from_path(src)
    if result is not None:
        return result

    if src.is_file():
        # Attempt 2: It's a tarball containing a database directory or file
        with tempfile.TemporaryDirectory() as d, contextlib.suppress(tarfile.TarError):
            pd = Path(d)
            with tarfile.open(src, mode="r:*") as tf:
                tf.extractall(pd)

            if subdir is None:
                for attempt in _iter_deep_dir(pd):
                    result = from_path(attempt)
                    if result is not None:
                        return result
            else:
                result = from_path(pd / subdir)
                if result is not None:
                    return result

        # Attempt 3: It's a YAML file containing a serialized database or otherwise
        with open(src, encoding="utf-8") as f, contextlib.suppress(
            ruamel.yaml.YAMLError
        ):
            result = ruamel.yaml.YAML(typ="safe").load(f)
            if isinstance(result, (base.DatabaseBase, base.DatabaseFile)):
                return result

    # All attempts failed, give up
    return None
