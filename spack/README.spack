1 Building HPCToolkit with Spack
================================

1.1 Introduction
----------------

These notes describe how to build HPCToolkit and its prerequisites with
Spack instead of hpctoolkit-externals.  The transition from externals to
spack will be gradual in the sense that both will continue to work for
some time.  However, going forward, we will stop updating externals and
instead rely on spack for newer versions of packages.

   These notes are written for someone who has built hpctoolkit before
and now wants to use spack to build hpctoolkit's dependencies.  If you
are a more experienced spack user, especially if you want to use spack
to build hpctoolkit plus several other packages, then you will want to
adapt these directions to your own needs.

   It is possible to use spack to install all of hpctoolkit (except the
viewers) or build just the prereqs and then build hpctoolkit with the
traditional 'configure ; make ; make install'.  Developers will probably
want to clone the hpctoolkit repository and then run 'configure' and
'make' manually, but both methods are supported.

   Note: building HPCToolkit with spack is not yet supported for Cray or
Blue Gene/Q systems.

   Spack documentation is available at:

     <https://spack.readthedocs.io/en/latest/index.html>

1.2 Clone Spack and HPCToolkit
------------------------------

Spack is available via git clone from github.  This includes the core
spack machinery and recipes for building approximately 3,000 packages
(and growing).  You also need to clone HPCToolkit for the
'packages.yaml' file which is used to configure the spack build.

     git clone https://github.com/spack/spack.git
     git clone https://github.com/hpctoolkit/hpctoolkit.git

After cloning, add the 'spack/bin' directory to your PATH, or else
source the spack 'setup-env' script.

     (bash)   .  /path/to/spack/share/spack/setup-env.sh
     (csh)    setenv SPACK_ROOT /path/to/spack/root
              source $SPACK_ROOT/share/spack/setup-env.csh

It suffices to add 'spack/bin' to your PATH (or even symlink the spack
launch script).  Sourcing the 'setup-env' script adds extra support for
modules built by spack.

1.3 Config.yaml
---------------

'config.yaml' is the top-level spack config file.  This specifies the
directory layout for installed files and the top-level spack parameters.
There are two or three fields in this file that you should set for your
local system.

  1. 'install_tree' - by default, spack installs its packages inside the
     spack repository at 'spack/opt/spack'.  If you want to use another
     location, then set this.

  2. 'build_jobs' - by default, spack uses all available hardware
     threads for parallel make.  For machines with many threads, this
     can sometimes overwhelm the system and you should set this to a
     smaller number.  (There is precedent.)

There are also parameters for the locations of the module files, the
build directories, the cache of downloaded tar files, etc, which you may
wish to set.

   The default 'config.yaml' file is in the spack repository at
'spack/etc/spack/defaults'.  The simplest solution is to copy this file
one directory up and then edit the copy (don't edit the default file
directly).

     cd spack/etc/spack
     cp defaults/config.yaml .
     vi config.yaml

Alternatively, you could put this file in a separate directory, outside
of the spack repository and then use '-C dir' on the spack command line.
(The '-C' option goes before the spack command name.)

     spack -C dir install ...

Note: if you put 'config.yaml' in 'spack/etc/spack', then it will apply
to every spack command for that repository (and you won't forget).
Putting it in a separate directory is more flexible because you can
support multiple configurations from the same repository.  But then you
must use '-C dir' with every spack command or else you will get
inconsistent results.

   You can view the current configuration with 'spack config'.

     spack [-C dir] config get config

See the spack docs on 'Configuration Files' and 'Basic Settings'.

     <https://spack.readthedocs.io/en/latest/configuration.html>
     <https://spack.readthedocs.io/en/latest/config_yaml.html>

1.4 Packages.yaml
-----------------

The 'packages.yaml' file specifies the versions and variants for the
packages that spack installs and serves as a common reference point for
HPCToolkit's prerequisites.  This file also specifies the paths or
modules for system build tools (cmake, python, etc) to avoid rebuilding
them.  Put this file in the same directory as 'config.yaml'.

   There are two main sections to 'packages.yaml'.  The first specifies
the versions and variants for hpctoolkit's prereqs.  In most cases, the
default variants for the latest versions (plus any constraints from
hpctoolkit's 'package.py' file) should work, but this is not guaranteed.

   A technical note: versions and variants specified in hpctoolkit's
'package.py' file are hard constraints and should not be changed.
Variants in 'packages.yaml' are preferences that may be modified for
your local system.  (But don't report a bug until you have first tried
the versions from 'packages.yaml' that we supply.)

   There are at least two packages with a variant that you may need to
change depending on your system.  But always check the current
'packages.yaml' file to see if any more have been added.

  1. 'intel-tbb' - for very old Intel or AMD systems that don't support
     transactional memory, change '+tm' to '~tm'.  (This option has no
     effect on non-x86 systems.)

  2. 'libmonitor' - on Blue Gene/Q (not yet supported), add '+bgq'.

The second section in 'packages.yaml' specifies a path or module for
system build tools.  Building hpctoolkit's prerequisites requires cmake
3.0 or later, perl 5.x and python 2.7.x or 3.x.  There are three ways to
satisfy these requirements: a system installed version (eg, /usr), a
module or build from scratch.

   By default, spack will rebuild these from scratch, even if your
version is perfectly fine.  If you already have an installed version and
prefer to use that instead, then you can specify this in
'packages.yaml'.  Note that these are only build tools.  Hpctoolkit does
not link with any of their libraries.

   For example, this entry says that cmake 3.7.2 is available from
module 'CMake/3.7.2' and that spack should use this instead of building
its own copy.

     cmake:
       modules:
         cmake@3.7.2:  CMake/3.7.2
       buildable: False

This example says that that perl v5.16.3 is installed at
'/usr/bin/perl'.  Note that the 'paths:' entry is the parent directory
of 'bin', not the bin directory itself (similar to prefix).

     perl:
       paths:
         perl@5.16.3:  /usr
       buildable: False

See the spack docs on 'Build Customization' and 'Specs and
Dependencies'.

     <https://spack.readthedocs.io/en/latest/build_settings.html>
     <https://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies>

1.5 Compilers and compilers.yaml
--------------------------------

Building HPCToolkit requires GNU gcc/g++ at a minimum version 4.8 and
preferably 5.x or later.  By default, spack uses the latest available
version of gcc, but you can specify a different compiler, if one is
available.

   Spack uses a separate file, 'compilers.yaml' to store information
about available compilers.  This file is normally in your home directory
at '~/.spack/platform' where 'platform' is normally 'linux' (or else
'cray' or 'bgq').

   The first time you use spack, or after adding a new compiler, you
should run 'spack compiler find' to have spack search your system for
available compilers.  If a compiler is provided as a module, then you
should load the module before running 'find'.  Normally, you only need
to run 'find' once, unless you want to add or delete a compiler.  You
can also run 'spack compiler list' and 'spack compiler info' to see what
compilers spack knows about.

   For example, on one power8 system running RedHat 7.3, /usr/bin/gcc is
version 4.8.5, but gcc 6.4.0 is available as module 'GCC/6.4.0'.

     $ module load GCC/6.4.0

     $ spack compiler find
     ==> Added 2 new compilers to /home/krentel/.spack/linux/compilers.yaml
         gcc@6.4.0  gcc@4.8.5
     ==> Compilers are defined in the following files:
         /home/krentel/.spack/linux/compilers.yaml

     $ spack compiler list
     ==> Available compilers
     -- gcc rhel7-ppc64le --------------------------------------------
     gcc@6.4.0  gcc@4.8.5

     $ spack compiler info gcc@6.4
     gcc@6.4.0:
         paths:
             cc = /opt/apps/software/Core/GCCcore/6.4.0/bin/gcc
             cxx = /opt/apps/software/Core/GCCcore/6.4.0/bin/g++
             f77 = /opt/apps/software/Core/GCCcore/6.4.0/bin/gfortran
             fc = /opt/apps/software/Core/GCCcore/6.4.0/bin/gfortran
         modules  = ['GCC/6.4.0']
         operating system  = rhel7

Note: for compilers from modules, spack does not fill in the 'modules:'
field in the 'compilers.yaml' file.  You need to do this manually.  In
the above example, after running 'find', I edited 'compilers.yaml' to
add 'GCC/6.4.0' to the 'modules:' field as below.  This is important to
how spack manipulates the build environment.

     - compiler:
         modules: [GCC/6.4.0]
         operating_system: rhel7
         spec: gcc@6.4.0
         ...

Spack uses '%' syntax to specify the build compiler and '@' syntax to
specify the version.  For example, suppose you had gcc versions 7.3.1,
6.4.0 and 5.4.0 available and you wanted to use 6.4.0.  You could write
this as:

     spack install package %gcc@6.4.0

See the spack docs on 'Compiler Configuration'.

     <https://spack.readthedocs.io/en/latest/getting_started.html#compiler-configuration>

1.6 Spack Install
-----------------

First, make sure that you have your 'config.yaml', 'packages.yaml' and
'compilers.yaml' files in place and edited for your system.  You can see
how spack will build hpctoolkit with 'spack spec' and 'spack graph'.

     spack spec hpctoolkit
     spack graph hpctoolkit

Then, there are two ways to install hpctoolkit.  The 'one button' method
uses spack to install everything.

     spack install hpctoolkit

Alternatively, especially for developers, you can use spack to install
hpctoolkit's dependencies and then build hpctoolkit with the traditional
'configure ; make ; make install' method.  Of course, if you already
used the one-button method, then the spack install tree also contains
all of hpctoolkit's prereqs.

     spack install --only dependencies hpctoolkit

Then, run hpctoolkit configure with '--with-spack' instead of
'--with-externals'.  The '--with-spack' option passes the prerequisite
paths to hpctoolkit in place of all of the individual '--with-pkg'
options (as did externals).

   Spack installs its packages in subdirectories of 'install_tree' named
by architecture (platform, OS, machine type) and compiler (family,
version).  The argument to '--with-spack' should be the directory
containing all of the individual install directories (normally two
directories down from the install root).  For example, on my Fedora 26
build machine, I would use:

     configure  \
        --prefix=/path/to/hpctoolkit/install/prefix  \
        --with-spack=/path/to/spack/install_tree/linux-fedora26-x86_64/gcc-7.3.1  \
        ...
     make -j <num>
     make install

Note: if your spack install tree has multiple versions or variants for
the same package, then '--with-spack' will select the most recent one by
directory time stamp (and issue a warning).  If this is not what you
want, then you will need to specify the correct version with a
'--with-pkg' option.

1.7 Advanced Options
--------------------

1.7.1 MPI
.........

HPCToolkit always supports profiling MPI applications.  For hpctoolkit,
the spack variant '+mpi' is for building hpcprof-mpi, the MPI version of
hpcprof.  If you want to build hpcprof-mpi, then you need to supply an
installation of MPI.

   Normally, for systems with compute nodes, you should use an existing
MPI module that was built for the correct interconnect for your system
and add this to 'packages.yaml'.  The MPI module should be built with
the same version of GNU gcc/g++ used to build hpctoolkit (to keep the
C++ libraries in sync).

1.7.2 PAPI vs Perfmon
.....................

HPCToolkit can access the Hardware Performance Counters with either PAPI
or Perfmon (libpfm4).  By default, the hpctoolkit package uses perfmon.
If you want to use PAPI instead, then build hpctoolkit with '+papi'.
However, you can't use both due to a conflict in their header files.

   PAPI runs on top of the perfmon library, but PAPI uses its own,
internal copy of perfmon.  Prior to version 5.6.0, PAPI did not install
the perfmon header files, so it was impossible to access the perfmon
events through PAPI.

   However, starting with version 5.6.0, PAPI now installs both the
perfmon library and its header files.  Hpctoolkit will automatically
detect this, so if you build hpctoolkit with a recent enough version of
PAPI, then both the PAPI and perfmon interfaces will be available.

