#
#  packages.yaml
#
#  This file specifies the versions and variants for HPCToolkit's
#  dependency packages and serves as a common reference point for how
#  to build them.  It also specifies the paths or modules for system
#  build tools (cmake, python, etc) to avoid rebuilding them.
#
#  Put this file in one of spack's configuration scope directories:
#    1. <spack-root>/etc/spack -- applies to this spack repo
#    2. <home-dir>/.spack -- applies to any spack on this machine
#    3. any dir -- applies with 'spack -C dir' argument
#
#  There are three sections: (1) regular hpctoolkit dependency specs,
#  (2) gpu and MPI specs, and (3) system build tools: cmake, perl,
#  python and GCC.
#
#  See also:
#    https://spack.readthedocs.io/en/latest/configuration.html
#    https://spack.readthedocs.io/en/latest/build_settings.html
#
#  Last revised: April 18, 2021.
#
packages:

  # If you want to specify a generic target or a specific compiler for
  # all builds, then you can set those here.  For example, a generic
  # target might be useful for a shared install acrosss multiple
  # machine types.
  # generic families: aarch64, ppc64, ppc64le, x86_64
  #
  # all:
  #   target: [x86_64]
  #   compiler: [gcc@8.3.1]


  #------------------------------------------------------------
  # 1 -- HPCToolkit Prerequisite Packages
  #------------------------------------------------------------

  # This section contains hpctoolkit's prerequisites, recommended
  # versions and necessary variants.  Packages in this section should
  # normally be built from source, even if there is a system install.
  # For most packages, the most recent version will work.
  #
  # Note: the following packages have variants that may need changing
  # for your local system.
  #
  #   1. binutils -- avoid 2.35, it has a bug that spews errors from
  #   hpcprof.  Use 2.34 until 2.36 is available.
  #
  #   2. boost -- avoid 1.68.0, it breaks the build in hpctoolkit.
  #   1.66.0 is good for older dyninst revs, or 1.72.0 for recent dyninst.
  #
  #   3. intel-tbb -- add '~tm' for AMD, Xeon Phi (KNL, etc), and very
  #   old Intel systems that don't support transactional memory.
  #
  # Blue Gene is no longer supported.
  #
  #------------------------------------------------------------


  # hpctoolkit -- these settings can be specified here or else on the
  # spack install command line.
  #
  # Use version 'master' for the latest snapshot from master.
  # Version 'develop' is for pre-release features.
  # 2019.12.28 is the last version that runs on Blue Gene.
  #
  # +mpi builds hpcprof-mpi (requires mpi).
  # +papi uses papi instead of perfmon (now default).
  #
  # hpctoolkit:
  #   version:  [2021.03.01, master]
  #   variants: +mpi +papi


  # binutils -- used by hpcprof and struct simple (for functions and
  # line map info) and for VMA types in various places.
  #
  # Need >= 2.32 for important bug fixes.
  # Avoid 2.35, it contains a bug that spews errors from hpcprof.
  # Hpctoolkit <= 2020.03.01 requires binutils <= 2.33.1.
  #
  # +libiberty is needed for xmalloc functions in libbfd.
  # ~nls is used to avoid building gettext.
  #
  binutils:
    version:  [2.36.1]
    variants: +libiberty ~nls


  # boost -- used by dyninst and now in hpcstruct.
  #
  # Dyninst requires >= 1.61.
  #   1.66.0 is good for older versions of dyninst.
  #   1.72.0 is good for recent dyninst.
  #   avoid 1.68.0, it breaks the build for hpctoolkit.
  #
  # +atomic, +chrono, etc are for dyninst.
  # +graph, +regex, etc are for toolkit proper.
  # ~mpi, ~python, etc are to reduce prereqs.
  # ~debug is to build release (optimized) variant.
  # visibility=global is required for recent hpctoolkit.
  #
  boost:
    version:  [1.72.0]
    variants: >
      +atomic +chrono +date_time +filesystem +system +thread +timer
      +graph +regex +shared +multithreaded ~debug
      ~mpi ~python ~iostreams ~numpy
      visibility=global


  # bzip2 -- used by elfutils to read compressed sections (and copy
  # libs).
  #
  # Bzip2 has resumed development, anything after 1.0.6 is good.
  #
  bzip2:
    version:  [1.0.8]
    variants: +shared


  # dyninst -- used in hpcstruct for line map info, inline sequences
  # and loop analysis.  Hpctoolkit and Dyninst work closely together
  # and Dyninst issues releases infrequently, so sometimes it's
  # necessary to use master for the best results.
  #
  # Latest hpctoolkit needs >= 11.0.0 or later.
  # On Blue Gene, with default gcc 4.4 compilers, use version 9.3.2.
  #
  # +openmp is to support openmp threads in parseapi.
  #
  dyninst:
    version:  [11.0.0, master]
    variants: +openmp build_type=RelWithDebInfo


  # elfutils -- used by dyninst for reading ELF sections.
  #
  # Dyninst requires >= 0.173 and we want a recent version for best
  # support for output from current compilers.  On Blue Gene, 0.176
  # doesn't build, so use 0.175.
  #
  # +bzip2, +xz are for reading compressed sections.
  # ~nls is used to avoid building gettext.
  #
  elfutils:
    version:  [0.182]
    variants: +bzip2 +xz ~nls


  # gotcha -- used in hpcrun to assist libunwind
  #
  # Requires version 1.0.3 or later.
  #
  gotcha:
    version:  [1.0.3]
    variants: build_type=RelWithDebInfo


  # intel-tbb -- used by dyninst as part of parallel parsing.
  #
  # Dyninst requires >= 2018.6, most anything after that is good.
  #
  # Note: add ~tm for very old x86 or AMD or KNL systems that don't
  # support transactional memory (no-op on non-x86).
  #
  intel-tbb:
    version:  [2020.3]
    variants: +shared +tm


  # intel-xed -- used in various places to parse x86 instructions
  # (used on x86 only).
  #
  # Xed now has releases but changes very slowly.  Normally use the
  # latest release for best results.
  #
  # +debug adds debug symbols (-g).
  #
  intel-xed:
    version:  [12.0.1]
    variants: +debug


  # libdwarf -- used in fnbounds for access to eh frames (not yet
  # available from elfutils).
  #
  # Normally want a recent version for best support for output from
  # current compilers.
  #
  libdwarf:
    version:  [20180129]


  # libiberty -- needed for dyninst configure (although dyninst 10.x
  # doesn't actually link with it).
  #
  # Any recent version is good.
  #
  # +pic is needed to link with dyninst shared library.
  #
  libiberty:
    version:  [2.33.1]
    variants: +pic


  # libmonitor -- used in hpcrun to provide access to an application's
  # processes and threads.
  #
  # Normally need the most recent snapshot or master.
  #
  # +hpctoolkit is needed for features specific to hpctoolkit (client
  # signals).
  # ~dlopen is needed for 2021.02 and later.
  #
  # Note: add +bgq on blue gene/q.
  #
  libmonitor:
    version:  [2020.10.15, master]
    variants: +hpctoolkit ~dlopen


  # libpfm4 (perfmon) -- used in hpcrun for access to the hardware
  # performance counters.
  #
  # If PAPI is available with the perfmon headers, then that
  # supersedes perfmon.  Otherwise, perfmon provides the perf sample
  # source but not PAPI.
  #
  # Normally want the latest version to support recent CPU types.
  #
  libpfm4:
    version:  [4.11.0]


  # libunwind -- used in hpcrun to help with unwinding.
  #
  # Normally want the most recent release.
  #
  # +xz is for reading compressed symbol tables.
  # +pic is required for linking with hpcrun.
  #
  libunwind:
    version:  [1.5.0]
    variants: +xz +pic


  # mbedtls -- used in hpcrun for hash functions.
  #
  # Use a recent version >= 2.16.1.
  #
  # +pic is required for linking with hpcrun.
  #
  mbedtls:
    version:  [2.16.1]
    variants: +pic


  # papi -- used in hpcrun for access to the hardware performance
  # counters.
  #
  # If there is a pre-built PAPI for the compute nodes, then it may be
  # better to use that and replace this with a 'prefix:' or 'modules:'
  # entry (see the section on cmake).  But make sure that the PAPI
  # include directory contains the perfmon headers, or else you can't
  # use both PAPI and perfmon.
  #
  # If building, then use version >= 5.6.0 for the installed perfmon
  # headers.
  #
  papi:
    version:  [6.0.0.1]


  # xerces -- used in hpcprof to read XML.
  #
  # Any recent version is good.
  #
  # transcoder=iconv is needed to avoid linking with libiconv.
  # netaccessor=none is to reduce prereqs.
  #
  xerces-c:
    version:  [3.2.2]
    variants: transcoder=iconv netaccessor=none


  # xz (lzma) -- used by elfutils and libunwind to read compressed
  # sections.
  #
  # Any recent version is good.
  #
  # +pic is required for linking with hpcrun.
  #
  xz:
    version:  [5.2.5]
    variants: +pic


  # zlib -- used by binutils, elfutils and libdwarf to read compressed
  # sections.
  #
  # Zlib development is stagnant and 1.2.9 and 1.2.10 are buggy, so
  # 1.2.11 is the only recent version.
  #
  # +optimize is to add -O2.
  #
  zlib:
    version:  [1.2.11]
    variants: +optimize +shared


  #------------------------------------------------------------
  # 2 -- GPU and MPI Packages
  #------------------------------------------------------------

  # Packages in this section can be built from source, but if there is
  # a system install for the compute nodes, then it is normally better
  # to use that.

  # cuda -- nvidia cuda, now in master
  #
  # Requires: 10.x or later, 11.x preferred.
  #
  # cuda:
  #   version: [11.2.0]
  #
  # cuda:
  #   externals:
  #   - spec: cuda@11.2.0
  #     prefix: /path/to/cuda-11.2.0/directory

  #------------------------------------------------------------

  # rocm -- amd gpus, now in master
  #
  # Requires: 3.10.0 or later, 4.0.0 preferred.
  #
  # For now, ROCM requires a 2-step build.  First, if /opt/rocm is
  # available, then use that.  If not, then build hip, rocm-dbgapi and
  # roctracer-dev with spack.
  #
  # hip:
  #   version: [4.0.0]
  #
  # rocm-dbgapi:
  #   version: [4.0.0]
  #
  # roctracer-dev:
  #   version: [4.0.0]

  # Second, specify the three packages with an externals prefix, even
  # if you built them with spack.  For example, with /opt/rocm-4.0.0,
  # use:
  #
  # hip:
  #   externals:
  #   - spec: hip@4.0.0
  #     prefix: /opt/rocm-4.0.0/hip
  #
  #   rocm-dbgapi:
  #     externals:
  #     - spec: rocm-dbgapi@4.0.0
  #       prefix: /opt/rocm-4.0.0
  #
  #   roctracer-dev:
  #     externals:
  #     - spec: roctracer-dev@4.0.0
  #       prefix: /opt/rocm-4.0.0
  #
  # Note: for /opt/rocm, the hip prefix is the hip subdirectory,
  # for the other two, it is the /opt/rocm directory.

  #------------------------------------------------------------

  # MPI -- hpctoolkit always supports profiling MPI applications.
  # Adding MPI here is only for building hpcprof-mpi, the MPI version
  # of hpcprof.
  #
  # Normally, you want MPI from a module (mpich, mvapich, openmpi)
  # that was built for the correct interconnect system for the compute
  # nodes.  Also, for hpcprof-mpi, MPI should be built with GNU
  # gcc/g++ and the same version used to build hpctoolkit (to keep the
  # C++ libraries in sync).
  #
  # openmpi:
  #   externals:
  #   - spec: openmpi@3.1.6
  #     modules:
  #     - OpenMPI/3.1.6
  #   buildable: False


  #------------------------------------------------------------
  # 3 -- System Build Tools
  #------------------------------------------------------------

  # We require cmake >= 3.4, perl >= 5.x and python >= 3.4.
  # There are three ways to satisfy these requirements: a system
  # installed version (eg, /usr), a module or build from scratch.
  #
  # By default, spack will rebuild these, even if your version is
  # perfectly fine.  If you already have an installed version and
  # prefer to use that instead, then uncomment some entry below and
  # edit to fit your system.
  #
  # Note: these three are all build tools.  They are needed to build
  # hpctoolkit, but we don't need them at run time or link with any
  # libraries.  (Not counting hpcsummary which is a python script.)
  # Note:
  #
  #  1. the 'prefix' entry is the parent directory of 'bin', not the
  #  bin directory itself.
  #
  #  2. the 'spec' entry may be a full spec, including dependency specs.
  #
  #  3. a given package may have multiple spec, module and version
  #  entries.
  #
  #  4. 'buildable: False' is optional.  It tells spack that it must use
  #  a 'prefix' or 'modules' entry, or else fail the build.

  #------------------------------------------------------------

  # cmake -- dyninst requires cmake >= 3.4.x.

  # Example for a system install.  This example says that cmake 3.11.0
  # is available at /usr/bin/cmake.
  # cmake:
  #   externals:
  #   - spec: cmake@3.11.0
  #     prefix: /usr
  #   buildable: False

  # Example for a module.  This example says that cmake 3.7.2 is
  # available from module 'CMake/3.7.2'.  You may specify multiple
  # modules, if needed.
  # cmake:
  #   externals:
  #   - spec: cmake@3.7.2
  #     modules:
  #     - CMake/3.7.2
  #   buildable: False

  # Example spec to build cmake from scratch.
  # +ownlibs, ~qt and ~openssl are to reduce prerequisites.
  # cmake:
  #   version:  [3.12.4]
  #   variants: +ownlibs ~qt ~openssl

  #------------------------------------------------------------

  # perl -- autotools requires perl >= 5.x which most systems have.

  # Example for system perl.
  # perl:
  #   externals:
  #   - spec: perl@5.16.3
  #     prefix: /usr
  #   buildable: False

  # Example spec to build perl.
  # perl:
  #   version:  [5.26.2]

  #------------------------------------------------------------

  # python -- we require python >= 3.4, but some rocm packages require
  # python 2.7 (and need to be built separately).

  # Example for system python.  If you have both python2 and python3,
  # then specify them both as 'python' (a special rule for python).
  # python:
  #   externals:
  #   - spec: python@3.6.5
  #     prefix: /usr
  #   - spec: python@2.7.5
  #     prefix: /usr
  #   buildable: False

  # Example for python module.
  # python:
  #   externals:
  #   - spec: python@3.6.5
  #     modules:
  #     - Python/3.6.5
  #   buildable: False

  # Example spec to build python.
  # ~dbm, etc are to reduce prerequisites.
  # python:
  #   version:  [3.6.5]
  #   variants: ~dbm ~libxml2 ~ssl ~sqlite3 ~tkinter

  #------------------------------------------------------------

  # GCC -- hpctoolkit requires building with GNU gcc/g++.
  # Use version 7.3.x or later.
  #
  # Spack handles compilers specially with the compilers.yaml file.
  # This example is only for building a more recent compiler.

  # gcc:
  #   version:  [7.4.0, 8.4.0]
