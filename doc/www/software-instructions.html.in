<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- coding: utf-8 -*- -->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- ********************************************************************** -->

<head>
  <!-- meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /> -->

  <title>HPCToolkit: Building and Installing</title>

  <link rel="stylesheet" type="text/css" href="style/style.css" />
</head>

<body>

<!-- ********************************************************************** -->

@header-hpctoolkit@

<!-- ********************************************************************** -->

<a name="toc"></a>
<h1>Building and Installing HPCToolkit</h1>

<h2>Contents</h2>

<ul>
  <li><a href="#prerequisites">Prerequisites</a></li>

  <li><a href="#downloading">Downloading Source Code</a></li>

  <li><a href="#building-installing">Building and Installing</a></li>

  <li><a href="#infrequent-options">Infrequently Used Build Options</a></li>
</ul>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<a name="prerequisites"></a>

<h2>Prerequisites</h2>
<p><i>[<a href="#toc">Contents</a>]</i></p>

<p>To reduce our maintenance efforts, we have opted to distribute HPCToolkit primarily in source form.
The following prerequisites apply to our default source code distribution.
</p>

<ol class="noindent">

<li><p>HPCToolkit is supported on the following platforms:</p>

  <table cellpadding="2" cellspacing="2" border="1" width="70%">
    <tr>
      <th>Supported Platforms</th>
      <th>Notes</th>
    </tr>
    <tr>
      <td>Linux + x86_64 (64-bit)</td>
      <td></td>
    </tr>
    <tr>
      <td>Linux + KNL</td>
      <td></td>
    </tr>
    <tr>
      <td>Linux + power7 (big endian)</td>
      <td></td>
    </tr>
    <tr>
      <td>Linux + power8, 9 (little endian)</td>
      <td></td>
    </tr>
    <tr>
      <td>Cray XT/XE/XK/XC (CNL + x86_64)</td>
      <td>Compute Node Linux &ge; 2.1</td>
    </tr>
    <tr>
      <td>IBM Blue Gene/Q (BG/Q kernel + ppc64)</td>
      <td>Use branch 'gcc-4.4' of externals</td>
    </tr>
    <tr>
      <td>ARM aarch64 (64-bit)</td>
      <td></td>
    </tr>
  </table>
</li>

<li>
  <p>Compiler: HPCToolkit requires GNU GCC minimum version 4.8, but
    preferably 5.x or later.  Some vendor compilers that support GNU
    extensions may also work, but this is not supported.  For old
    systems with GCC 4.4 (eg, Blue Gene/Q and Red Hat 6.x), if a newer
    compiler is not available, then use branch 'gcc-4.4' for
    hpctoolkit-externals.
  </p>
</li>

<li>
  <p>Other build tools: HPCToolkit also requires GNU make 3.81 or
    later and cmake 2.8.12 or later.
  </p>
</li>

<li>
<p>To use <span class="hpctool">hpcviewer</span>
and <span class="hpctool">hpctraceviewer</span> (HPCToolkit's
graphical interface) on MacOS, Windows, or Linux, a Java runtime
environment (JRE) &ge; 1.7 is required.  Use the Oracle or IBM
version; we have had problems with OpenJDK.
</p>

<p>
To use <span class="hpctool">hpcviewer</span> and <span class="hpctool">hpctraceviewer</span> on Linux, <a href="http://www.gtk.org">GTK+</a> is also required.
</p>

<p>Note: Since HPCToolkit's databases are portable, we often install <span class="hpctool">hpcviewer</span> and <span class="hpctool">hpctraceviewer</span> on local laptops/desktops to avoid sending display traffic over relatively slow network connections.
</p>
</li>

<li>
<p>Highly recommended: To collect measurements based on hardware performance monitoring unit (PMU) information, <a href="http://icl.cs.utk.edu/projects/papi/">PAPI</a> &ge; 4.1 is required.
Without PAPI, HPCToolkit can only collect measurements based on an operating system timer.
(Exception: On IBM Blue Gene/P, PAPI is not required. On this system, HPCToolkit uses 
IBM's native Universal Performance Counters directly.)
</p>

<p>Use a kernel
with <a href="https://perf.wiki.kernel.org">perf_events</a> (see
also: <a href="http://web.eecs.utk.edu/~vweaver1/projects/perf-events/">this</a>),
which was introduced with kernel 2.6.32 (n&eacute;e PCL in kernel
2.6.31) and which is now becoming part of standard distributions.
With perf_events, use PAPI &ge; 4.1.2.
</p>
</li>

<li>
<p>Minor requirement: To use <span class="hpctool">hpcsummary</span> (a relatively minor tool), Python 2.x is required.
</p>
</li>

<li>
<p>Minor requirement: To build HPCToolkit's man pages, a variant of Perl 5 is required.
We have successfully used versions 5.6.x - 5.10.x.
</p>
</li>

</ol>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<a name="downloading"></a>

<h2>Downloading Source Code</h2>
<p><i>[<a href="#toc">Contents</a>]</i></p>

<p>
<a href="software.html">Download</a> HPCToolkit components as follows:
</p>
<ol>
  <li><p>Download hpctoolkit from GitHub.</p>
    <div class="indent">
      <code>git clone https://github.com/HPCToolkit/hpctoolkit.git</code>
    </div>

  <li><p>Download hpctoolkit-externals from GitHub.</p>
    <div class="indent">
      <code>git clone https://github.com/HPCToolkit/hpctoolkit-externals.git</code>
    </div>
      <p>
      Think of hpctoolkit-externals as a "mini package manager" that
      configures and builds prerequisite libraries for hpctoolkit.
    </p>
  </li>

  <li><p>Download binary releases of <span class="hpctool">hpcviewer</span> and <span class="hpctool">hpctraceviewer</span> for the platform on which your are building HPCToolkit.</p>
    <div class="indent">
      <a href="http://hpctoolkit.org/download/hpcviewer">
	http://hpctoolkit.org/download/hpcviewer</a>
    </div>

  <p>Note: It is perfectly reasonable to install <span class="hpctool">hpcviewer</span> and <span class="hpctool">hpctraceviewer</span> in multiple locations.
    Since HPCToolkit's databases are portable, we often install <span class="hpctool">hpcviewer</span> and <span class="hpctool">hpctraceviewer</span> on local laptops/desktops to avoid sending display traffic over relatively slow network connections from systems where we collect measurement data.</p>
  </li>

</ol>

<!--
<p>To extract the tarball <i>zoo.tar.gz</i>, execute:</p>
<div class="indent">
  <code>tar zxvf <i>zoo.tar.gz</i></code>
</div>
-->


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<a name="building-installing"></a>

<h2>Building and Installing</h2>
<p><i>[<a href="#toc">Contents</a>]</i></p>

<p>The build and install follows autotools conventions (<code>./configure &amp;&amp; make &amp;&amp; make install</code>).
In each case, more options are available by executing <code>./configure --help</code>.
See the README file for more details.
</p>

<p>The typical build is as follows.
Please note that a list of examples below provides <code>configure</code> commands for selected platforms.
</p>

<ol class="noindent">

<li>Configuring the perf_events sample source:
<p>
HPCToolkit's configure command will automatically check the availability of the Linux perf_events interface on the build system. 
The test includes checking the existence of <code>/usr/include/linux/perf_event.h</code> and <code>/proc/sys/kernel/perf_event_paranoid</code> files. If the two files do not exist, it assumes the system does not support the perf_events interface.
</p>
To profile on a remote machine that has different system or architecture configuration, one must download and build the libpfm4 library (<a href="http://perfmon2.sourceforge.net">http://perfmon2.sourceforge.net</a>) and indicate its install directory by specifying the option <code>--with-perfmon=&lt;libpfm4_install_directory&gt;</code> to  HPCToolkit's <code>configure</code> command.
</li>
<li><p>Build and install HPCToolkit's Externals, which typically does not require any special options; we recommend using the GCC compilers:
  </p>
<div class="indent">
  <code>cd hpctoolkit-externals</code><br />
  <code>mkdir BUILD &amp;&amp; cd BUILD</code><br />
  <code>../configure [CC=&lt;<i>c-compiler</i>&gt;] 
                     [CXX=&lt;<i>c++-compiler</i>&gt;] \<br />
  &nbsp;&nbsp;&nbsp;&nbsp; [--prefix=&lt;<i>hpctoolkit-externals-install</i>&gt;</code>] <br />
  <code>make install</code><br />
  <code>make clean</code><br />
</div>

<p>Externals is <i>not</i> persistent as HPCToolkit will copy everything it needs from the installation.
  Thus, the installation path <code>&lt;hpctoolkit-externals-install&gt;</code> should be a local path and not something like <code>/usr</code>.
  If <code>--prefix</code> is not supplied it will automatically be set to <code>./&lt;Autoconf-host&gt;</code>.
</p>

<p>To specify a C and C++ compiler other than <code>gcc</code> and <code>g++</code>, use <code>CC</code> and <code>CXX</code>.
</p>


<p>Please be sure the Externals build completes before configuring HPCToolkit.
  (Note: After building Externals once, HPCToolkit can be configured and built several times using the same Externals installation.)
</p>
</li>

<li>
<p>Build and install HPCToolkit using commands similar to the following; we recommend using the GCC compilers:
</p>
<div class="indent">
  <code>cd hpctoolkit</code><br />
  <code>mkdir BUILD &amp;&amp; cd BUILD</code><br />
  <code>../configure [CC=&lt;<i>c-compiler</i>&gt;]
                     [CXX=&lt;<i>c++-compiler</i>&gt;]
                     [MPICXX=&lt;<i>mpi-c++-compiler</i>&gt;] \<br />
  &nbsp;&nbsp;&nbsp;&nbsp; --prefix=&lt;<i>hpctoolkit-install</i>&gt; \<br />
  &nbsp;&nbsp;&nbsp;&nbsp; --with-externals=&lt;<i>hpctoolkit-externals-install</i>&gt; \<br />
   &nbsp;&nbsp;&nbsp;&nbsp; [--with-papi=&lt;<i>papi-install</i>&gt;]</code><br />
  <code>make install</code><br />
</div>

<p>The above commands will build HPCToolkit and install it into <code>&lt;<i>hpctoolkit-install</i>&gt;</code>.
</p>

<p>To specify a C and C++ compiler other than <code>gcc</code> and <code>g++</code>, use <code>CC</code> and <code>CXX</code>.
  To enable MPI support, (1) ensure a working <code>mpicxx</code> or <code>mpiCC</code> is in your shell's path; or (2) use <code>MPICXX</code>.
  (Naturally, <code>CXX</code> and <code>MPICXX</code> should be compatible; typically <code>MPICXX</code> is a wrapper for <code>CXX</code>.)
  To enable PAPI-based measurements, use the <code>--with-papi</code> option; it takes as an argument the path of your PAPI installation, <code>&lt;<i>papi-install</i>&gt;</code>.
</p>

<p>Because the HPCToolkit installation is self-contained, it may be renamed or moved to another location.
  All HPCToolkit Externals source code, build files and installations may be removed; all HPCToolkit source code and build files may be removed.
</p>
</li>

<li>
<p>Install <span class="hpctool">hpcviewer</span> and <span class="hpctool">hpctraceviewer</span> .
</p>

  <ul class="noindent">
  
  <li> To install <span class="hpctool">hpcviewer</span> or <span class="hpctool">hpctraceviewer</span> as a stand-alone package, simply unpack and move the directory tree to the desired location.
  (This is the only option on Windows or MacOS.)
  </li>

  <!--
  <li> To install <span class="hpctool">hpcviewer</span> or <span class="hpctool">hpctraceviewer</span> in an HPCToolkit installation, unpack the tarball and execute the following commands:
    <div class="indent">
      <code>cd &lt;<i>hpcviewer</i>&gt; &amp;&amp; ./install &lt;<i>hpctoolkit-install</i>&gt;</code><br />
      <code>cd &lt;<i>hpctraceviewer</i>&gt; &amp;&amp; ./install &lt;<i>hpctoolkit-install</i>&gt;</code>
    </div>
    Here, <code>&lt;<i>hpcviewer</i>&gt;</code> and <code>&lt;<i>hpctraceviewer</i>&gt;</code> are the directories created by unpacking the respective tarballs; and <code>&lt;<i>hpctoolkit-install</i>&gt;</code> is the above HPCToolkit installation directory.
  </li>

  -->

  <li> To install <span class="hpctool">hpcviewer</span> or <span class="hpctool">hpctraceviewer</span> in an HPCToolkit installation, unpack the tarball and execute the following commands:
    <div class="indent">
      <code>cd &lt;<i>hpcviewer</i>&gt; &amp;&amp; ./install [ -j &lt;path-to-java&gt; ] &lt;<i>hpctoolkit-install</i>&gt;</code><br />
      <code>cd &lt;<i>hpctraceviewer</i>&gt; &amp;&amp; ./install [ -j &lt;path-to-java&gt; ] &lt;<i>hpctoolkit-install</i>&gt;</code>
    </div>
    Here, <code>&lt;<i>hpcviewer</i>&gt;</code> and <code>&lt;<i>hpctraceviewer</i>&gt;</code> are the directories created by unpacking the respective tarballs; and <code>&lt;<i>hpctoolkit-install</i>&gt;</code> is the above HPCToolkit installation directory.<br />

  The optional flag -j &lt;path-to-java&gt; allows the specification of an appropriate java to be used with
  <span class="hpctool">hpcviewer</span> or <span class="hpctool">hpctraceviewer</span>. 
  </li>

  </ul>

</li>

</ol>


<h3>Selected Examples</h3>

<p>The list below gives example HPCToolkit Externals and HPCToolkit <code>configure</code> commands (respectively) for selected platforms.</p>

<p><strong>N.B.:</strong> These commands are designed to replace the respective commands in the <a href="#building-installing">above build instructions</a>.</p>
  <ul>

    <li><p>Blue Gene/Q:</p>
        <dl class="indent">
	  <dt>
	  Load the '<code>+mpiwrapper-gcc</code>' softenv package (for the MPICXX
	  compiler) and check that the back-end <code>powerpc64-bgq-linux</code>
	  compilers are on your PATH.
	  Use the '<code>--enable-bgq</code>' option for HPCToolkit externals
	  to build for the Blue Gene/Q compute nodes.
	  </dt>
	  <dd><code>soft add +mpiwrapper-gcc <br/>
	       PATH="/bgsys/drivers/ppcfloor/gnu-linux/bin/:$PATH"
	      </code>
	  </dd>

          <p><dt>HPCToolkit's Externals.  The front end of Blue Gene/Q
	      is normally Red Hat 6.x with gcc 4.4 which won't build the
	      current externals.  If a more recent compiler is not
	      available, then use branch 'gcc-4.4' of externals.
	    </dt>
          <dd><code>../configure --prefix=`pwd`/../powerpc64-linux \<br/>
               &nbsp;&nbsp;&nbsp;&nbsp; --enable-bgq
              </code>
          </dd>

          <dt>HPCToolkit</dt>
          <dd><code>../configure \<br />
              &nbsp;&nbsp;&nbsp;&nbsp; MPICXX=/bgsys/drivers/ppcfloor/comm/gcc/bin/mpicxx \<br />
              &nbsp;&nbsp;&nbsp;&nbsp; HPCPROFMPI_LT_LDFLAGS="-all-static" \<br />
              &nbsp;&nbsp;&nbsp;&nbsp; --prefix=&lt;<i>install-path</i>&gt; \<br />
              &nbsp;&nbsp;&nbsp;&nbsp; --with-externals=&lt;<i>hpctoolkit-externals</i>&gt;/powerpc64-linux \<br />
              &nbsp;&nbsp;&nbsp;&nbsp; --with-papi=/soft/perftools/papi
              </code>
          </dd>
	  <p><dt>
	  Normally on Blue Gene, you want to build HPCToolkit to run on the compute nodes.
	  Configure will auto-detect this and default to the back-end nodes (but issue
	  a warning).  The '<code>--enable-bgq</code>' flag adds options specific
	  to the Blue Gene/Q compute nodes and suppresses the warning.
	  If you want to build <code>hpcrun</code> to run on the front-end nodes,
	  then use the option '<code>--disable-bgq</code>'.
	  </dt>
	  <p><dt>Note: The paths for <code>MPICXX</code> and PAPI may be different on your system.</dt>
        </dl>
    </li>

    <li><p>Cray XT/XE/XK/XC:</p>
	<dl class="indent">
          <dt>N.B.: Use the GNU programming environment, e.g.:</dt>
	  <dd><code>
              module swap PrgEnv-pgi PrgEnv-gnu
	      </code>
	  </dd>

          <dt>HPCToolkit's Externals</dt>
	  <dd><code>
	      ../configure --prefix=`pwd`/../x86_64-linux<br />
	      </code>
	  </dd>

          <dt>HPCToolkit</dt>
	  <dd><code>../configure \<br />
	      &nbsp;&nbsp;&nbsp;&nbsp; MPICXX="CC" \<br />
	      &nbsp;&nbsp;&nbsp;&nbsp; HPCPROFMPI_LT_LDFLAGS="-all-static" \<br />
	      &nbsp;&nbsp;&nbsp;&nbsp; --prefix=&lt;<i>hpctoolkit-install</i>&gt; \<br />
              &nbsp;&nbsp;&nbsp;&nbsp; --with-externals=&lt;<i>hpctoolkit-externals</i>&gt;/x86_64-linux \<br />
	      &nbsp;&nbsp;&nbsp;&nbsp; --with-papi=/opt/cray/papi/4.3.0.1/perf_events/no-cuda
	      </code>
          </dd>
	  <dt>&nbsp;</dt>
	  <dt>Note: On systems with AMD CPUs with the new XOP instructions,
	      add the option '<code>--enable-xop</code>'.
	      The AMD Interlagos CPUs (6200 series) use these instructions.
	      Currently, Jaguar at ORNL uses these CPUs, but Hopper at NERSC does not.
	  </dt>
	</dl>
    </li>

    <li><p>Old systems with GCC 4.4:</p>
        <dl class="indent">
	  <dt>
	    The current versions of Dyninst and hpctoolkit-externals
	    require GCC 4.8 or later (and preferably 5.x or later).
	    As a transition for old systems with GCC 4.4 (eg, Blue
	    Gene/Q and Red Hat 6.x), if a newer compiler is not
	    available, then use branch 'gcc-4.4' of externals.  This
	    contains a snapshot of the last version of externals that
	    will build with GCC 4.4.
	  </dt>
	  <dd>
	    <code>
	      git clone https://github.com/HPCToolkit/hpctoolkit-externals.git<br/>
	      cd hpctoolkit-externals<br/>
	      git checkout gcc-4.4
	    </code>
	  </dd>
	  <dt>&nbsp;</dt>
	  <dt>
	    Then, configure and build as usual.
	  </dt>
        </dl>
    </li>

    <li><p>Blue Gene/P: no longer supported.</p>
    </li>

    <li><p>Intel MIC (k1om): no longer supported.</p>
    </li>

    <li><p>Linux + i386 (32-bit): no longer supported.</p>
    </li>

    <!--
    <li><p>Intel MIC k1om (no longer supported).</p>
      <dl class="indent">
	<dt>
	Systems such as Stampede at TACC (Texas Advanced Computing Center)
	have Intel MIC (Many Integrated Cores) coprocessors on the compute nodes.
	Although the MIC cores use an extension of the Intel x86_64
	instruction set, the architecture type of the MIC binaries (k1om)
	is different from the type on the main cores (x86_64).
	Binaries compiled for the MIC will not run on the main cores
	and vice versa.
	<p>
	The solution is to build all of externals and hpctoolkit twice:
	once for the main cores and once for the MIC cores.
	Install the builds into two separate install trees (prefixes).
	Both externals and hpctoolkit support VPATH builds, so you only
	need to checkout one copy of each source tree.
	Let's say that you use <code>BUILD-x86_64</code> and <code>BUILD-k1om</code>
	for the build directories and <code>install-x86_64</code> and
	<code>install-k1om</code> for the install directories.
	</dt>
	<dt>HPCToolkit Externals for the main cores:</dt>
	<dd><code>
	    cd BUILD-x86_64 <br>
	    ../configure --prefix=/path/to/externals/install-x86_64 \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; --enable-mic
	    </code>
	</dd>
	<p><dt>HPCToolkit Externals for the MIC cores:</dt>
	<dd><code>
	    PATH="/usr/linux-k1om-4.7/bin/:$PATH" <br>
	    cd BUILD-k1om <br>
	    ../configure --prefix=/path/to/externals/install-k1om \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; --host=x86_64-k1om-linux \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; CC=x86_64-k1om-linux-gcc \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; CXX=x86_64-k1om-linux-g++
	    </code>
	</dd>
	<p><dt>HPCToolkit for the main cores:</dt>
	<dd><code>
	    cd BUILD-x86_64 <br>
	    ../configure --prefix=/path/to/hpctoolkit/install-x86_64 \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; --with-externals=/path/to/externals/install-x86_64 \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; --with-papi=/path/to/papi-install
	    </code>
	</dd>
	<p><dt>HPCToolkit for the MIC cores:</dt>
	<dd><code>
	    PATH="/usr/linux-k1om-4.7/bin/:$PATH" <br>
	    cd BUILD-k1om <br>
	    ../configure --prefix=/path/to/hpctoolkit/install-k1om \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; --with-externals=/path/to/externals/install-k1om \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; --host=x86_64-k1om-linux \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; CC=x86_64-k1om-linux-gcc \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; CXX=x86_64-k1om-linux-g++
	    </code>
	</dd>
	<p><dt>
	If PAPI is available for the MIC cores, then add
	<code>--with-papi=/path/to/papi-k1om</code> to the hpctoolkit configure
	for MIC.
	Make sure that this version of PAPI is built for the MIC cores.
	<code>hpcprof-mpi</code> is untested for the MIC cores.
	<p>
	Be sure to use the option <code>--enable-mic</code> in the
	externals's build for the main cores.
	This option selects a version of XED that runs on the main (x86_64)
	cores but understands the MIC (k1om) instructions.
	(This option is ignored for the k1om build.)
	Without this option, <code>hpcstruct</code> will crash on MIC binaries.
	Unfortunately, this version of XED is new and currently available
	only as a shared library, thus making it incompatible with
	<code>hpclink</code> and the static case (why the default is no).
	If you need to run static binaries on Stampede with
	<code>hpclink</code>, then build a second version of hpctoolkit
	for the main cores without this option.
	<p>
	You can build a restricted set of tools with the
	<code>--enable-back-end</code> option for hpctoolkit (experimental).
	This option builds only the tools, libraries and prerequisites needed for
	running <code>hpcrun</code> and <code>hpclink</code> and collecting data
	on the back-end compute nodes.
	In that case, run <code>hpcstruct</code> and <code>hpcprof</code>
	on the main cores.
	<p>
	On Stampede, you can launch a mixed-mode job (symmetric computing) with
	<code>ibrun.symm</code> and give separate command lines for the main
	and MIC cores.
	</dt>
	<dd><code>
	    ibrun.symm -c "command line for main cores" \<br>
	    &nbsp;&nbsp;&nbsp;&nbsp; -m "command line for MIC cores"
	    </code>
	</dd>
      </dl>
    </li>
    -->

  </ul>


<!-- ********************************************************************** -->
<!-- ********************************************************************** -->

<a name="infrequent-options"></a>

<h2>Infrequently Used Build Options</h2>
<p><i>[<a href="#toc">Contents</a>]</i></p>

<p>The following options may be useful in exceptional circumstances.</p>

<ul>
<li><p>To enable/disable HPCToolkit features, the following options may be used.</p>

  <table cellpadding="2" cellspacing="2" border="1" width="100%">
    <tr>
      <th>Option</th>
      <th>Meaning</th>
    </tr>
    <tr>
      <td><code>--enable-mpi</code></td>
      <td>enable/disable build of hpcprof-mpi [default: yes]</td>
    </tr>
    <tr>
      <td colspan="2"><hr /></td>
    </tr>

    <tr>
      <td><code>--with-upc=PATH</code></td>
      <td>path to IBM BlueGene/P UPC installation</td>
    </tr>
    <tr>
      <td><code>--with-upc-lib=LIBRARY</code></td>
      <td>path to IBM BlueGene/P UPC library(s), absolute or relative to WITH_UPC/runtime/SPI</td>
    </tr>
    <tr>
      <td colspan="2"><hr /></td>
    </tr>

    <tr>
      <td><code>--enable-develop</code></td>
      <td>enable/disable build for development (sane debugging) [default: no]</td>
    </tr>
  </table>
</li>

<li><p>To request that HPCToolkit Externals use an alternate user-supplied installation for a given package, the following options may be used.</p>

  <table cellpadding="2" cellspacing="2" border="1" width="100%">
    <tr>
      <th>Option</th>
      <th>Meaning</th>
    </tr>
    <tr>
      <td><code>--with-binutils=PATH</code></td>
      <td>path to binutils install directory</td>
    </tr>
    <tr>
      <td><code>--with-libdwarf=PATH</code></td>
      <td>path to libdwarf install directory</td>
    </tr>
    <tr>
      <td><code>--with-libelf=PATH</code></td>
      <td>path to libelf install directory</td>
    </tr>
    <tr>
      <td><code>--with-libmonitor=PATH</code></td>
      <td>path to libmonitor install directory</td>
    </tr>
    <tr>
      <td><code>--with-libunwind=PATH</code></td>
      <td>path to libunwind install directory</td>
    </tr>
    <tr>
      <td><code>--with-libxml2=PATH</code></td>
      <td>path to libxml2 install directory</td>
    </tr>
    <tr>
      <td><code>--with-old-monitor=PATH</code></td>
      <td>path to old monitor install directory</td>
    </tr>
    <tr>
      <td><code>--with-open-analysis=PATH</code></td>
      <td>path to open analysis install directory</td>
    </tr>
    <tr>
      <td><code>--with-symtabAPI=PATH</code></td>
      <td>path to symtabAPI install directory</td>
    </tr>
    <tr>
      <td><code>--with-xed2=PATH</code></td>
      <td>path to xed2 install directory</td>
    </tr>
    <tr>
      <td><code>--with-xerces=PATH</code></td>
      <td>path to xerces/c install directory</td>
    </tr>
  </table>


<p>In all cases, the default is for HPCToolkit externals build the package itself, depending on platform.
</p>
</li>

<li><p>To explicitly request that a package <code>x</code> <i>not</i> be built, use <code>--without-x</code>.</p>
</li>

<!-- <li><p>These same options, with the same names, may be used with either externals's or HPCToolkit's configure, except that old-monitor in externals is just called monitor in HPCToolkit.-->

</ul>

<p>[<span class="lastupdated">Page last updated: 2018/10/22</span>]
</p>

<!-- ********************************************************************** -->

@footer-hpctoolkit@

<!-- ********************************************************************** -->

</body>
</html>


<!-- Local Variables: -->
<!-- eval: (add-hook 'write-file-hooks 'time-stamp) -->
<!-- time-stamp-start: "<span class=\"lastupdated\">Page last updated: " -->
<!-- time-stamp-format: "%:y/%02m/%02d" -->
<!-- time-stamp-end: "</span>" -->
<!-- time-stamp-line-limit: 10000 -->
<!-- End: -->
