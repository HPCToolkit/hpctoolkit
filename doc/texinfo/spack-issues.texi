\input texinfo  @c -*-texinfo-*-

@setfilename issues.texi
@settitle Current Spack Issues for HPCToolkit

@ifinfo
Current Spack Issues for HPCToolkit@*
===================================
@end ifinfo

@contents

@ifinfo
@w{ }
@end ifinfo

@section Introduction

Spack is a moving target and receives multiple commits per day.
Normally, HPCToolkit will build and run successfully with the latest
version of all of its prerequisite packages, but sometimes not.  This
page covers the current known issues where HPCToolkit fails to build
with the latest version of spack.  The main build directions are at:

@ifhtml
@uref{software-instructions.html}
@end ifhtml
@ifinfo
README.Install
@end ifinfo

@noindent
Report problems to @code{hpctoolkit-forum at rice dot edu}.  But before
reporting a problem, first try the versions recommended in the
@code{packages.yaml} file in the @code{spack} subdirectory of the
hpctoolkit repository.  And always check the latest version of this file
on the hpctoolkit web site.

@example
@uref{http://hpctoolkit.org/spack-issues.html}
@end example

@noindent
Last revised: Feb 28, 2020.

@c ------------------------------------------------------------

@section Current Issues

@subsection (2019-09-25) New micro-architecture targets

Spack recently changed how it treats a system's architecture and target
to allow a hierarchy of fine-grained micro-architectures.  The 'target'
is now a specific micro-architecture (eg, haswell, ivybridge) instead of
a generic family (x86_64).  You will see this change in two main places:
in 'spack spec' and the path for the install directory.  For example,
@code{linux-rhel7-x86_64} might become @code{linux-rhel7-broadwell}.
You can use @code{spack arch} to see the list of generic families and
micro-architecture targets.

@example
spack arch --known-targets
@end example

@noindent
@b{Workaround:} Instead of building for the micro-arch target, you can
use the @code{target} option to build for a generic architecture
family (x86_64, ppc64, ppc64le, aarch64).  This is also useful for
creating a shared install that needs to work across multiple machines
with different micro-arch types.  For example:

@example
spack install hpctoolkit ... target=x86_64
@end example

@noindent
If you want to use this target for all spack builds, then you can
specify this in @code{packages.yaml}.  For example:

@example
packages:
  all:
    target: ['x86_64']
@end example

@c ------------------------------------------------------------

@subsection (2019-08-28) Cray front-end compilers

@code{Spack compiler find} is currently broken for detecting the
front-end compilers on Cray that HPCToolkit uses.  Normally, you would
load a module for gcc and run @code{spack compiler find} and spack would
add that compiler to @code{compilers.yaml}, but this currently does not
work.

@b{Workaround:} If you have a working @code{compiler:} entry for a
front-end GNU compiler on Cray, then that will continue to work.  If
not, then you will have to add one manually.  For example, this is an
entry for the @code{gcc/7.3.0} module on theta at ANL.  Note that the
front-end operating_system is something like @code{sles12} (not
@code{cnl6}), and the front-end target is @code{x86_64} (not
@code{mic_knl}).

@example
- compiler:
    environment: @{@}
    extra_rpaths: []
    flags: @{@}
    modules:
    - PrgEnv-gnu/6.0.4
    - gcc/7.3.0
    - cray-mpich/7.7.3
    operating_system: sles12
    paths:
      cc:  /opt/gcc/7.3.0/bin/gcc
      cxx: /opt/gcc/7.3.0/bin/g++
      f77: /opt/gcc/7.3.0/bin/gfortran
      fc:  /opt/gcc/7.3.0/bin/gfortran
    spec: gcc@@7.3.0
    target: x86_64
@end example

@noindent
@b{Workaround:} Alternatively, the last working commit was
@code{9c1c50fb7632} on 2019-06-07.  You could revert to this commit, run
@code{spack compiler find} and then return to the current spack head
(develop).  Be sure to fill in the @code{modules:} field.

@c ------------------------------------------------------------

@section Recently Resolved Issues

@subsection (2019-11-19) External perl breaks libunwind

A recent commit (@code{99dfff447509} on 2019-11-04, but merged on
11-18) modified the treatment of PATH for packages that depend on
perl.  If you use @code{packages.yaml} to specify an external perl
from a system directory such as @code{/usr/bin}, then this puts
@code{/usr/bin} at the front of PATH during the build.  Unfortunately,
this covers up all of the other build dependencies and can break the
build.

For example, on systems with an older libtool, this breaks libunwind
as follows.

@example
294   libtool: Version mismatch error.  This is libtool 2.4.2, but the
295   libtool: definition of this LT_INIT comes from libtool 2.4.6.
296   libtool: You should recreate aclocal.m4 with macros from libtool 2.4.2
297   libtool: and run autoconf again.
@end example

@noindent
@b{Fixed:} This is now fixed in commit
@uref{https://github.com/spack/spack/pull/13903, cacfc3a6e1c7} on
2019-11-29.  Or, you can workaround the problem by not using an external
perl and instead having spack build perl itself.

@c ------------------------------------------------------------

@subsection (2019-10-08) Python 3.x breaks PAPI

Python 2.x is nearing end-of-life and Spack recently changed their
launch script to look for and use python 3.x if available.  There are
incompatibilities and some spack packages (including PAPI) currently
break with python 3.x.  (The papi recipe hangs while patching files with
@code{filter_file}.)  There are two workarounds, depending on whether
python 2.x is available on your system.

@noindent
@b{Fixed:} The filter file problem is now fixed in commit
@uref{https://github.com/spack/spack/pull/12765, 5cd28847e81b} on
2019-10-15.

@b{Workaround:} If python 2.x is available on your system, then one
solution is to remove the test for @code{python3} in the
@code{bin/spack} launch script.

@example
# This file is bilingual. The following shell code finds our preferred python.
# Following line is a shell no-op, and starts a multi-line Python comment.
# See https://stackoverflow.com/a/47886254
""":"
# prefer python3, then python, then python2
for cmd in python3 python python2; do
   command -v > /dev/null $cmd && exec $cmd $0 "$@@"
done
@end example

@c ------------------------------------------------------------

@subsection (2019-08-28) External cuda modules

Sometimes spack misreads the @code{module:} entry for an external
package in @code{packages.yaml} and selects the wrong install
directory.  For example, spack misreads the @code{cuda/10.1.168}
module on cori at NERSC (incorrectly using /usr) and the build for
hpctoolkit fails as follows.

@example
==> cuda@@10.1.168 : has external module in cuda/10.1.168
==> cuda@@10.1.168 : is actually installed in /usr

.../configure --prefix='...' ... '--with-cuda=/usr'
>> 208    configure: error: '/usr/include/cuda.h' not found
@end example

@noindent
@b{Fixed:} This is now fixed in commit
@uref{https://github.com/spack/spack/pull/12693, b1868f35ec91} on
2019-09-11.  Or, you can workaround the problem by replacing
@code{modules:} with a @code{paths:} entry.

@example
cuda:
  paths:
    cuda@@10.1.168:  /usr/common/software/cuda/10.1.168
@end example

@c ------------------------------------------------------------

@subsection (2019-08-19) Build stage not writable

Spack has reorganized the build directories and the value for
@code{build_stage} in @code{config.yaml} may not work.

@example
build_stage:
  - $tempdir/spack-stage
@end example

@noindent
The problem with this value is that the first user to run spack on this
machine will create the directory, owned by that user and thus not
writable by any other user.  For every other user, @code{spack install}
will fail with:

@example
==> Error: No accessible stage paths in:
@end example

@noindent
@b{Fixed:} This is now fixed in commit
@uref{https://github.com/spack/spack/pull/12516, c141e99e062b} on
2019-09-03.  Check your @code{build_stage} directory and make sure
that you have write access.  One solution is to add @code{$user} to
the path.

@example
build_stage:
  - $tempdir/$user/spack-stage
@end example

@c ------------------------------------------------------------

@section General Problems

These are general problems that arise from time to time.

@subsection Unable to fetch

Sometimes spack fails to download the source file(s) for some package
and dies with a message similar to this.

@example
==> Fetching from https://ftpmirror.gnu.org/m4/m4-1.4.18.tar.gz failed.
==> Error: FetchError: All fetchers failed for m4-1.4.18-vorbvkcjfac43b7vuswsvnm6xe7w7or5
@end example

@noindent
This problem is usually temporary and the solution is to either wait a
few minutes or an hour and try again, or else download the file manually
and put it into a spack mirror.

@subsection New version breaks the build

Sometimes the latest version of some package breaks the build.  This has
happened a couple of times where a new version of Boost has broken the
build for Dyninst.  The solution is to revert the package to an earlier
version until the rest of the code catches up.

@subsection Spack core breaks the build

Sometimes but rarely, something in the spack core will change or break
the code in some @code{package.py} file.  The solution is to look
through the spack git log and revert the repository to a recent commit
before the breakage.

@c ------------------------------------------------------------

@section Long Term Issues

@subsection Boost 1.68.0

Avoid boost version 1.68.0, it breaks the build for hpctoolkit.  Version
1.70.0 works with the latest version of dyninst (10.1.0), or else 1.66.0
is good and works with all versions of dyninst.

@subsection Elfutils 0.176

Elfutils 0.176 requires glibc 2.16 or later (for @code{aligned_alloc})
and won't work with an older glibc, including RedHat or CentOS 6.x and
Blue Gene.  On systems with an old glibc, use version 0.175.

@bye
