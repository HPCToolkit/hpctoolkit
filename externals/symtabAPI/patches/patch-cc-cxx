Pass CC, CXX and flags to symtab's make.config.local.in via autoconf
substitution.  This avoids the need to sed-edit make.config.
Force symtab to use our top-level choice for CC, CXX instead of it
choosing its own version of gcc, g++.

diff -Naurb symtabAPI.orig/src/dyninst/autodyninst/make.config.local.in symtabAPI/src/dyninst/autodyninst/make.config.local.in
--- symtabAPI.orig/src/dyninst/autodyninst/make.config.local.in	2011-04-07 14:51:45.000000000 -0500
+++ symtabAPI/src/dyninst/autodyninst/make.config.local.in	2011-04-12 00:22:13.000000000 -0500
@@ -3,6 +3,11 @@
 BUILD_MARK=
 BUILD_NUM=-576
 
+HPC_CC = @CC@
+HPC_CXX = @CXX@
+HPC_CFLAGS = @CFLAGS@
+HPC_CXXFLAGS = @CXXFLAGS@
+
 #Are any alternatives to g++ available?
 
 M_intel_cc = @_ICC_@
diff -Naurb symtabAPI.orig/src/dyninst/configure symtabAPI/src/dyninst/configure
--- symtabAPI.orig/src/dyninst/configure	2011-04-07 14:51:50.000000000 -0500
+++ symtabAPI/src/dyninst/configure	2011-04-12 00:50:01.000000000 -0500
@@ -311,7 +311,7 @@
 # include <unistd.h>
 #endif"
 
-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS CXX CXXFLAGS LDFLAGS CPPFLAGS ac_ct_CXX EXEEXT OBJEXT _ICC_ _ICPC_ _PGC_ _PGCXX_ _CC_ _CXX_ USE_TCL83 TCLTK_INC_DIR TCLTK_LIB_DIR build build_cpu build_vendor build_os host host_cpu host_vendor host_os ARG_WRAPPER_LIBS CXXCPP EGREP LIBELF_INC_DIR LIBELF_LIB_DIR LIBELF_STATIC LIBELF_DYNAMIC BUILD_XLC GNU_DEMANGLER USE_LIBERTY LINK_LIBERTY LIBIBERTY_LIB_DIR LIBDWARF_INC_DIR LIBDWARF_LIB_DIR LIBDWARF_STATIC LIBDWARF_DYNAMIC LIBDWARF_HAS_SET_FRAME LIBXML2_INC_DIR LIBXML2_LIB_DIR LIBUNWIND_INC_DIR LIBUNWIND_LIB_DIR LIBFLEX_LIB_DIR NASM STACKPROT BUILD32 MMTIMER TESTSUITE LIBOBJS LTLIBOBJS'
+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS CC CFLAGS CXX CXXFLAGS LDFLAGS CPPFLAGS ac_ct_CXX EXEEXT OBJEXT _ICC_ _ICPC_ _PGC_ _PGCXX_ _CC_ _CXX_ USE_TCL83 TCLTK_INC_DIR TCLTK_LIB_DIR build build_cpu build_vendor build_os host host_cpu host_vendor host_os ARG_WRAPPER_LIBS CXXCPP EGREP LIBELF_INC_DIR LIBELF_LIB_DIR LIBELF_STATIC LIBELF_DYNAMIC BUILD_XLC GNU_DEMANGLER USE_LIBERTY LINK_LIBERTY LIBIBERTY_LIB_DIR LIBDWARF_INC_DIR LIBDWARF_LIB_DIR LIBDWARF_STATIC LIBDWARF_DYNAMIC LIBDWARF_HAS_SET_FRAME LIBXML2_INC_DIR LIBXML2_LIB_DIR LIBUNWIND_INC_DIR LIBUNWIND_LIB_DIR LIBFLEX_LIB_DIR NASM STACKPROT BUILD32 MMTIMER TESTSUITE LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -752,6 +752,14 @@
 ac_env_target_alias_value=$target_alias
 ac_cv_env_target_alias_set=${target_alias+set}
 ac_cv_env_target_alias_value=$target_alias
+ac_env_CC_set=${CC+set}
+ac_env_CC_value=$CC
+ac_cv_env_CC_set=${CC+set}
+ac_cv_env_CC_value=$CC
+ac_env_CFLAGS_set=${CFLAGS+set}
+ac_env_CFLAGS_value=$CFLAGS
+ac_cv_env_CFLAGS_set=${CFLAGS+set}
+ac_cv_env_CFLAGS_value=$CFLAGS
 ac_env_CXX_set=${CXX+set}
 ac_env_CXX_value=$CXX
 ac_cv_env_CXX_set=${CXX+set}
@@ -873,6 +881,8 @@
   --with-libflex-libdir   Absolute path to flex library
 
 Some influential environment variables:
+  CC          C compiler
+  CFLAGS      C flags
   CXX         C++ compiler command
   CXXFLAGS    C++ compiler flags
   LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
@@ -1370,6 +1380,9 @@
 fi
 
 
+
+
+
 ac_ext=cc
 ac_cpp='$CXXCPP $CPPFLAGS'
 ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'
@@ -6160,6 +6173,8 @@
 s,@ECHO_N@,$ECHO_N,;t t
 s,@ECHO_T@,$ECHO_T,;t t
 s,@LIBS@,$LIBS,;t t
+s,@CC@,$CC,;t t
+s,@CFLAGS@,$CFLAGS,;t t
 s,@CXX@,$CXX,;t t
 s,@CXXFLAGS@,$CXXFLAGS,;t t
 s,@LDFLAGS@,$LDFLAGS,;t t
diff -Naurb symtabAPI.orig/src/dyninst/configure.in symtabAPI/src/dyninst/configure.in
--- symtabAPI.orig/src/dyninst/configure.in	2011-04-07 14:51:50.000000000 -0500
+++ symtabAPI/src/dyninst/configure.in	2011-04-12 00:49:02.000000000 -0500
@@ -9,6 +9,9 @@
 AC_CONFIG_AUX_DIR([autodyninst])
 AC_CONFIG_MACRO_DIR([autodyninst])
 
+AC_ARG_VAR(CC, [C compiler])
+AC_ARG_VAR(CFLAGS, [C flags])
+
 AC_PROG_CXX(g++)
 AC_PATH_PROG(_ICC_, icc)
 AC_PATH_PROG(_ICPC_, icpc)
diff -Naurb symtabAPI.orig/src/dyninst/make.config symtabAPI/src/dyninst/make.config
--- symtabAPI.orig/src/dyninst/make.config	2011-04-07 14:52:20.000000000 -0500
+++ symtabAPI/src/dyninst/make.config	2011-04-12 00:46:16.000000000 -0500
@@ -91,25 +91,27 @@
 # But if the file doesn't exist there (i.e. if the user hasn't checked them out
 # with cvs), then we should look in a backup location.  That's what this vrble
 # is about.  It's used several times below in this file.
-ifeq ($(PLATFORM),ppc32_bgl_compute)
+
+ifeq (x,y)
 GCC         = mpgcc
 GXX         = mpg++
 CC          = mpgcc
 CXX         = mpg++
 endif
-ifeq ($(PLATFORM),ppc32_bgp_compute)
+ifeq (x,y)
 GCC         = powerpc-bgp-linux-gcc
 GXX         = powerpc-bgp-linux-g++
 CC          = powerpc-bgp-linux-gcc
 CXX         = powerpc-bgp-linux-g++
 endif
 
-GCC      ?= gcc
-GXX      ?= g++
+CC	= $(HPC_CC)
+GCC	= $(HPC_CC)
+CXX	= $(HPC_CXX)
+GXX	= $(HPC_CXX)
+
 LINKER   = ld
 AS      	= as
-CC       ?= $(GCC)
-CXX      ?= $(GXX)
 LEX      = flex
 RANLIB   = ranlib
 AR       = ar
@@ -534,8 +536,8 @@
 endif
 
 # flags for normal (non-kludge) files, with common warnings
-CFLAGS		= $(IFLAGS) $(UNIFIED_DEF) $(OPT_FLAG) $(COMMON_WARNINGS) $(ARCH_FLAGS)
-CXXFLAGS	= $(IFLAGS) $(UNIFIED_DEF) $(OPT_FLAG) $(COMMON_WARNINGS) $(STDINT_MACROS) $(ARCH_FLAGS)
+CFLAGS		= $(HPC_CFLAGS) $(IFLAGS) $(UNIFIED_DEF) $(OPT_FLAG) $(COMMON_WARNINGS) $(ARCH_FLAGS)
+CXXFLAGS	= $(HPC_CXXFLAGS) $(IFLAGS) $(UNIFIED_DEF) $(OPT_FLAG) $(COMMON_WARNINGS) $(STDINT_MACROS) $(ARCH_FLAGS)
 LDFLAGS		= $(ARCH_FLAGS)
 
 # flags for kludge files, won't have warnings generated
