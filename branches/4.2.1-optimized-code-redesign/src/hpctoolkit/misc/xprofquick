#! /usr/bin/env perl
# -*-Mode: perl;-*-

# make sure we execute perl
#eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
#& eval 'exec perl -S $0 $argv:q'
#if 0;

## $Id$
## * BeginRiceCopyright *****************************************************
## 
## Copyright ((c)) 2002, Rice University 
## All rights reserved.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are
## met:
## 
## * Redistributions of source code must retain the above copyright
##   notice, this list of conditions and the following disclaimer.
## 
## * Redistributions in binary form must reproduce the above copyright
##   notice, this list of conditions and the following disclaimer in the
##   documentation and/or other materials provided with the distribution.
## 
## * Neither the name of Rice University (RICE) nor the names of its
##   contributors may be used to endorse or promote products derived from
##   this software without specific prior written permission.
## 
## This software is provided by RICE and contributors "as is" and any
## express or implied warranties, including, but not limited to, the
## implied warranties of merchantability and fitness for a particular
## purpose are disclaimed. In no event shall RICE or contributors be
## liable for any direct, indirect, incidental, special, exemplary, or
## consequential damages (including, but not limited to, procurement of
## substitute goods or services; loss of use, data, or profits; or
## business interruption) however caused and on any theory of liability,
## whether in contract, strict liability, or tort (including negligence
## or otherwise) arising in any way out of the use of this software, even
## if advised of the possibility of such damage. 
## 
## ******************************************************* EndRiceCopyright *

#############################################################################
##
## $Source$ 
##
##   Nathan Tallent.
##
#############################################################################

use strict;
use warnings;

use File::Spec;
use IO::File;
use FindBin qw($Script $RealBin);

use lib "$RealBin/../lib/hpctoolkit";
use HPCToolkitVersionInfo;

STDOUT->autoflush(1); 

#############################################################################

my $the_program = $Script;
my $the_usage = 
"usage: ${the_program} <dcpi_binary_data_1>...<dcpi_binary_data_n>

Given a list of binary DCPI data files, creates one PROFILE file.  The
first file will be considered to result from the main profiled
program; all successive files will be considered to result from
associated load modules.

\n";

#############################################################################
## 
#############################################################################

my $dcpicatExt = ".dcpicat";
my $pxmlExt = ".pxml";

my $xprofquickOut = "xprofquick$pxmlExt";
my $xprofquickLog = "xprofquick.log";


#############################################################################
## main/driver
#############################################################################

# ----------------------------------------------------------
# Parse the command line
# ----------------------------------------------------------

## Make sure called with minimum number of arguments
my $numArgs = scalar(@ARGV);
if ($numArgs < 1) { die $the_usage; }

my $dcpibinFiles = [ ];

my $fileidx = 0;

for ( ; $fileidx < $numArgs; $fileidx++) {
    my $file = $ARGV[$fileidx]; 
    if (! (-r $file)) {
	print STDERR "*** Cannot read file '$file' ***\n"; 
	printUsageAndExit($0);
    } 
    
    push @$dcpibinFiles, $file;
}

# ----------------------------------------------------------
# Convert into one PROFILE file
# ----------------------------------------------------------

print STDOUT "Creating dcpicat file for each binary profile file...\n";
my ($dcpicatFiles) = createDcpicatFiles($dcpibinFiles);

print STDOUT "Creating PROFILE for each dcpicat file...\n";
my ($pxmlFiles) = createPROFILEFiles($dcpicatFiles);

print STDOUT "Combining all PROFILE files...\n";
createOnePROFILEFile($pxmlFiles);

print STDOUT "\nResulting PROFILE: '$xprofquickOut'.\n";

exit(0);

#############################################################################
## Subroutines
#############################################################################

# printUsageAndExit
sub printUsageAndExit 
{
    my ($command) = @_; # not used now
    print STDOUT $the_usage;
    exit(-1);
}

# printVersionAndExit
sub printVersionAndExit 
{
    my ($command) = @_; # not used now
    print STDERR "${the_program}: ", $HPCToolkitVersionInfo::info, "\n";
    exit(-1);
}


#############################################################################
## Conversion
#############################################################################

# createDcpicatFiles: Given a list of dcpi binary files, create dcpicat files.
# returns: a list of dcpicat files
# effect: 
# assumes:
sub createDcpicatFiles
{
    my($dcpibinFiles) = @_;
    
    my $dcpicatFiles = [ ];

    for my $dcpifile (@$dcpibinFiles) {
	my ($vol,$dir,$file) = File::Spec->splitpath( $dcpifile);
	
	my $newfile = "$file$dcpicatExt";
	my $cmd = "dcpicat $dcpifile > $newfile";
	system($cmd) == 0 
	    or die "*** system '$cmd' failed: $? ***";

	push @$dcpicatFiles, $newfile;
    }
    
    return $dcpicatFiles;
}

# createPROFILEFiles: Given a list of dcpicat files, create PROFILE files.
# returns: a list of PROFILE files
# effect: 
# assumes:
sub createPROFILEFiles
{
    my($dcpicatFiles) = @_;

    my $pxmlFiles = [ ];

    for my $file (@$dcpicatFiles) {
	my $newfile = $file;
	$newfile =~ s/$dcpicatExt/$pxmlExt/;

	my $cmd = "xprof $file > $newfile";
	system($cmd) == 0 
	    or die "*** system '$cmd' failed: $? ***";

	push @$pxmlFiles, $newfile;
    }
    
    return $pxmlFiles;
}

# createOnePROFILEFile: Given a list of PROFILE files, create one...
# returns: a list of PROFILE files
# effect: 
# assumes:
sub createOnePROFILEFile
{
    my($pxmlFiles) = @_;

    my $fileStr = "";
    map { $fileStr .= "$_ " } @$pxmlFiles;

    my $cmd = "pxmlcat $fileStr > $xprofquickOut";
    system($cmd) == 0 
	or die "*** system '$cmd' failed: $? ***";
    
    return 0;
}
