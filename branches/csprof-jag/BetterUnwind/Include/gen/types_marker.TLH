/*BEGIN_LEGAL 
Intel Open Source License 

Copyright (c) 2002-2005 Intel Corporation 
All rights reserved. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.  Redistributions
in binary form must reproduce the above copyright notice, this list of
conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.  Neither the name of
the Intel Corporation nor the names of its contributors may be used to
endorse or promote products derived from this software without
specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
END_LEGAL */
/*
**
** @ORIGINAL_AUTHOR: Robert Muth
*/

/*! @file
  this headerfile contains defines stuff
 */

/*
** This file is also included by c files, so do not introduce any C++ stuff in here.
** For example, do not use C++ style comments
*/

#ifndef TYPES_MARKER_H
#define TYPES_MARKER_H

/* 
 PIN_MS_COMPATIBLE, PIN_GNU_COMPATIBLE
 These defines serve as guards for compiler-specific stuff. The intel compiler
 acts like a microsoft compiler on windows and like a gnu compiler on linux.
*/
#if ( defined(__INTEL_COMPILER) && defined(TARGET_WINDOWS) ) || defined(_MSC_VER)
# define PIN_MS_COMPATIBLE
#elif ( defined(__INTEL_COMPILER) && !defined(TARGET_WINDOWS) ) || defined(__GNUC__)
# define PIN_GNU_COMPATIBLE
#else
# error "Could not find suitable compiler (MS or GNU)"
#endif

/* 
 SECTION
 Definition of the section attribute. 
 The macro is deprecated since it can not be appropriately defined for all supported 
 compilers and platforms. Use macros  DATA_SECTION, DATA_CONST_SECTION and CODE_SECTION 
 istead.
*/
#if defined(PIN_GNU_COMPATIBLE)

#if defined(TARGET_MAC)
#define SECTION(name)
#else
#define SECTION(name) __attribute__ ((section (name)))
#endif

#elif defined(PIN_MS_COMPATIBLE)

#pragma deprecated("SECTION")
#define SECTION(name) __pragma(message("The SECTION macro is ignored. Use DATA_SECTION and CODE_SECTION instead."))

#endif

/* 
 CODE_SECTION(name), DATA_SECTION(name), DATA_CONST_SECTION(name) 
 Names a section in which the following function/data/constant data item will be allocated.
 The macro should appear immediately before the item's type qulifier. 

 SECTION_END
 Designates the end of the most recent data or code section.
 The macro should appear immediately after the data or function definition.

 Only one data or function definition is allowed inside the section. Nested sections are
 disalowed. 

 Usage: 
 DATA_SECTION("mydata") 
 LOCALVAR int myInt = 0; 
 SECTION_END

 CODE_SECTION("mycode") 
 GLOBALFUN void MyFunc ()
 {
    ......
 }
 SECTION_END

 NOTE: Currently, the <extern "C"> type qualifiers, like GLOBALCFUN are not supported
 inside sections. One can fix the issue by allowing section macro to appear after
 the type qualifier, like GLOBALCFUN CODE_SECTION("mycode") void MyFunc () {...} SECTION_END. 
 This, however, will require a change in the script generating headers, so the section macro
 will be excluded from the item declaration in the generated header.
*/
#if defined(PIN_GNU_COMPATIBLE)

#if defined(TARGET_MAC)
#define CODE_SECTION(name)          __attribute__ ((section ("__TEXT, " name))) 
#define DATA_SECTION(name)          __attribute__ ((section ("__DATA, " name))) 
#define DATA_CONST_SECTION(name)    __attribute__ ((section ("__TEXT, " name))) 
#else
#define CODE_SECTION(name)          __attribute__ ((section (name))) 
#define DATA_SECTION(name)          __attribute__ ((section (name))) 
#define DATA_CONST_SECTION(name)    __attribute__ ((section (name))) 
#endif
#define SECTION_END 

#elif defined(PIN_MS_COMPATIBLE)

#define PUSH_SECTIONS__ __pragma(code_seg(push)) __pragma(data_seg(push)) __pragma(const_seg(push))
#define POP_SECTIONS__  __pragma(code_seg(pop))  __pragma(data_seg(pop))  __pragma(const_seg(pop))

#define CODE_SECTION(name)          PUSH_SECTIONS__  __pragma(code_seg(name))
#define DATA_SECTION(name)          PUSH_SECTIONS__  __pragma(data_seg(name))
#define DATA_CONST_SECTION(name)    PUSH_SECTIONS__  __pragma(const_seg(name))
#define SECTION_END                 POP_SECTIONS__

#endif

/* 
 UNUSED     - designates possibly unused variable
 NORETURN   - designates function that never returns
 REGPARM    - on x86, designates function whose first arguments are passed in registers
              instead of on the stack. 
              The registers used to pass arguments are compiler-dependent:
              GCC: EAX, EDX, and ECX
              MS:  ECX and EDX
*/
#if defined(PIN_GNU_COMPATIBLE)

#define UNUSED __attribute__ ((__unused__))
#define NORETURN __attribute__ ((noreturn))
#define REGPARM __attribute__ ((regparm (3)))

#elif defined(PIN_MS_COMPATIBLE)

#define UNUSED
#define NORETURN __declspec(noreturn)
#define REGPARM __fastcall     

#endif

/* 
 Type qualifiers. 
 Serve as keywords in generating headers and code conventions checks.
*/
#define GLOBALFUN extern
#define LOCALFUN static

#ifdef  __cplusplus
#define GLOBALCFUN extern "C"
/* SPECIALCFUN is not auto-exported */
#define SPECIALCFUN extern "C"
#else
#define GLOBALCFUN extern
#define SPECIALCFUN extern
#endif

#if defined(TARGET_WINDOWS)
#define GLOBALDLLFUN GLOBALFUN __declspec( dllexport )
#define GLOBALDLLCFUN GLOBALCFUN __declspec( dllexport )
#else
#define GLOBALDLLFUN GLOBALFUN
#define GLOBALDLLCFUN GLOBALCFUN
#endif

#ifdef  __cplusplus
#define LOCALCFUN extern "C"
#else
#define LOCALCFUN extern
#endif

#ifdef  __cplusplus
#define GLOBALCVAR extern "C"
#else
#define GLOBALCVAR extern
#endif

#define GLOBALINLINE inline
#define LOCALINLINE static inline

#define MEMBERFUN

#define MEMBERVAR
#define GLOBALVAR 
#define LOCALVAR static

#define LOCALTYPE 
#define GLOBALTYPE

#define GLOBALCONST const
#define LOCALCONST static const

#define STATIC static

#define LOCALOPERATOR static 

#define GLOBALTEMPLATEFUN

#endif
