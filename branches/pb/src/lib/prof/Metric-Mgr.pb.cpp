// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Metric-Mgr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Head {

namespace {

const ::google::protobuf::Descriptor* SectionHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_Info_NameValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_Info_NameValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_MetricTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_MetricTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_MetricTable_Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_MetricTable_Metric_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_MetricTable_Metric_MetricFormula_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_MetricTable_Metric_MetricFormula_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_MetricDBTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_MetricDBTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_MetricDBTable_MetricDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_MetricDBTable_MetricDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_TraceDBTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_TraceDBTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_TraceDBTable_TraceDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_TraceDBTable_TraceDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_LoadModuleTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_LoadModuleTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_LoadModuleTable_LoadModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_LoadModuleTable_LoadModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_FileTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_FileTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_FileTable_File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_FileTable_File_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_ProcedureTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_ProcedureTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectionHeader_ProcedureTable_Procedure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectionHeader_ProcedureTable_Procedure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Metric_2dMgr_2eproto() {
  protobuf_AddDesc_Metric_2dMgr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Metric-Mgr.proto");
  GOOGLE_CHECK(file != NULL);
  SectionHeader_descriptor_ = file->message_type(0);
  static const int SectionHeader_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, m_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, m_db_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, t_db_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, lm_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, f_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, p_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, name_),
  };
  SectionHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_descriptor_,
      SectionHeader::default_instance_,
      SectionHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader));
  SectionHeader_Info_descriptor_ = SectionHeader_descriptor_->nested_type(0);
  static const int SectionHeader_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info, nv_list_),
  };
  SectionHeader_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_Info_descriptor_,
      SectionHeader_Info::default_instance_,
      SectionHeader_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_Info));
  SectionHeader_Info_NameValue_descriptor_ = SectionHeader_Info_descriptor_->nested_type(0);
  static const int SectionHeader_Info_NameValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info_NameValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info_NameValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info_NameValue, type_),
  };
  SectionHeader_Info_NameValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_Info_NameValue_descriptor_,
      SectionHeader_Info_NameValue::default_instance_,
      SectionHeader_Info_NameValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info_NameValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_Info_NameValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_Info_NameValue));
  SectionHeader_MetricTable_descriptor_ = SectionHeader_descriptor_->nested_type(1);
  static const int SectionHeader_MetricTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable, m_list_),
  };
  SectionHeader_MetricTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_MetricTable_descriptor_,
      SectionHeader_MetricTable::default_instance_,
      SectionHeader_MetricTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_MetricTable));
  SectionHeader_MetricTable_Metric_descriptor_ = SectionHeader_MetricTable_descriptor_->nested_type(0);
  static const int SectionHeader_MetricTable_Metric_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, show_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, metric_formula_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, partner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, fmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, basename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, prefix_),
  };
  SectionHeader_MetricTable_Metric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_MetricTable_Metric_descriptor_,
      SectionHeader_MetricTable_Metric::default_instance_,
      SectionHeader_MetricTable_Metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_MetricTable_Metric));
  SectionHeader_MetricTable_Metric_MetricFormula_descriptor_ = SectionHeader_MetricTable_Metric_descriptor_->nested_type(0);
  static const int SectionHeader_MetricTable_Metric_MetricFormula_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric_MetricFormula, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric_MetricFormula, formula_),
  };
  SectionHeader_MetricTable_Metric_MetricFormula_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_MetricTable_Metric_MetricFormula_descriptor_,
      SectionHeader_MetricTable_Metric_MetricFormula::default_instance_,
      SectionHeader_MetricTable_Metric_MetricFormula_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric_MetricFormula, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricTable_Metric_MetricFormula, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_MetricTable_Metric_MetricFormula));
  SectionHeader_MetricDBTable_descriptor_ = SectionHeader_descriptor_->nested_type(2);
  static const int SectionHeader_MetricDBTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable, metric_db_list_),
  };
  SectionHeader_MetricDBTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_MetricDBTable_descriptor_,
      SectionHeader_MetricDBTable::default_instance_,
      SectionHeader_MetricDBTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_MetricDBTable));
  SectionHeader_MetricDBTable_MetricDB_descriptor_ = SectionHeader_MetricDBTable_descriptor_->nested_type(0);
  static const int SectionHeader_MetricDBTable_MetricDB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, db_glob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, db_num_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, db_header_sz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, db_id_),
  };
  SectionHeader_MetricDBTable_MetricDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_MetricDBTable_MetricDB_descriptor_,
      SectionHeader_MetricDBTable_MetricDB::default_instance_,
      SectionHeader_MetricDBTable_MetricDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_MetricDBTable_MetricDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_MetricDBTable_MetricDB));
  SectionHeader_TraceDBTable_descriptor_ = SectionHeader_descriptor_->nested_type(3);
  static const int SectionHeader_TraceDBTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable, trace_db_list_),
  };
  SectionHeader_TraceDBTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_TraceDBTable_descriptor_,
      SectionHeader_TraceDBTable::default_instance_,
      SectionHeader_TraceDBTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_TraceDBTable));
  SectionHeader_TraceDBTable_TraceDB_descriptor_ = SectionHeader_TraceDBTable_descriptor_->nested_type(0);
  static const int SectionHeader_TraceDBTable_TraceDB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, db_glob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, db_min_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, db_max_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, db_header_sz_),
  };
  SectionHeader_TraceDBTable_TraceDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_TraceDBTable_TraceDB_descriptor_,
      SectionHeader_TraceDBTable_TraceDB::default_instance_,
      SectionHeader_TraceDBTable_TraceDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_TraceDBTable_TraceDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_TraceDBTable_TraceDB));
  SectionHeader_LoadModuleTable_descriptor_ = SectionHeader_descriptor_->nested_type(4);
  static const int SectionHeader_LoadModuleTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable, load_module_list_),
  };
  SectionHeader_LoadModuleTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_LoadModuleTable_descriptor_,
      SectionHeader_LoadModuleTable::default_instance_,
      SectionHeader_LoadModuleTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_LoadModuleTable));
  SectionHeader_LoadModuleTable_LoadModule_descriptor_ = SectionHeader_LoadModuleTable_descriptor_->nested_type(0);
  static const int SectionHeader_LoadModuleTable_LoadModule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable_LoadModule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable_LoadModule, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable_LoadModule, info_),
  };
  SectionHeader_LoadModuleTable_LoadModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_LoadModuleTable_LoadModule_descriptor_,
      SectionHeader_LoadModuleTable_LoadModule::default_instance_,
      SectionHeader_LoadModuleTable_LoadModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable_LoadModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_LoadModuleTable_LoadModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_LoadModuleTable_LoadModule));
  SectionHeader_FileTable_descriptor_ = SectionHeader_descriptor_->nested_type(5);
  static const int SectionHeader_FileTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable, file_list_),
  };
  SectionHeader_FileTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_FileTable_descriptor_,
      SectionHeader_FileTable::default_instance_,
      SectionHeader_FileTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_FileTable));
  SectionHeader_FileTable_File_descriptor_ = SectionHeader_FileTable_descriptor_->nested_type(0);
  static const int SectionHeader_FileTable_File_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable_File, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable_File, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable_File, info_),
  };
  SectionHeader_FileTable_File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_FileTable_File_descriptor_,
      SectionHeader_FileTable_File::default_instance_,
      SectionHeader_FileTable_File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable_File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_FileTable_File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_FileTable_File));
  SectionHeader_ProcedureTable_descriptor_ = SectionHeader_descriptor_->nested_type(6);
  static const int SectionHeader_ProcedureTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable, procedure_list_),
  };
  SectionHeader_ProcedureTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_ProcedureTable_descriptor_,
      SectionHeader_ProcedureTable::default_instance_,
      SectionHeader_ProcedureTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_ProcedureTable));
  SectionHeader_ProcedureTable_Procedure_descriptor_ = SectionHeader_ProcedureTable_descriptor_->nested_type(0);
  static const int SectionHeader_ProcedureTable_Procedure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable_Procedure, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable_Procedure, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable_Procedure, info_),
  };
  SectionHeader_ProcedureTable_Procedure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectionHeader_ProcedureTable_Procedure_descriptor_,
      SectionHeader_ProcedureTable_Procedure::default_instance_,
      SectionHeader_ProcedureTable_Procedure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable_Procedure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectionHeader_ProcedureTable_Procedure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectionHeader_ProcedureTable_Procedure));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Metric_2dMgr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_descriptor_, &SectionHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_Info_descriptor_, &SectionHeader_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_Info_NameValue_descriptor_, &SectionHeader_Info_NameValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_MetricTable_descriptor_, &SectionHeader_MetricTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_MetricTable_Metric_descriptor_, &SectionHeader_MetricTable_Metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_MetricTable_Metric_MetricFormula_descriptor_, &SectionHeader_MetricTable_Metric_MetricFormula::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_MetricDBTable_descriptor_, &SectionHeader_MetricDBTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_MetricDBTable_MetricDB_descriptor_, &SectionHeader_MetricDBTable_MetricDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_TraceDBTable_descriptor_, &SectionHeader_TraceDBTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_TraceDBTable_TraceDB_descriptor_, &SectionHeader_TraceDBTable_TraceDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_LoadModuleTable_descriptor_, &SectionHeader_LoadModuleTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_LoadModuleTable_LoadModule_descriptor_, &SectionHeader_LoadModuleTable_LoadModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_FileTable_descriptor_, &SectionHeader_FileTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_FileTable_File_descriptor_, &SectionHeader_FileTable_File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_ProcedureTable_descriptor_, &SectionHeader_ProcedureTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectionHeader_ProcedureTable_Procedure_descriptor_, &SectionHeader_ProcedureTable_Procedure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Metric_2dMgr_2eproto() {
  delete SectionHeader::default_instance_;
  delete SectionHeader_reflection_;
  delete SectionHeader_Info::default_instance_;
  delete SectionHeader_Info_reflection_;
  delete SectionHeader_Info_NameValue::default_instance_;
  delete SectionHeader_Info_NameValue_reflection_;
  delete SectionHeader_MetricTable::default_instance_;
  delete SectionHeader_MetricTable_reflection_;
  delete SectionHeader_MetricTable_Metric::default_instance_;
  delete SectionHeader_MetricTable_Metric_reflection_;
  delete SectionHeader_MetricTable_Metric_MetricFormula::default_instance_;
  delete SectionHeader_MetricTable_Metric_MetricFormula_reflection_;
  delete SectionHeader_MetricDBTable::default_instance_;
  delete SectionHeader_MetricDBTable_reflection_;
  delete SectionHeader_MetricDBTable_MetricDB::default_instance_;
  delete SectionHeader_MetricDBTable_MetricDB_reflection_;
  delete SectionHeader_TraceDBTable::default_instance_;
  delete SectionHeader_TraceDBTable_reflection_;
  delete SectionHeader_TraceDBTable_TraceDB::default_instance_;
  delete SectionHeader_TraceDBTable_TraceDB_reflection_;
  delete SectionHeader_LoadModuleTable::default_instance_;
  delete SectionHeader_LoadModuleTable_reflection_;
  delete SectionHeader_LoadModuleTable_LoadModule::default_instance_;
  delete SectionHeader_LoadModuleTable_LoadModule_reflection_;
  delete SectionHeader_FileTable::default_instance_;
  delete SectionHeader_FileTable_reflection_;
  delete SectionHeader_FileTable_File::default_instance_;
  delete SectionHeader_FileTable_File_reflection_;
  delete SectionHeader_ProcedureTable::default_instance_;
  delete SectionHeader_ProcedureTable_reflection_;
  delete SectionHeader_ProcedureTable_Procedure::default_instance_;
  delete SectionHeader_ProcedureTable_Procedure_reflection_;
}

void protobuf_AddDesc_Metric_2dMgr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Metric-Mgr.proto\022\004Head\"\271\016\n\rSectionHead"
    "er\0220\n\007m_table\030\001 \001(\0132\037.Head.SectionHeader"
    ".MetricTable\0225\n\nm_db_table\030\002 \001(\0132!.Head."
    "SectionHeader.MetricDBTable\0224\n\nt_db_tabl"
    "e\030\003 \001(\0132 .Head.SectionHeader.TraceDBTabl"
    "e\0225\n\010lm_table\030\004 \001(\0132#.Head.SectionHeader"
    ".LoadModuleTable\022.\n\007f_table\030\005 \001(\0132\035.Head"
    ".SectionHeader.FileTable\0223\n\007p_table\030\006 \001("
    "\0132\".Head.SectionHeader.ProcedureTable\022+\n"
    "\tinfo_list\030\007 \003(\0132\030.Head.SectionHeader.In"
    "fo\022\n\n\002id\030\010 \001(\005\022\014\n\004name\030\t \001(\t\032\201\001\n\004Info\022\014\n"
    "\004name\030\001 \001(\t\0223\n\007nv_list\030\002 \003(\0132\".Head.Sect"
    "ionHeader.Info.NameValue\0326\n\tNameValue\022\014\n"
    "\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\022\014\n\004type\030\003 \001(\t"
    "\032\270\003\n\013MetricTable\0226\n\006m_list\030\001 \003(\0132&.Head."
    "SectionHeader.MetricTable.Metric\032\360\002\n\006Met"
    "ric\022\032\n\014show_percent\030\001 \001(\010:\004true\022Q\n\023metri"
    "c_formula_list\030\002 \003(\01324.Head.SectionHeade"
    "r.MetricTable.Metric.MetricFormula\022&\n\004in"
    "fo\030\003 \001(\0132\030.Head.SectionHeader.Info\022\n\n\002id"
    "\030\004 \002(\005\022\014\n\004name\030\005 \001(\t\022\020\n\005value\030\006 \001(\005:\0010\022\017"
    "\n\004type\030\007 \001(\005:\0010\022\017\n\007partner\030\010 \001(\005\022\013\n\003fmt\030"
    "\t \001(\005\022\022\n\004show\030\n \001(\010:\004true\022\020\n\010basename\030\013 "
    "\001(\t\022\016\n\006suffix\030\014 \001(\t\022\016\n\006prefix\030\r \001(\t\032.\n\rM"
    "etricFormula\022\014\n\004type\030\001 \001(\010\022\017\n\007formula\030\002 "
    "\002(\t\032\307\001\n\rMetricDBTable\022B\n\016metric_db_list\030"
    "\001 \003(\0132*.Head.SectionHeader.MetricDBTable"
    ".MetricDB\032r\n\010MetricDB\022\n\n\002id\030\001 \002(\005\022\014\n\004nam"
    "e\030\002 \002(\t\022\017\n\007db_glob\030\003 \001(\t\022\026\n\016db_num_metri"
    "cs\030\004 \001(\005\022\024\n\014db_header_sz\030\005 \001(\005\022\r\n\005db_id\030"
    "\006 \001(\005\032\267\001\n\014TraceDBTable\022\?\n\rtrace_db_list\030"
    "\001 \003(\0132(.Head.SectionHeader.TraceDBTable."
    "TraceDB\032f\n\007TraceDB\022\n\n\002id\030\001 \002(\005\022\017\n\007db_glo"
    "b\030\002 \001(\t\022\023\n\013db_min_time\030\003 \001(\004\022\023\n\013db_max_t"
    "ime\030\004 \001(\004\022\024\n\014db_header_sz\030\005 \001(\005\032\253\001\n\017Load"
    "ModuleTable\022H\n\020load_module_list\030\001 \003(\0132.."
    "Head.SectionHeader.LoadModuleTable.LoadM"
    "odule\032N\n\nLoadModule\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030"
    "\002 \002(\t\022&\n\004info\030\003 \001(\0132\030.Head.SectionHeader"
    ".Info\032\214\001\n\tFileTable\0225\n\tfile_list\030\001 \003(\0132\""
    ".Head.SectionHeader.FileTable.File\032H\n\004Fi"
    "le\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022&\n\004info\030\003 \001"
    "(\0132\030.Head.SectionHeader.Info\032\245\001\n\016Procedu"
    "reTable\022D\n\016procedure_list\030\001 \003(\0132,.Head.S"
    "ectionHeader.ProcedureTable.Procedure\032M\n"
    "\tProcedure\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022&\n\004"
    "info\030\003 \001(\0132\030.Head.SectionHeader.InfoB\033\n\010"
    "ProtobufB\017SectionHeaderPB", 1905);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Metric-Mgr.proto", &protobuf_RegisterTypes);
  SectionHeader::default_instance_ = new SectionHeader();
  SectionHeader_Info::default_instance_ = new SectionHeader_Info();
  SectionHeader_Info_NameValue::default_instance_ = new SectionHeader_Info_NameValue();
  SectionHeader_MetricTable::default_instance_ = new SectionHeader_MetricTable();
  SectionHeader_MetricTable_Metric::default_instance_ = new SectionHeader_MetricTable_Metric();
  SectionHeader_MetricTable_Metric_MetricFormula::default_instance_ = new SectionHeader_MetricTable_Metric_MetricFormula();
  SectionHeader_MetricDBTable::default_instance_ = new SectionHeader_MetricDBTable();
  SectionHeader_MetricDBTable_MetricDB::default_instance_ = new SectionHeader_MetricDBTable_MetricDB();
  SectionHeader_TraceDBTable::default_instance_ = new SectionHeader_TraceDBTable();
  SectionHeader_TraceDBTable_TraceDB::default_instance_ = new SectionHeader_TraceDBTable_TraceDB();
  SectionHeader_LoadModuleTable::default_instance_ = new SectionHeader_LoadModuleTable();
  SectionHeader_LoadModuleTable_LoadModule::default_instance_ = new SectionHeader_LoadModuleTable_LoadModule();
  SectionHeader_FileTable::default_instance_ = new SectionHeader_FileTable();
  SectionHeader_FileTable_File::default_instance_ = new SectionHeader_FileTable_File();
  SectionHeader_ProcedureTable::default_instance_ = new SectionHeader_ProcedureTable();
  SectionHeader_ProcedureTable_Procedure::default_instance_ = new SectionHeader_ProcedureTable_Procedure();
  SectionHeader::default_instance_->InitAsDefaultInstance();
  SectionHeader_Info::default_instance_->InitAsDefaultInstance();
  SectionHeader_Info_NameValue::default_instance_->InitAsDefaultInstance();
  SectionHeader_MetricTable::default_instance_->InitAsDefaultInstance();
  SectionHeader_MetricTable_Metric::default_instance_->InitAsDefaultInstance();
  SectionHeader_MetricTable_Metric_MetricFormula::default_instance_->InitAsDefaultInstance();
  SectionHeader_MetricDBTable::default_instance_->InitAsDefaultInstance();
  SectionHeader_MetricDBTable_MetricDB::default_instance_->InitAsDefaultInstance();
  SectionHeader_TraceDBTable::default_instance_->InitAsDefaultInstance();
  SectionHeader_TraceDBTable_TraceDB::default_instance_->InitAsDefaultInstance();
  SectionHeader_LoadModuleTable::default_instance_->InitAsDefaultInstance();
  SectionHeader_LoadModuleTable_LoadModule::default_instance_->InitAsDefaultInstance();
  SectionHeader_FileTable::default_instance_->InitAsDefaultInstance();
  SectionHeader_FileTable_File::default_instance_->InitAsDefaultInstance();
  SectionHeader_ProcedureTable::default_instance_->InitAsDefaultInstance();
  SectionHeader_ProcedureTable_Procedure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Metric_2dMgr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Metric_2dMgr_2eproto {
  StaticDescriptorInitializer_Metric_2dMgr_2eproto() {
    protobuf_AddDesc_Metric_2dMgr_2eproto();
  }
} static_descriptor_initializer_Metric_2dMgr_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SectionHeader_Info_NameValue::kNameFieldNumber;
const int SectionHeader_Info_NameValue::kValueFieldNumber;
const int SectionHeader_Info_NameValue::kTypeFieldNumber;
#endif  // !_MSC_VER

SectionHeader_Info_NameValue::SectionHeader_Info_NameValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_Info_NameValue::InitAsDefaultInstance() {
}

SectionHeader_Info_NameValue::SectionHeader_Info_NameValue(const SectionHeader_Info_NameValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_Info_NameValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_Info_NameValue::~SectionHeader_Info_NameValue() {
  SharedDtor();
}

void SectionHeader_Info_NameValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void SectionHeader_Info_NameValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_Info_NameValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_Info_NameValue_descriptor_;
}

const SectionHeader_Info_NameValue& SectionHeader_Info_NameValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_Info_NameValue* SectionHeader_Info_NameValue::default_instance_ = NULL;

SectionHeader_Info_NameValue* SectionHeader_Info_NameValue::New() const {
  return new SectionHeader_Info_NameValue;
}

void SectionHeader_Info_NameValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_Info_NameValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_Info_NameValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_Info_NameValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_Info_NameValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_Info_NameValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_Info_NameValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_Info_NameValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_Info_NameValue::MergeFrom(const SectionHeader_Info_NameValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_Info_NameValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_Info_NameValue::CopyFrom(const SectionHeader_Info_NameValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_Info_NameValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SectionHeader_Info_NameValue::Swap(SectionHeader_Info_NameValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_Info_NameValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_Info_NameValue_descriptor_;
  metadata.reflection = SectionHeader_Info_NameValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_Info::kNameFieldNumber;
const int SectionHeader_Info::kNvListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_Info::SectionHeader_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_Info::InitAsDefaultInstance() {
}

SectionHeader_Info::SectionHeader_Info(const SectionHeader_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_Info::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_Info::~SectionHeader_Info() {
  SharedDtor();
}

void SectionHeader_Info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SectionHeader_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_Info_descriptor_;
}

const SectionHeader_Info& SectionHeader_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_Info* SectionHeader_Info::default_instance_ = NULL;

SectionHeader_Info* SectionHeader_Info::New() const {
  return new SectionHeader_Info;
}

void SectionHeader_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  nv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nv_list;
        break;
      }
      
      // repeated .Head.SectionHeader.Info.NameValue nv_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nv_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nv_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .Head.SectionHeader.Info.NameValue nv_list = 2;
  for (int i = 0; i < this->nv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nv_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .Head.SectionHeader.Info.NameValue nv_list = 2;
  for (int i = 0; i < this->nv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nv_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .Head.SectionHeader.Info.NameValue nv_list = 2;
  total_size += 1 * this->nv_list_size();
  for (int i = 0; i < this->nv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nv_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_Info::MergeFrom(const SectionHeader_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  nv_list_.MergeFrom(from.nv_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_Info::CopyFrom(const SectionHeader_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_Info::IsInitialized() const {
  
  for (int i = 0; i < nv_list_size(); i++) {
    if (!this->nv_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_Info::Swap(SectionHeader_Info* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    nv_list_.Swap(&other->nv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_Info_descriptor_;
  metadata.reflection = SectionHeader_Info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_MetricTable_Metric_MetricFormula::kTypeFieldNumber;
const int SectionHeader_MetricTable_Metric_MetricFormula::kFormulaFieldNumber;
#endif  // !_MSC_VER

SectionHeader_MetricTable_Metric_MetricFormula::SectionHeader_MetricTable_Metric_MetricFormula()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_MetricTable_Metric_MetricFormula::InitAsDefaultInstance() {
}

SectionHeader_MetricTable_Metric_MetricFormula::SectionHeader_MetricTable_Metric_MetricFormula(const SectionHeader_MetricTable_Metric_MetricFormula& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_MetricTable_Metric_MetricFormula::SharedCtor() {
  _cached_size_ = 0;
  type_ = false;
  formula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_MetricTable_Metric_MetricFormula::~SectionHeader_MetricTable_Metric_MetricFormula() {
  SharedDtor();
}

void SectionHeader_MetricTable_Metric_MetricFormula::SharedDtor() {
  if (formula_ != &::google::protobuf::internal::kEmptyString) {
    delete formula_;
  }
  if (this != default_instance_) {
  }
}

void SectionHeader_MetricTable_Metric_MetricFormula::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_MetricTable_Metric_MetricFormula::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_MetricTable_Metric_MetricFormula_descriptor_;
}

const SectionHeader_MetricTable_Metric_MetricFormula& SectionHeader_MetricTable_Metric_MetricFormula::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_MetricTable_Metric_MetricFormula* SectionHeader_MetricTable_Metric_MetricFormula::default_instance_ = NULL;

SectionHeader_MetricTable_Metric_MetricFormula* SectionHeader_MetricTable_Metric_MetricFormula::New() const {
  return new SectionHeader_MetricTable_Metric_MetricFormula;
}

void SectionHeader_MetricTable_Metric_MetricFormula::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = false;
    if (has_formula()) {
      if (formula_ != &::google::protobuf::internal::kEmptyString) {
        formula_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_MetricTable_Metric_MetricFormula::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formula;
        break;
      }
      
      // required string formula = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->formula().data(), this->formula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_MetricTable_Metric_MetricFormula::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->type(), output);
  }
  
  // required string formula = 2;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formula().data(), this->formula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->formula(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_MetricTable_Metric_MetricFormula::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->type(), target);
  }
  
  // required string formula = 2;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formula().data(), this->formula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->formula(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_MetricTable_Metric_MetricFormula::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool type = 1;
    if (has_type()) {
      total_size += 1 + 1;
    }
    
    // required string formula = 2;
    if (has_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formula());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_MetricTable_Metric_MetricFormula::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_MetricTable_Metric_MetricFormula* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_MetricTable_Metric_MetricFormula*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_MetricTable_Metric_MetricFormula::MergeFrom(const SectionHeader_MetricTable_Metric_MetricFormula& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_formula()) {
      set_formula(from.formula());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_MetricTable_Metric_MetricFormula::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_MetricTable_Metric_MetricFormula::CopyFrom(const SectionHeader_MetricTable_Metric_MetricFormula& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_MetricTable_Metric_MetricFormula::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void SectionHeader_MetricTable_Metric_MetricFormula::Swap(SectionHeader_MetricTable_Metric_MetricFormula* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(formula_, other->formula_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_MetricTable_Metric_MetricFormula::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_MetricTable_Metric_MetricFormula_descriptor_;
  metadata.reflection = SectionHeader_MetricTable_Metric_MetricFormula_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_MetricTable_Metric::kShowPercentFieldNumber;
const int SectionHeader_MetricTable_Metric::kMetricFormulaListFieldNumber;
const int SectionHeader_MetricTable_Metric::kInfoFieldNumber;
const int SectionHeader_MetricTable_Metric::kIdFieldNumber;
const int SectionHeader_MetricTable_Metric::kNameFieldNumber;
const int SectionHeader_MetricTable_Metric::kValueFieldNumber;
const int SectionHeader_MetricTable_Metric::kTypeFieldNumber;
const int SectionHeader_MetricTable_Metric::kPartnerFieldNumber;
const int SectionHeader_MetricTable_Metric::kFmtFieldNumber;
const int SectionHeader_MetricTable_Metric::kShowFieldNumber;
const int SectionHeader_MetricTable_Metric::kBasenameFieldNumber;
const int SectionHeader_MetricTable_Metric::kSuffixFieldNumber;
const int SectionHeader_MetricTable_Metric::kPrefixFieldNumber;
#endif  // !_MSC_VER

SectionHeader_MetricTable_Metric::SectionHeader_MetricTable_Metric()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_MetricTable_Metric::InitAsDefaultInstance() {
  info_ = const_cast< ::Head::SectionHeader_Info*>(&::Head::SectionHeader_Info::default_instance());
}

SectionHeader_MetricTable_Metric::SectionHeader_MetricTable_Metric(const SectionHeader_MetricTable_Metric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_MetricTable_Metric::SharedCtor() {
  _cached_size_ = 0;
  show_percent_ = true;
  info_ = NULL;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  type_ = 0;
  partner_ = 0;
  fmt_ = 0;
  show_ = true;
  basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_MetricTable_Metric::~SectionHeader_MetricTable_Metric() {
  SharedDtor();
}

void SectionHeader_MetricTable_Metric::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (basename_ != &::google::protobuf::internal::kEmptyString) {
    delete basename_;
  }
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_;
  }
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void SectionHeader_MetricTable_Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_MetricTable_Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_MetricTable_Metric_descriptor_;
}

const SectionHeader_MetricTable_Metric& SectionHeader_MetricTable_Metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_MetricTable_Metric* SectionHeader_MetricTable_Metric::default_instance_ = NULL;

SectionHeader_MetricTable_Metric* SectionHeader_MetricTable_Metric::New() const {
  return new SectionHeader_MetricTable_Metric;
}

void SectionHeader_MetricTable_Metric::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    show_percent_ = true;
    if (has_info()) {
      if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
    }
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
    type_ = 0;
    partner_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fmt_ = 0;
    show_ = true;
    if (has_basename()) {
      if (basename_ != &::google::protobuf::internal::kEmptyString) {
        basename_->clear();
      }
    }
    if (has_suffix()) {
      if (suffix_ != &::google::protobuf::internal::kEmptyString) {
        suffix_->clear();
      }
    }
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
  }
  metric_formula_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_MetricTable_Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool show_percent = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_percent_)));
          set_has_show_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metric_formula_list;
        break;
      }
      
      // repeated .Head.SectionHeader.MetricTable.Metric.MetricFormula metric_formula_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric_formula_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metric_formula_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_metric_formula_list;
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .Head.SectionHeader.Info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }
      
      // required int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }
      
      // optional int32 value = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional int32 type = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_partner;
        break;
      }
      
      // optional int32 partner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partner_)));
          set_has_partner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fmt;
        break;
      }
      
      // optional int32 fmt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fmt_)));
          set_has_fmt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_show;
        break;
      }
      
      // optional bool show = 10 [default = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_basename;
        break;
      }
      
      // optional string basename = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->basename().data(), this->basename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_suffix;
        break;
      }
      
      // optional string suffix = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_prefix;
        break;
      }
      
      // optional string prefix = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_MetricTable_Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool show_percent = 1 [default = true];
  if (has_show_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->show_percent(), output);
  }
  
  // repeated .Head.SectionHeader.MetricTable.Metric.MetricFormula metric_formula_list = 2;
  for (int i = 0; i < this->metric_formula_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->metric_formula_list(i), output);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  // required int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional int32 value = 6 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->value(), output);
  }
  
  // optional int32 type = 7 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  // optional int32 partner = 8;
  if (has_partner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->partner(), output);
  }
  
  // optional int32 fmt = 9;
  if (has_fmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fmt(), output);
  }
  
  // optional bool show = 10 [default = true];
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->show(), output);
  }
  
  // optional string basename = 11;
  if (has_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basename().data(), this->basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->basename(), output);
  }
  
  // optional string suffix = 12;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->suffix(), output);
  }
  
  // optional string prefix = 13;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->prefix(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_MetricTable_Metric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool show_percent = 1 [default = true];
  if (has_show_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->show_percent(), target);
  }
  
  // repeated .Head.SectionHeader.MetricTable.Metric.MetricFormula metric_formula_list = 2;
  for (int i = 0; i < this->metric_formula_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->metric_formula_list(i), target);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  // required int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional int32 value = 6 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->value(), target);
  }
  
  // optional int32 type = 7 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  // optional int32 partner = 8;
  if (has_partner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->partner(), target);
  }
  
  // optional int32 fmt = 9;
  if (has_fmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fmt(), target);
  }
  
  // optional bool show = 10 [default = true];
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->show(), target);
  }
  
  // optional string basename = 11;
  if (has_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->basename().data(), this->basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->basename(), target);
  }
  
  // optional string suffix = 12;
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->suffix(), target);
  }
  
  // optional string prefix = 13;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->prefix(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_MetricTable_Metric::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool show_percent = 1 [default = true];
    if (has_show_percent()) {
      total_size += 1 + 1;
    }
    
    // optional .Head.SectionHeader.Info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 value = 6 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 type = 7 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 partner = 8;
    if (has_partner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partner());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fmt = 9;
    if (has_fmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fmt());
    }
    
    // optional bool show = 10 [default = true];
    if (has_show()) {
      total_size += 1 + 1;
    }
    
    // optional string basename = 11;
    if (has_basename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basename());
    }
    
    // optional string suffix = 12;
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }
    
    // optional string prefix = 13;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }
    
  }
  // repeated .Head.SectionHeader.MetricTable.Metric.MetricFormula metric_formula_list = 2;
  total_size += 1 * this->metric_formula_list_size();
  for (int i = 0; i < this->metric_formula_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metric_formula_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_MetricTable_Metric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_MetricTable_Metric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_MetricTable_Metric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_MetricTable_Metric::MergeFrom(const SectionHeader_MetricTable_Metric& from) {
  GOOGLE_CHECK_NE(&from, this);
  metric_formula_list_.MergeFrom(from.metric_formula_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_show_percent()) {
      set_show_percent(from.show_percent());
    }
    if (from.has_info()) {
      mutable_info()->::Head::SectionHeader_Info::MergeFrom(from.info());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_partner()) {
      set_partner(from.partner());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fmt()) {
      set_fmt(from.fmt());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_basename()) {
      set_basename(from.basename());
    }
    if (from.has_suffix()) {
      set_suffix(from.suffix());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_MetricTable_Metric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_MetricTable_Metric::CopyFrom(const SectionHeader_MetricTable_Metric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_MetricTable_Metric::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  for (int i = 0; i < metric_formula_list_size(); i++) {
    if (!this->metric_formula_list(i).IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_MetricTable_Metric::Swap(SectionHeader_MetricTable_Metric* other) {
  if (other != this) {
    std::swap(show_percent_, other->show_percent_);
    metric_formula_list_.Swap(&other->metric_formula_list_);
    std::swap(info_, other->info_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(partner_, other->partner_);
    std::swap(fmt_, other->fmt_);
    std::swap(show_, other->show_);
    std::swap(basename_, other->basename_);
    std::swap(suffix_, other->suffix_);
    std::swap(prefix_, other->prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_MetricTable_Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_MetricTable_Metric_descriptor_;
  metadata.reflection = SectionHeader_MetricTable_Metric_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_MetricTable::kMListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_MetricTable::SectionHeader_MetricTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_MetricTable::InitAsDefaultInstance() {
}

SectionHeader_MetricTable::SectionHeader_MetricTable(const SectionHeader_MetricTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_MetricTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_MetricTable::~SectionHeader_MetricTable() {
  SharedDtor();
}

void SectionHeader_MetricTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHeader_MetricTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_MetricTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_MetricTable_descriptor_;
}

const SectionHeader_MetricTable& SectionHeader_MetricTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_MetricTable* SectionHeader_MetricTable::default_instance_ = NULL;

SectionHeader_MetricTable* SectionHeader_MetricTable::New() const {
  return new SectionHeader_MetricTable;
}

void SectionHeader_MetricTable::Clear() {
  m_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_MetricTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Head.SectionHeader.MetricTable.Metric m_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_MetricTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Head.SectionHeader.MetricTable.Metric m_list = 1;
  for (int i = 0; i < this->m_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_MetricTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Head.SectionHeader.MetricTable.Metric m_list = 1;
  for (int i = 0; i < this->m_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_MetricTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Head.SectionHeader.MetricTable.Metric m_list = 1;
  total_size += 1 * this->m_list_size();
  for (int i = 0; i < this->m_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_MetricTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_MetricTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_MetricTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_MetricTable::MergeFrom(const SectionHeader_MetricTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_list_.MergeFrom(from.m_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_MetricTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_MetricTable::CopyFrom(const SectionHeader_MetricTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_MetricTable::IsInitialized() const {
  
  for (int i = 0; i < m_list_size(); i++) {
    if (!this->m_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_MetricTable::Swap(SectionHeader_MetricTable* other) {
  if (other != this) {
    m_list_.Swap(&other->m_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_MetricTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_MetricTable_descriptor_;
  metadata.reflection = SectionHeader_MetricTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_MetricDBTable_MetricDB::kIdFieldNumber;
const int SectionHeader_MetricDBTable_MetricDB::kNameFieldNumber;
const int SectionHeader_MetricDBTable_MetricDB::kDbGlobFieldNumber;
const int SectionHeader_MetricDBTable_MetricDB::kDbNumMetricsFieldNumber;
const int SectionHeader_MetricDBTable_MetricDB::kDbHeaderSzFieldNumber;
const int SectionHeader_MetricDBTable_MetricDB::kDbIdFieldNumber;
#endif  // !_MSC_VER

SectionHeader_MetricDBTable_MetricDB::SectionHeader_MetricDBTable_MetricDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_MetricDBTable_MetricDB::InitAsDefaultInstance() {
}

SectionHeader_MetricDBTable_MetricDB::SectionHeader_MetricDBTable_MetricDB(const SectionHeader_MetricDBTable_MetricDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_MetricDBTable_MetricDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_glob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_num_metrics_ = 0;
  db_header_sz_ = 0;
  db_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_MetricDBTable_MetricDB::~SectionHeader_MetricDBTable_MetricDB() {
  SharedDtor();
}

void SectionHeader_MetricDBTable_MetricDB::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (db_glob_ != &::google::protobuf::internal::kEmptyString) {
    delete db_glob_;
  }
  if (this != default_instance_) {
  }
}

void SectionHeader_MetricDBTable_MetricDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_MetricDBTable_MetricDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_MetricDBTable_MetricDB_descriptor_;
}

const SectionHeader_MetricDBTable_MetricDB& SectionHeader_MetricDBTable_MetricDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_MetricDBTable_MetricDB* SectionHeader_MetricDBTable_MetricDB::default_instance_ = NULL;

SectionHeader_MetricDBTable_MetricDB* SectionHeader_MetricDBTable_MetricDB::New() const {
  return new SectionHeader_MetricDBTable_MetricDB;
}

void SectionHeader_MetricDBTable_MetricDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_db_glob()) {
      if (db_glob_ != &::google::protobuf::internal::kEmptyString) {
        db_glob_->clear();
      }
    }
    db_num_metrics_ = 0;
    db_header_sz_ = 0;
    db_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_MetricDBTable_MetricDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_glob;
        break;
      }
      
      // optional string db_glob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_glob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_glob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_glob().data(), this->db_glob().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_db_num_metrics;
        break;
      }
      
      // optional int32 db_num_metrics = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_num_metrics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_num_metrics_)));
          set_has_db_num_metrics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_db_header_sz;
        break;
      }
      
      // optional int32 db_header_sz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_header_sz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_header_sz_)));
          set_has_db_header_sz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_db_id;
        break;
      }
      
      // optional int32 db_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_id_)));
          set_has_db_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_MetricDBTable_MetricDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string db_glob = 3;
  if (has_db_glob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_glob().data(), this->db_glob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db_glob(), output);
  }
  
  // optional int32 db_num_metrics = 4;
  if (has_db_num_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->db_num_metrics(), output);
  }
  
  // optional int32 db_header_sz = 5;
  if (has_db_header_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->db_header_sz(), output);
  }
  
  // optional int32 db_id = 6;
  if (has_db_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->db_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_MetricDBTable_MetricDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string db_glob = 3;
  if (has_db_glob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_glob().data(), this->db_glob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_glob(), target);
  }
  
  // optional int32 db_num_metrics = 4;
  if (has_db_num_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->db_num_metrics(), target);
  }
  
  // optional int32 db_header_sz = 5;
  if (has_db_header_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->db_header_sz(), target);
  }
  
  // optional int32 db_id = 6;
  if (has_db_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->db_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_MetricDBTable_MetricDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string db_glob = 3;
    if (has_db_glob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_glob());
    }
    
    // optional int32 db_num_metrics = 4;
    if (has_db_num_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_num_metrics());
    }
    
    // optional int32 db_header_sz = 5;
    if (has_db_header_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_header_sz());
    }
    
    // optional int32 db_id = 6;
    if (has_db_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_MetricDBTable_MetricDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_MetricDBTable_MetricDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_MetricDBTable_MetricDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_MetricDBTable_MetricDB::MergeFrom(const SectionHeader_MetricDBTable_MetricDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_db_glob()) {
      set_db_glob(from.db_glob());
    }
    if (from.has_db_num_metrics()) {
      set_db_num_metrics(from.db_num_metrics());
    }
    if (from.has_db_header_sz()) {
      set_db_header_sz(from.db_header_sz());
    }
    if (from.has_db_id()) {
      set_db_id(from.db_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_MetricDBTable_MetricDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_MetricDBTable_MetricDB::CopyFrom(const SectionHeader_MetricDBTable_MetricDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_MetricDBTable_MetricDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SectionHeader_MetricDBTable_MetricDB::Swap(SectionHeader_MetricDBTable_MetricDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(db_glob_, other->db_glob_);
    std::swap(db_num_metrics_, other->db_num_metrics_);
    std::swap(db_header_sz_, other->db_header_sz_);
    std::swap(db_id_, other->db_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_MetricDBTable_MetricDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_MetricDBTable_MetricDB_descriptor_;
  metadata.reflection = SectionHeader_MetricDBTable_MetricDB_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_MetricDBTable::kMetricDbListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_MetricDBTable::SectionHeader_MetricDBTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_MetricDBTable::InitAsDefaultInstance() {
}

SectionHeader_MetricDBTable::SectionHeader_MetricDBTable(const SectionHeader_MetricDBTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_MetricDBTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_MetricDBTable::~SectionHeader_MetricDBTable() {
  SharedDtor();
}

void SectionHeader_MetricDBTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHeader_MetricDBTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_MetricDBTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_MetricDBTable_descriptor_;
}

const SectionHeader_MetricDBTable& SectionHeader_MetricDBTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_MetricDBTable* SectionHeader_MetricDBTable::default_instance_ = NULL;

SectionHeader_MetricDBTable* SectionHeader_MetricDBTable::New() const {
  return new SectionHeader_MetricDBTable;
}

void SectionHeader_MetricDBTable::Clear() {
  metric_db_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_MetricDBTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Head.SectionHeader.MetricDBTable.MetricDB metric_db_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric_db_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metric_db_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_metric_db_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_MetricDBTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Head.SectionHeader.MetricDBTable.MetricDB metric_db_list = 1;
  for (int i = 0; i < this->metric_db_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metric_db_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_MetricDBTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Head.SectionHeader.MetricDBTable.MetricDB metric_db_list = 1;
  for (int i = 0; i < this->metric_db_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metric_db_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_MetricDBTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Head.SectionHeader.MetricDBTable.MetricDB metric_db_list = 1;
  total_size += 1 * this->metric_db_list_size();
  for (int i = 0; i < this->metric_db_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metric_db_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_MetricDBTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_MetricDBTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_MetricDBTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_MetricDBTable::MergeFrom(const SectionHeader_MetricDBTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  metric_db_list_.MergeFrom(from.metric_db_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_MetricDBTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_MetricDBTable::CopyFrom(const SectionHeader_MetricDBTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_MetricDBTable::IsInitialized() const {
  
  for (int i = 0; i < metric_db_list_size(); i++) {
    if (!this->metric_db_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_MetricDBTable::Swap(SectionHeader_MetricDBTable* other) {
  if (other != this) {
    metric_db_list_.Swap(&other->metric_db_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_MetricDBTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_MetricDBTable_descriptor_;
  metadata.reflection = SectionHeader_MetricDBTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_TraceDBTable_TraceDB::kIdFieldNumber;
const int SectionHeader_TraceDBTable_TraceDB::kDbGlobFieldNumber;
const int SectionHeader_TraceDBTable_TraceDB::kDbMinTimeFieldNumber;
const int SectionHeader_TraceDBTable_TraceDB::kDbMaxTimeFieldNumber;
const int SectionHeader_TraceDBTable_TraceDB::kDbHeaderSzFieldNumber;
#endif  // !_MSC_VER

SectionHeader_TraceDBTable_TraceDB::SectionHeader_TraceDBTable_TraceDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_TraceDBTable_TraceDB::InitAsDefaultInstance() {
}

SectionHeader_TraceDBTable_TraceDB::SectionHeader_TraceDBTable_TraceDB(const SectionHeader_TraceDBTable_TraceDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_TraceDBTable_TraceDB::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  db_glob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_min_time_ = GOOGLE_ULONGLONG(0);
  db_max_time_ = GOOGLE_ULONGLONG(0);
  db_header_sz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_TraceDBTable_TraceDB::~SectionHeader_TraceDBTable_TraceDB() {
  SharedDtor();
}

void SectionHeader_TraceDBTable_TraceDB::SharedDtor() {
  if (db_glob_ != &::google::protobuf::internal::kEmptyString) {
    delete db_glob_;
  }
  if (this != default_instance_) {
  }
}

void SectionHeader_TraceDBTable_TraceDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_TraceDBTable_TraceDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_TraceDBTable_TraceDB_descriptor_;
}

const SectionHeader_TraceDBTable_TraceDB& SectionHeader_TraceDBTable_TraceDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_TraceDBTable_TraceDB* SectionHeader_TraceDBTable_TraceDB::default_instance_ = NULL;

SectionHeader_TraceDBTable_TraceDB* SectionHeader_TraceDBTable_TraceDB::New() const {
  return new SectionHeader_TraceDBTable_TraceDB;
}

void SectionHeader_TraceDBTable_TraceDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_db_glob()) {
      if (db_glob_ != &::google::protobuf::internal::kEmptyString) {
        db_glob_->clear();
      }
    }
    db_min_time_ = GOOGLE_ULONGLONG(0);
    db_max_time_ = GOOGLE_ULONGLONG(0);
    db_header_sz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_TraceDBTable_TraceDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_db_glob;
        break;
      }
      
      // optional string db_glob = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_glob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_glob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_glob().data(), this->db_glob().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_db_min_time;
        break;
      }
      
      // optional uint64 db_min_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_min_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_min_time_)));
          set_has_db_min_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_db_max_time;
        break;
      }
      
      // optional uint64 db_max_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_max_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &db_max_time_)));
          set_has_db_max_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_db_header_sz;
        break;
      }
      
      // optional int32 db_header_sz = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_header_sz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_header_sz_)));
          set_has_db_header_sz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_TraceDBTable_TraceDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string db_glob = 2;
  if (has_db_glob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_glob().data(), this->db_glob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->db_glob(), output);
  }
  
  // optional uint64 db_min_time = 3;
  if (has_db_min_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->db_min_time(), output);
  }
  
  // optional uint64 db_max_time = 4;
  if (has_db_max_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->db_max_time(), output);
  }
  
  // optional int32 db_header_sz = 5;
  if (has_db_header_sz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->db_header_sz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_TraceDBTable_TraceDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string db_glob = 2;
  if (has_db_glob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_glob().data(), this->db_glob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_glob(), target);
  }
  
  // optional uint64 db_min_time = 3;
  if (has_db_min_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->db_min_time(), target);
  }
  
  // optional uint64 db_max_time = 4;
  if (has_db_max_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->db_max_time(), target);
  }
  
  // optional int32 db_header_sz = 5;
  if (has_db_header_sz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->db_header_sz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_TraceDBTable_TraceDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string db_glob = 2;
    if (has_db_glob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_glob());
    }
    
    // optional uint64 db_min_time = 3;
    if (has_db_min_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_min_time());
    }
    
    // optional uint64 db_max_time = 4;
    if (has_db_max_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->db_max_time());
    }
    
    // optional int32 db_header_sz = 5;
    if (has_db_header_sz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_header_sz());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_TraceDBTable_TraceDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_TraceDBTable_TraceDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_TraceDBTable_TraceDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_TraceDBTable_TraceDB::MergeFrom(const SectionHeader_TraceDBTable_TraceDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_db_glob()) {
      set_db_glob(from.db_glob());
    }
    if (from.has_db_min_time()) {
      set_db_min_time(from.db_min_time());
    }
    if (from.has_db_max_time()) {
      set_db_max_time(from.db_max_time());
    }
    if (from.has_db_header_sz()) {
      set_db_header_sz(from.db_header_sz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_TraceDBTable_TraceDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_TraceDBTable_TraceDB::CopyFrom(const SectionHeader_TraceDBTable_TraceDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_TraceDBTable_TraceDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SectionHeader_TraceDBTable_TraceDB::Swap(SectionHeader_TraceDBTable_TraceDB* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(db_glob_, other->db_glob_);
    std::swap(db_min_time_, other->db_min_time_);
    std::swap(db_max_time_, other->db_max_time_);
    std::swap(db_header_sz_, other->db_header_sz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_TraceDBTable_TraceDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_TraceDBTable_TraceDB_descriptor_;
  metadata.reflection = SectionHeader_TraceDBTable_TraceDB_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_TraceDBTable::kTraceDbListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_TraceDBTable::SectionHeader_TraceDBTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_TraceDBTable::InitAsDefaultInstance() {
}

SectionHeader_TraceDBTable::SectionHeader_TraceDBTable(const SectionHeader_TraceDBTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_TraceDBTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_TraceDBTable::~SectionHeader_TraceDBTable() {
  SharedDtor();
}

void SectionHeader_TraceDBTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHeader_TraceDBTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_TraceDBTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_TraceDBTable_descriptor_;
}

const SectionHeader_TraceDBTable& SectionHeader_TraceDBTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_TraceDBTable* SectionHeader_TraceDBTable::default_instance_ = NULL;

SectionHeader_TraceDBTable* SectionHeader_TraceDBTable::New() const {
  return new SectionHeader_TraceDBTable;
}

void SectionHeader_TraceDBTable::Clear() {
  trace_db_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_TraceDBTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Head.SectionHeader.TraceDBTable.TraceDB trace_db_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trace_db_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trace_db_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trace_db_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_TraceDBTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Head.SectionHeader.TraceDBTable.TraceDB trace_db_list = 1;
  for (int i = 0; i < this->trace_db_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trace_db_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_TraceDBTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Head.SectionHeader.TraceDBTable.TraceDB trace_db_list = 1;
  for (int i = 0; i < this->trace_db_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trace_db_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_TraceDBTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Head.SectionHeader.TraceDBTable.TraceDB trace_db_list = 1;
  total_size += 1 * this->trace_db_list_size();
  for (int i = 0; i < this->trace_db_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trace_db_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_TraceDBTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_TraceDBTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_TraceDBTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_TraceDBTable::MergeFrom(const SectionHeader_TraceDBTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  trace_db_list_.MergeFrom(from.trace_db_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_TraceDBTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_TraceDBTable::CopyFrom(const SectionHeader_TraceDBTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_TraceDBTable::IsInitialized() const {
  
  for (int i = 0; i < trace_db_list_size(); i++) {
    if (!this->trace_db_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_TraceDBTable::Swap(SectionHeader_TraceDBTable* other) {
  if (other != this) {
    trace_db_list_.Swap(&other->trace_db_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_TraceDBTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_TraceDBTable_descriptor_;
  metadata.reflection = SectionHeader_TraceDBTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_LoadModuleTable_LoadModule::kIdFieldNumber;
const int SectionHeader_LoadModuleTable_LoadModule::kNameFieldNumber;
const int SectionHeader_LoadModuleTable_LoadModule::kInfoFieldNumber;
#endif  // !_MSC_VER

SectionHeader_LoadModuleTable_LoadModule::SectionHeader_LoadModuleTable_LoadModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_LoadModuleTable_LoadModule::InitAsDefaultInstance() {
  info_ = const_cast< ::Head::SectionHeader_Info*>(&::Head::SectionHeader_Info::default_instance());
}

SectionHeader_LoadModuleTable_LoadModule::SectionHeader_LoadModuleTable_LoadModule(const SectionHeader_LoadModuleTable_LoadModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_LoadModuleTable_LoadModule::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_LoadModuleTable_LoadModule::~SectionHeader_LoadModuleTable_LoadModule() {
  SharedDtor();
}

void SectionHeader_LoadModuleTable_LoadModule::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void SectionHeader_LoadModuleTable_LoadModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_LoadModuleTable_LoadModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_LoadModuleTable_LoadModule_descriptor_;
}

const SectionHeader_LoadModuleTable_LoadModule& SectionHeader_LoadModuleTable_LoadModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_LoadModuleTable_LoadModule* SectionHeader_LoadModuleTable_LoadModule::default_instance_ = NULL;

SectionHeader_LoadModuleTable_LoadModule* SectionHeader_LoadModuleTable_LoadModule::New() const {
  return new SectionHeader_LoadModuleTable_LoadModule;
}

void SectionHeader_LoadModuleTable_LoadModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_LoadModuleTable_LoadModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .Head.SectionHeader.Info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_LoadModuleTable_LoadModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_LoadModuleTable_LoadModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_LoadModuleTable_LoadModule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .Head.SectionHeader.Info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_LoadModuleTable_LoadModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_LoadModuleTable_LoadModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_LoadModuleTable_LoadModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_LoadModuleTable_LoadModule::MergeFrom(const SectionHeader_LoadModuleTable_LoadModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      mutable_info()->::Head::SectionHeader_Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_LoadModuleTable_LoadModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_LoadModuleTable_LoadModule::CopyFrom(const SectionHeader_LoadModuleTable_LoadModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_LoadModuleTable_LoadModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_LoadModuleTable_LoadModule::Swap(SectionHeader_LoadModuleTable_LoadModule* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_LoadModuleTable_LoadModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_LoadModuleTable_LoadModule_descriptor_;
  metadata.reflection = SectionHeader_LoadModuleTable_LoadModule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_LoadModuleTable::kLoadModuleListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_LoadModuleTable::SectionHeader_LoadModuleTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_LoadModuleTable::InitAsDefaultInstance() {
}

SectionHeader_LoadModuleTable::SectionHeader_LoadModuleTable(const SectionHeader_LoadModuleTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_LoadModuleTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_LoadModuleTable::~SectionHeader_LoadModuleTable() {
  SharedDtor();
}

void SectionHeader_LoadModuleTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHeader_LoadModuleTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_LoadModuleTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_LoadModuleTable_descriptor_;
}

const SectionHeader_LoadModuleTable& SectionHeader_LoadModuleTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_LoadModuleTable* SectionHeader_LoadModuleTable::default_instance_ = NULL;

SectionHeader_LoadModuleTable* SectionHeader_LoadModuleTable::New() const {
  return new SectionHeader_LoadModuleTable;
}

void SectionHeader_LoadModuleTable::Clear() {
  load_module_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_LoadModuleTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Head.SectionHeader.LoadModuleTable.LoadModule load_module_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_module_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_load_module_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_load_module_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_LoadModuleTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Head.SectionHeader.LoadModuleTable.LoadModule load_module_list = 1;
  for (int i = 0; i < this->load_module_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->load_module_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_LoadModuleTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Head.SectionHeader.LoadModuleTable.LoadModule load_module_list = 1;
  for (int i = 0; i < this->load_module_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->load_module_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_LoadModuleTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Head.SectionHeader.LoadModuleTable.LoadModule load_module_list = 1;
  total_size += 1 * this->load_module_list_size();
  for (int i = 0; i < this->load_module_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->load_module_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_LoadModuleTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_LoadModuleTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_LoadModuleTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_LoadModuleTable::MergeFrom(const SectionHeader_LoadModuleTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  load_module_list_.MergeFrom(from.load_module_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_LoadModuleTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_LoadModuleTable::CopyFrom(const SectionHeader_LoadModuleTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_LoadModuleTable::IsInitialized() const {
  
  for (int i = 0; i < load_module_list_size(); i++) {
    if (!this->load_module_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_LoadModuleTable::Swap(SectionHeader_LoadModuleTable* other) {
  if (other != this) {
    load_module_list_.Swap(&other->load_module_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_LoadModuleTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_LoadModuleTable_descriptor_;
  metadata.reflection = SectionHeader_LoadModuleTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_FileTable_File::kIdFieldNumber;
const int SectionHeader_FileTable_File::kNameFieldNumber;
const int SectionHeader_FileTable_File::kInfoFieldNumber;
#endif  // !_MSC_VER

SectionHeader_FileTable_File::SectionHeader_FileTable_File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_FileTable_File::InitAsDefaultInstance() {
  info_ = const_cast< ::Head::SectionHeader_Info*>(&::Head::SectionHeader_Info::default_instance());
}

SectionHeader_FileTable_File::SectionHeader_FileTable_File(const SectionHeader_FileTable_File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_FileTable_File::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_FileTable_File::~SectionHeader_FileTable_File() {
  SharedDtor();
}

void SectionHeader_FileTable_File::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void SectionHeader_FileTable_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_FileTable_File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_FileTable_File_descriptor_;
}

const SectionHeader_FileTable_File& SectionHeader_FileTable_File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_FileTable_File* SectionHeader_FileTable_File::default_instance_ = NULL;

SectionHeader_FileTable_File* SectionHeader_FileTable_File::New() const {
  return new SectionHeader_FileTable_File;
}

void SectionHeader_FileTable_File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_FileTable_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .Head.SectionHeader.Info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_FileTable_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_FileTable_File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_FileTable_File::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .Head.SectionHeader.Info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_FileTable_File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_FileTable_File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_FileTable_File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_FileTable_File::MergeFrom(const SectionHeader_FileTable_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      mutable_info()->::Head::SectionHeader_Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_FileTable_File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_FileTable_File::CopyFrom(const SectionHeader_FileTable_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_FileTable_File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_FileTable_File::Swap(SectionHeader_FileTable_File* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_FileTable_File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_FileTable_File_descriptor_;
  metadata.reflection = SectionHeader_FileTable_File_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_FileTable::kFileListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_FileTable::SectionHeader_FileTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_FileTable::InitAsDefaultInstance() {
}

SectionHeader_FileTable::SectionHeader_FileTable(const SectionHeader_FileTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_FileTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_FileTable::~SectionHeader_FileTable() {
  SharedDtor();
}

void SectionHeader_FileTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHeader_FileTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_FileTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_FileTable_descriptor_;
}

const SectionHeader_FileTable& SectionHeader_FileTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_FileTable* SectionHeader_FileTable::default_instance_ = NULL;

SectionHeader_FileTable* SectionHeader_FileTable::New() const {
  return new SectionHeader_FileTable;
}

void SectionHeader_FileTable::Clear() {
  file_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_FileTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Head.SectionHeader.FileTable.File file_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_file_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_FileTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Head.SectionHeader.FileTable.File file_list = 1;
  for (int i = 0; i < this->file_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_FileTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Head.SectionHeader.FileTable.File file_list = 1;
  for (int i = 0; i < this->file_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_FileTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Head.SectionHeader.FileTable.File file_list = 1;
  total_size += 1 * this->file_list_size();
  for (int i = 0; i < this->file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_FileTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_FileTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_FileTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_FileTable::MergeFrom(const SectionHeader_FileTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_list_.MergeFrom(from.file_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_FileTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_FileTable::CopyFrom(const SectionHeader_FileTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_FileTable::IsInitialized() const {
  
  for (int i = 0; i < file_list_size(); i++) {
    if (!this->file_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_FileTable::Swap(SectionHeader_FileTable* other) {
  if (other != this) {
    file_list_.Swap(&other->file_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_FileTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_FileTable_descriptor_;
  metadata.reflection = SectionHeader_FileTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_ProcedureTable_Procedure::kIdFieldNumber;
const int SectionHeader_ProcedureTable_Procedure::kNameFieldNumber;
const int SectionHeader_ProcedureTable_Procedure::kInfoFieldNumber;
#endif  // !_MSC_VER

SectionHeader_ProcedureTable_Procedure::SectionHeader_ProcedureTable_Procedure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_ProcedureTable_Procedure::InitAsDefaultInstance() {
  info_ = const_cast< ::Head::SectionHeader_Info*>(&::Head::SectionHeader_Info::default_instance());
}

SectionHeader_ProcedureTable_Procedure::SectionHeader_ProcedureTable_Procedure(const SectionHeader_ProcedureTable_Procedure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_ProcedureTable_Procedure::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_ProcedureTable_Procedure::~SectionHeader_ProcedureTable_Procedure() {
  SharedDtor();
}

void SectionHeader_ProcedureTable_Procedure::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void SectionHeader_ProcedureTable_Procedure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_ProcedureTable_Procedure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_ProcedureTable_Procedure_descriptor_;
}

const SectionHeader_ProcedureTable_Procedure& SectionHeader_ProcedureTable_Procedure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_ProcedureTable_Procedure* SectionHeader_ProcedureTable_Procedure::default_instance_ = NULL;

SectionHeader_ProcedureTable_Procedure* SectionHeader_ProcedureTable_Procedure::New() const {
  return new SectionHeader_ProcedureTable_Procedure;
}

void SectionHeader_ProcedureTable_Procedure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_ProcedureTable_Procedure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional .Head.SectionHeader.Info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_ProcedureTable_Procedure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_ProcedureTable_Procedure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional .Head.SectionHeader.Info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_ProcedureTable_Procedure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .Head.SectionHeader.Info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_ProcedureTable_Procedure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_ProcedureTable_Procedure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_ProcedureTable_Procedure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_ProcedureTable_Procedure::MergeFrom(const SectionHeader_ProcedureTable_Procedure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      mutable_info()->::Head::SectionHeader_Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_ProcedureTable_Procedure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_ProcedureTable_Procedure::CopyFrom(const SectionHeader_ProcedureTable_Procedure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_ProcedureTable_Procedure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_ProcedureTable_Procedure::Swap(SectionHeader_ProcedureTable_Procedure* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_ProcedureTable_Procedure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_ProcedureTable_Procedure_descriptor_;
  metadata.reflection = SectionHeader_ProcedureTable_Procedure_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader_ProcedureTable::kProcedureListFieldNumber;
#endif  // !_MSC_VER

SectionHeader_ProcedureTable::SectionHeader_ProcedureTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader_ProcedureTable::InitAsDefaultInstance() {
}

SectionHeader_ProcedureTable::SectionHeader_ProcedureTable(const SectionHeader_ProcedureTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader_ProcedureTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader_ProcedureTable::~SectionHeader_ProcedureTable() {
  SharedDtor();
}

void SectionHeader_ProcedureTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SectionHeader_ProcedureTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader_ProcedureTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_ProcedureTable_descriptor_;
}

const SectionHeader_ProcedureTable& SectionHeader_ProcedureTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader_ProcedureTable* SectionHeader_ProcedureTable::default_instance_ = NULL;

SectionHeader_ProcedureTable* SectionHeader_ProcedureTable::New() const {
  return new SectionHeader_ProcedureTable;
}

void SectionHeader_ProcedureTable::Clear() {
  procedure_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader_ProcedureTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Head.SectionHeader.ProcedureTable.Procedure procedure_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_procedure_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_procedure_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_procedure_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader_ProcedureTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Head.SectionHeader.ProcedureTable.Procedure procedure_list = 1;
  for (int i = 0; i < this->procedure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->procedure_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader_ProcedureTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Head.SectionHeader.ProcedureTable.Procedure procedure_list = 1;
  for (int i = 0; i < this->procedure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->procedure_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader_ProcedureTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .Head.SectionHeader.ProcedureTable.Procedure procedure_list = 1;
  total_size += 1 * this->procedure_list_size();
  for (int i = 0; i < this->procedure_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->procedure_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader_ProcedureTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader_ProcedureTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader_ProcedureTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader_ProcedureTable::MergeFrom(const SectionHeader_ProcedureTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  procedure_list_.MergeFrom(from.procedure_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader_ProcedureTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader_ProcedureTable::CopyFrom(const SectionHeader_ProcedureTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader_ProcedureTable::IsInitialized() const {
  
  for (int i = 0; i < procedure_list_size(); i++) {
    if (!this->procedure_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader_ProcedureTable::Swap(SectionHeader_ProcedureTable* other) {
  if (other != this) {
    procedure_list_.Swap(&other->procedure_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader_ProcedureTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_ProcedureTable_descriptor_;
  metadata.reflection = SectionHeader_ProcedureTable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SectionHeader::kMTableFieldNumber;
const int SectionHeader::kMDbTableFieldNumber;
const int SectionHeader::kTDbTableFieldNumber;
const int SectionHeader::kLmTableFieldNumber;
const int SectionHeader::kFTableFieldNumber;
const int SectionHeader::kPTableFieldNumber;
const int SectionHeader::kInfoListFieldNumber;
const int SectionHeader::kIdFieldNumber;
const int SectionHeader::kNameFieldNumber;
#endif  // !_MSC_VER

SectionHeader::SectionHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectionHeader::InitAsDefaultInstance() {
  m_table_ = const_cast< ::Head::SectionHeader_MetricTable*>(&::Head::SectionHeader_MetricTable::default_instance());
  m_db_table_ = const_cast< ::Head::SectionHeader_MetricDBTable*>(&::Head::SectionHeader_MetricDBTable::default_instance());
  t_db_table_ = const_cast< ::Head::SectionHeader_TraceDBTable*>(&::Head::SectionHeader_TraceDBTable::default_instance());
  lm_table_ = const_cast< ::Head::SectionHeader_LoadModuleTable*>(&::Head::SectionHeader_LoadModuleTable::default_instance());
  f_table_ = const_cast< ::Head::SectionHeader_FileTable*>(&::Head::SectionHeader_FileTable::default_instance());
  p_table_ = const_cast< ::Head::SectionHeader_ProcedureTable*>(&::Head::SectionHeader_ProcedureTable::default_instance());
}

SectionHeader::SectionHeader(const SectionHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectionHeader::SharedCtor() {
  _cached_size_ = 0;
  m_table_ = NULL;
  m_db_table_ = NULL;
  t_db_table_ = NULL;
  lm_table_ = NULL;
  f_table_ = NULL;
  p_table_ = NULL;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectionHeader::~SectionHeader() {
  SharedDtor();
}

void SectionHeader::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete m_table_;
    delete m_db_table_;
    delete t_db_table_;
    delete lm_table_;
    delete f_table_;
    delete p_table_;
  }
}

void SectionHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectionHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectionHeader_descriptor_;
}

const SectionHeader& SectionHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Metric_2dMgr_2eproto();  return *default_instance_;
}

SectionHeader* SectionHeader::default_instance_ = NULL;

SectionHeader* SectionHeader::New() const {
  return new SectionHeader;
}

void SectionHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_table()) {
      if (m_table_ != NULL) m_table_->::Head::SectionHeader_MetricTable::Clear();
    }
    if (has_m_db_table()) {
      if (m_db_table_ != NULL) m_db_table_->::Head::SectionHeader_MetricDBTable::Clear();
    }
    if (has_t_db_table()) {
      if (t_db_table_ != NULL) t_db_table_->::Head::SectionHeader_TraceDBTable::Clear();
    }
    if (has_lm_table()) {
      if (lm_table_ != NULL) lm_table_->::Head::SectionHeader_LoadModuleTable::Clear();
    }
    if (has_f_table()) {
      if (f_table_ != NULL) f_table_->::Head::SectionHeader_FileTable::Clear();
    }
    if (has_p_table()) {
      if (p_table_ != NULL) p_table_->::Head::SectionHeader_ProcedureTable::Clear();
    }
    id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectionHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Head.SectionHeader.MetricTable m_table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_db_table;
        break;
      }
      
      // optional .Head.SectionHeader.MetricDBTable m_db_table = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_db_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_db_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_t_db_table;
        break;
      }
      
      // optional .Head.SectionHeader.TraceDBTable t_db_table = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_db_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t_db_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lm_table;
        break;
      }
      
      // optional .Head.SectionHeader.LoadModuleTable lm_table = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lm_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lm_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_f_table;
        break;
      }
      
      // optional .Head.SectionHeader.FileTable f_table = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_f_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_f_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_p_table;
        break;
      }
      
      // optional .Head.SectionHeader.ProcedureTable p_table = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info_list;
        break;
      }
      
      // repeated .Head.SectionHeader.Info info_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info_list;
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }
      
      // optional int32 id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectionHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Head.SectionHeader.MetricTable m_table = 1;
  if (has_m_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_table(), output);
  }
  
  // optional .Head.SectionHeader.MetricDBTable m_db_table = 2;
  if (has_m_db_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_db_table(), output);
  }
  
  // optional .Head.SectionHeader.TraceDBTable t_db_table = 3;
  if (has_t_db_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->t_db_table(), output);
  }
  
  // optional .Head.SectionHeader.LoadModuleTable lm_table = 4;
  if (has_lm_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lm_table(), output);
  }
  
  // optional .Head.SectionHeader.FileTable f_table = 5;
  if (has_f_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->f_table(), output);
  }
  
  // optional .Head.SectionHeader.ProcedureTable p_table = 6;
  if (has_p_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->p_table(), output);
  }
  
  // repeated .Head.SectionHeader.Info info_list = 7;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->info_list(i), output);
  }
  
  // optional int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectionHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Head.SectionHeader.MetricTable m_table = 1;
  if (has_m_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_table(), target);
  }
  
  // optional .Head.SectionHeader.MetricDBTable m_db_table = 2;
  if (has_m_db_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_db_table(), target);
  }
  
  // optional .Head.SectionHeader.TraceDBTable t_db_table = 3;
  if (has_t_db_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->t_db_table(), target);
  }
  
  // optional .Head.SectionHeader.LoadModuleTable lm_table = 4;
  if (has_lm_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lm_table(), target);
  }
  
  // optional .Head.SectionHeader.FileTable f_table = 5;
  if (has_f_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->f_table(), target);
  }
  
  // optional .Head.SectionHeader.ProcedureTable p_table = 6;
  if (has_p_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->p_table(), target);
  }
  
  // repeated .Head.SectionHeader.Info info_list = 7;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->info_list(i), target);
  }
  
  // optional int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectionHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Head.SectionHeader.MetricTable m_table = 1;
    if (has_m_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_table());
    }
    
    // optional .Head.SectionHeader.MetricDBTable m_db_table = 2;
    if (has_m_db_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_db_table());
    }
    
    // optional .Head.SectionHeader.TraceDBTable t_db_table = 3;
    if (has_t_db_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t_db_table());
    }
    
    // optional .Head.SectionHeader.LoadModuleTable lm_table = 4;
    if (has_lm_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lm_table());
    }
    
    // optional .Head.SectionHeader.FileTable f_table = 5;
    if (has_f_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->f_table());
    }
    
    // optional .Head.SectionHeader.ProcedureTable p_table = 6;
    if (has_p_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p_table());
    }
    
    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .Head.SectionHeader.Info info_list = 7;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectionHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectionHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectionHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectionHeader::MergeFrom(const SectionHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_table()) {
      mutable_m_table()->::Head::SectionHeader_MetricTable::MergeFrom(from.m_table());
    }
    if (from.has_m_db_table()) {
      mutable_m_db_table()->::Head::SectionHeader_MetricDBTable::MergeFrom(from.m_db_table());
    }
    if (from.has_t_db_table()) {
      mutable_t_db_table()->::Head::SectionHeader_TraceDBTable::MergeFrom(from.t_db_table());
    }
    if (from.has_lm_table()) {
      mutable_lm_table()->::Head::SectionHeader_LoadModuleTable::MergeFrom(from.lm_table());
    }
    if (from.has_f_table()) {
      mutable_f_table()->::Head::SectionHeader_FileTable::MergeFrom(from.f_table());
    }
    if (from.has_p_table()) {
      mutable_p_table()->::Head::SectionHeader_ProcedureTable::MergeFrom(from.p_table());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectionHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectionHeader::CopyFrom(const SectionHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionHeader::IsInitialized() const {
  
  if (has_m_table()) {
    if (!this->m_table().IsInitialized()) return false;
  }
  if (has_m_db_table()) {
    if (!this->m_db_table().IsInitialized()) return false;
  }
  if (has_t_db_table()) {
    if (!this->t_db_table().IsInitialized()) return false;
  }
  if (has_lm_table()) {
    if (!this->lm_table().IsInitialized()) return false;
  }
  if (has_f_table()) {
    if (!this->f_table().IsInitialized()) return false;
  }
  if (has_p_table()) {
    if (!this->p_table().IsInitialized()) return false;
  }
  for (int i = 0; i < info_list_size(); i++) {
    if (!this->info_list(i).IsInitialized()) return false;
  }
  return true;
}

void SectionHeader::Swap(SectionHeader* other) {
  if (other != this) {
    std::swap(m_table_, other->m_table_);
    std::swap(m_db_table_, other->m_db_table_);
    std::swap(t_db_table_, other->t_db_table_);
    std::swap(lm_table_, other->lm_table_);
    std::swap(f_table_, other->f_table_);
    std::swap(p_table_, other->p_table_);
    info_list_.Swap(&other->info_list_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectionHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectionHeader_descriptor_;
  metadata.reflection = SectionHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Head

// @@protoc_insertion_point(global_scope)
