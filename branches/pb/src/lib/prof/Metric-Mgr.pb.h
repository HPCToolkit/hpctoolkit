// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Metric-Mgr.proto

#ifndef PROTOBUF_Metric_2dMgr_2eproto__INCLUDED
#define PROTOBUF_Metric_2dMgr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Head {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Metric_2dMgr_2eproto();
void protobuf_AssignDesc_Metric_2dMgr_2eproto();
void protobuf_ShutdownFile_Metric_2dMgr_2eproto();

class SectionHeader;
class SectionHeader_Info;
class SectionHeader_Info_NameValue;
class SectionHeader_MetricTable;
class SectionHeader_MetricTable_Metric;
class SectionHeader_MetricTable_Metric_MetricFormula;
class SectionHeader_MetricDBTable;
class SectionHeader_MetricDBTable_MetricDB;
class SectionHeader_TraceDBTable;
class SectionHeader_TraceDBTable_TraceDB;
class SectionHeader_LoadModuleTable;
class SectionHeader_LoadModuleTable_LoadModule;
class SectionHeader_FileTable;
class SectionHeader_FileTable_File;
class SectionHeader_ProcedureTable;
class SectionHeader_ProcedureTable_Procedure;

// ===================================================================

class SectionHeader_Info_NameValue : public ::google::protobuf::Message {
 public:
  SectionHeader_Info_NameValue();
  virtual ~SectionHeader_Info_NameValue();
  
  SectionHeader_Info_NameValue(const SectionHeader_Info_NameValue& from);
  
  inline SectionHeader_Info_NameValue& operator=(const SectionHeader_Info_NameValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_Info_NameValue& default_instance();
  
  void Swap(SectionHeader_Info_NameValue* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_Info_NameValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_Info_NameValue& from);
  void MergeFrom(const SectionHeader_Info_NameValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // optional string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.Info.NameValue)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  ::std::string* type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_Info_NameValue* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_Info : public ::google::protobuf::Message {
 public:
  SectionHeader_Info();
  virtual ~SectionHeader_Info();
  
  SectionHeader_Info(const SectionHeader_Info& from);
  
  inline SectionHeader_Info& operator=(const SectionHeader_Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_Info& default_instance();
  
  void Swap(SectionHeader_Info* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_Info& from);
  void MergeFrom(const SectionHeader_Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_Info_NameValue NameValue;
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .Head.SectionHeader.Info.NameValue nv_list = 2;
  inline int nv_list_size() const;
  inline void clear_nv_list();
  static const int kNvListFieldNumber = 2;
  inline const ::Head::SectionHeader_Info_NameValue& nv_list(int index) const;
  inline ::Head::SectionHeader_Info_NameValue* mutable_nv_list(int index);
  inline ::Head::SectionHeader_Info_NameValue* add_nv_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info_NameValue >&
      nv_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info_NameValue >*
      mutable_nv_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.Info)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info_NameValue > nv_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_Info* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_MetricTable_Metric_MetricFormula : public ::google::protobuf::Message {
 public:
  SectionHeader_MetricTable_Metric_MetricFormula();
  virtual ~SectionHeader_MetricTable_Metric_MetricFormula();
  
  SectionHeader_MetricTable_Metric_MetricFormula(const SectionHeader_MetricTable_Metric_MetricFormula& from);
  
  inline SectionHeader_MetricTable_Metric_MetricFormula& operator=(const SectionHeader_MetricTable_Metric_MetricFormula& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_MetricTable_Metric_MetricFormula& default_instance();
  
  void Swap(SectionHeader_MetricTable_Metric_MetricFormula* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_MetricTable_Metric_MetricFormula* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_MetricTable_Metric_MetricFormula& from);
  void MergeFrom(const SectionHeader_MetricTable_Metric_MetricFormula& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline bool type() const;
  inline void set_type(bool value);
  
  // required string formula = 2;
  inline bool has_formula() const;
  inline void clear_formula();
  static const int kFormulaFieldNumber = 2;
  inline const ::std::string& formula() const;
  inline void set_formula(const ::std::string& value);
  inline void set_formula(const char* value);
  inline void set_formula(const char* value, size_t size);
  inline ::std::string* mutable_formula();
  inline ::std::string* release_formula();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.MetricTable.Metric.MetricFormula)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_formula();
  inline void clear_has_formula();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* formula_;
  bool type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_MetricTable_Metric_MetricFormula* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_MetricTable_Metric : public ::google::protobuf::Message {
 public:
  SectionHeader_MetricTable_Metric();
  virtual ~SectionHeader_MetricTable_Metric();
  
  SectionHeader_MetricTable_Metric(const SectionHeader_MetricTable_Metric& from);
  
  inline SectionHeader_MetricTable_Metric& operator=(const SectionHeader_MetricTable_Metric& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_MetricTable_Metric& default_instance();
  
  void Swap(SectionHeader_MetricTable_Metric* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_MetricTable_Metric* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_MetricTable_Metric& from);
  void MergeFrom(const SectionHeader_MetricTable_Metric& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_MetricTable_Metric_MetricFormula MetricFormula;
  
  // accessors -------------------------------------------------------
  
  // optional bool show_percent = 1 [default = true];
  inline bool has_show_percent() const;
  inline void clear_show_percent();
  static const int kShowPercentFieldNumber = 1;
  inline bool show_percent() const;
  inline void set_show_percent(bool value);
  
  // repeated .Head.SectionHeader.MetricTable.Metric.MetricFormula metric_formula_list = 2;
  inline int metric_formula_list_size() const;
  inline void clear_metric_formula_list();
  static const int kMetricFormulaListFieldNumber = 2;
  inline const ::Head::SectionHeader_MetricTable_Metric_MetricFormula& metric_formula_list(int index) const;
  inline ::Head::SectionHeader_MetricTable_Metric_MetricFormula* mutable_metric_formula_list(int index);
  inline ::Head::SectionHeader_MetricTable_Metric_MetricFormula* add_metric_formula_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric_MetricFormula >&
      metric_formula_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric_MetricFormula >*
      mutable_metric_formula_list();
  
  // optional .Head.SectionHeader.Info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Head::SectionHeader_Info& info() const;
  inline ::Head::SectionHeader_Info* mutable_info();
  inline ::Head::SectionHeader_Info* release_info();
  
  // required int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 value = 6 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int32 type = 7 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 partner = 8;
  inline bool has_partner() const;
  inline void clear_partner();
  static const int kPartnerFieldNumber = 8;
  inline ::google::protobuf::int32 partner() const;
  inline void set_partner(::google::protobuf::int32 value);
  
  // optional int32 fmt = 9;
  inline bool has_fmt() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 9;
  inline ::google::protobuf::int32 fmt() const;
  inline void set_fmt(::google::protobuf::int32 value);
  
  // optional bool show = 10 [default = true];
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 10;
  inline bool show() const;
  inline void set_show(bool value);
  
  // optional string basename = 11;
  inline bool has_basename() const;
  inline void clear_basename();
  static const int kBasenameFieldNumber = 11;
  inline const ::std::string& basename() const;
  inline void set_basename(const ::std::string& value);
  inline void set_basename(const char* value);
  inline void set_basename(const char* value, size_t size);
  inline ::std::string* mutable_basename();
  inline ::std::string* release_basename();
  
  // optional string suffix = 12;
  inline bool has_suffix() const;
  inline void clear_suffix();
  static const int kSuffixFieldNumber = 12;
  inline const ::std::string& suffix() const;
  inline void set_suffix(const ::std::string& value);
  inline void set_suffix(const char* value);
  inline void set_suffix(const char* value, size_t size);
  inline ::std::string* mutable_suffix();
  inline ::std::string* release_suffix();
  
  // optional string prefix = 13;
  inline bool has_prefix() const;
  inline void clear_prefix();
  static const int kPrefixFieldNumber = 13;
  inline const ::std::string& prefix() const;
  inline void set_prefix(const ::std::string& value);
  inline void set_prefix(const char* value);
  inline void set_prefix(const char* value, size_t size);
  inline ::std::string* mutable_prefix();
  inline ::std::string* release_prefix();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.MetricTable.Metric)
 private:
  inline void set_has_show_percent();
  inline void clear_has_show_percent();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_partner();
  inline void clear_has_partner();
  inline void set_has_fmt();
  inline void clear_has_fmt();
  inline void set_has_show();
  inline void clear_has_show();
  inline void set_has_basename();
  inline void clear_has_basename();
  inline void set_has_suffix();
  inline void clear_has_suffix();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric_MetricFormula > metric_formula_list_;
  ::Head::SectionHeader_Info* info_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  bool show_percent_;
  bool show_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 partner_;
  ::google::protobuf::int32 fmt_;
  ::std::string* basename_;
  ::std::string* suffix_;
  ::std::string* prefix_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_MetricTable_Metric* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_MetricTable : public ::google::protobuf::Message {
 public:
  SectionHeader_MetricTable();
  virtual ~SectionHeader_MetricTable();
  
  SectionHeader_MetricTable(const SectionHeader_MetricTable& from);
  
  inline SectionHeader_MetricTable& operator=(const SectionHeader_MetricTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_MetricTable& default_instance();
  
  void Swap(SectionHeader_MetricTable* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_MetricTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_MetricTable& from);
  void MergeFrom(const SectionHeader_MetricTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_MetricTable_Metric Metric;
  
  // accessors -------------------------------------------------------
  
  // repeated .Head.SectionHeader.MetricTable.Metric m_list = 1;
  inline int m_list_size() const;
  inline void clear_m_list();
  static const int kMListFieldNumber = 1;
  inline const ::Head::SectionHeader_MetricTable_Metric& m_list(int index) const;
  inline ::Head::SectionHeader_MetricTable_Metric* mutable_m_list(int index);
  inline ::Head::SectionHeader_MetricTable_Metric* add_m_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric >&
      m_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric >*
      mutable_m_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.MetricTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric > m_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_MetricTable* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_MetricDBTable_MetricDB : public ::google::protobuf::Message {
 public:
  SectionHeader_MetricDBTable_MetricDB();
  virtual ~SectionHeader_MetricDBTable_MetricDB();
  
  SectionHeader_MetricDBTable_MetricDB(const SectionHeader_MetricDBTable_MetricDB& from);
  
  inline SectionHeader_MetricDBTable_MetricDB& operator=(const SectionHeader_MetricDBTable_MetricDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_MetricDBTable_MetricDB& default_instance();
  
  void Swap(SectionHeader_MetricDBTable_MetricDB* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_MetricDBTable_MetricDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_MetricDBTable_MetricDB& from);
  void MergeFrom(const SectionHeader_MetricDBTable_MetricDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string db_glob = 3;
  inline bool has_db_glob() const;
  inline void clear_db_glob();
  static const int kDbGlobFieldNumber = 3;
  inline const ::std::string& db_glob() const;
  inline void set_db_glob(const ::std::string& value);
  inline void set_db_glob(const char* value);
  inline void set_db_glob(const char* value, size_t size);
  inline ::std::string* mutable_db_glob();
  inline ::std::string* release_db_glob();
  
  // optional int32 db_num_metrics = 4;
  inline bool has_db_num_metrics() const;
  inline void clear_db_num_metrics();
  static const int kDbNumMetricsFieldNumber = 4;
  inline ::google::protobuf::int32 db_num_metrics() const;
  inline void set_db_num_metrics(::google::protobuf::int32 value);
  
  // optional int32 db_header_sz = 5;
  inline bool has_db_header_sz() const;
  inline void clear_db_header_sz();
  static const int kDbHeaderSzFieldNumber = 5;
  inline ::google::protobuf::int32 db_header_sz() const;
  inline void set_db_header_sz(::google::protobuf::int32 value);
  
  // optional int32 db_id = 6;
  inline bool has_db_id() const;
  inline void clear_db_id();
  static const int kDbIdFieldNumber = 6;
  inline ::google::protobuf::int32 db_id() const;
  inline void set_db_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.MetricDBTable.MetricDB)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_db_glob();
  inline void clear_has_db_glob();
  inline void set_has_db_num_metrics();
  inline void clear_has_db_num_metrics();
  inline void set_has_db_header_sz();
  inline void clear_has_db_header_sz();
  inline void set_has_db_id();
  inline void clear_has_db_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 db_num_metrics_;
  ::std::string* db_glob_;
  ::google::protobuf::int32 db_header_sz_;
  ::google::protobuf::int32 db_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_MetricDBTable_MetricDB* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_MetricDBTable : public ::google::protobuf::Message {
 public:
  SectionHeader_MetricDBTable();
  virtual ~SectionHeader_MetricDBTable();
  
  SectionHeader_MetricDBTable(const SectionHeader_MetricDBTable& from);
  
  inline SectionHeader_MetricDBTable& operator=(const SectionHeader_MetricDBTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_MetricDBTable& default_instance();
  
  void Swap(SectionHeader_MetricDBTable* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_MetricDBTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_MetricDBTable& from);
  void MergeFrom(const SectionHeader_MetricDBTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_MetricDBTable_MetricDB MetricDB;
  
  // accessors -------------------------------------------------------
  
  // repeated .Head.SectionHeader.MetricDBTable.MetricDB metric_db_list = 1;
  inline int metric_db_list_size() const;
  inline void clear_metric_db_list();
  static const int kMetricDbListFieldNumber = 1;
  inline const ::Head::SectionHeader_MetricDBTable_MetricDB& metric_db_list(int index) const;
  inline ::Head::SectionHeader_MetricDBTable_MetricDB* mutable_metric_db_list(int index);
  inline ::Head::SectionHeader_MetricDBTable_MetricDB* add_metric_db_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricDBTable_MetricDB >&
      metric_db_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricDBTable_MetricDB >*
      mutable_metric_db_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.MetricDBTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricDBTable_MetricDB > metric_db_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_MetricDBTable* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_TraceDBTable_TraceDB : public ::google::protobuf::Message {
 public:
  SectionHeader_TraceDBTable_TraceDB();
  virtual ~SectionHeader_TraceDBTable_TraceDB();
  
  SectionHeader_TraceDBTable_TraceDB(const SectionHeader_TraceDBTable_TraceDB& from);
  
  inline SectionHeader_TraceDBTable_TraceDB& operator=(const SectionHeader_TraceDBTable_TraceDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_TraceDBTable_TraceDB& default_instance();
  
  void Swap(SectionHeader_TraceDBTable_TraceDB* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_TraceDBTable_TraceDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_TraceDBTable_TraceDB& from);
  void MergeFrom(const SectionHeader_TraceDBTable_TraceDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string db_glob = 2;
  inline bool has_db_glob() const;
  inline void clear_db_glob();
  static const int kDbGlobFieldNumber = 2;
  inline const ::std::string& db_glob() const;
  inline void set_db_glob(const ::std::string& value);
  inline void set_db_glob(const char* value);
  inline void set_db_glob(const char* value, size_t size);
  inline ::std::string* mutable_db_glob();
  inline ::std::string* release_db_glob();
  
  // optional uint64 db_min_time = 3;
  inline bool has_db_min_time() const;
  inline void clear_db_min_time();
  static const int kDbMinTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 db_min_time() const;
  inline void set_db_min_time(::google::protobuf::uint64 value);
  
  // optional uint64 db_max_time = 4;
  inline bool has_db_max_time() const;
  inline void clear_db_max_time();
  static const int kDbMaxTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 db_max_time() const;
  inline void set_db_max_time(::google::protobuf::uint64 value);
  
  // optional int32 db_header_sz = 5;
  inline bool has_db_header_sz() const;
  inline void clear_db_header_sz();
  static const int kDbHeaderSzFieldNumber = 5;
  inline ::google::protobuf::int32 db_header_sz() const;
  inline void set_db_header_sz(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.TraceDBTable.TraceDB)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_db_glob();
  inline void clear_has_db_glob();
  inline void set_has_db_min_time();
  inline void clear_has_db_min_time();
  inline void set_has_db_max_time();
  inline void clear_has_db_max_time();
  inline void set_has_db_header_sz();
  inline void clear_has_db_header_sz();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* db_glob_;
  ::google::protobuf::uint64 db_min_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 db_header_sz_;
  ::google::protobuf::uint64 db_max_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_TraceDBTable_TraceDB* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_TraceDBTable : public ::google::protobuf::Message {
 public:
  SectionHeader_TraceDBTable();
  virtual ~SectionHeader_TraceDBTable();
  
  SectionHeader_TraceDBTable(const SectionHeader_TraceDBTable& from);
  
  inline SectionHeader_TraceDBTable& operator=(const SectionHeader_TraceDBTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_TraceDBTable& default_instance();
  
  void Swap(SectionHeader_TraceDBTable* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_TraceDBTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_TraceDBTable& from);
  void MergeFrom(const SectionHeader_TraceDBTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_TraceDBTable_TraceDB TraceDB;
  
  // accessors -------------------------------------------------------
  
  // repeated .Head.SectionHeader.TraceDBTable.TraceDB trace_db_list = 1;
  inline int trace_db_list_size() const;
  inline void clear_trace_db_list();
  static const int kTraceDbListFieldNumber = 1;
  inline const ::Head::SectionHeader_TraceDBTable_TraceDB& trace_db_list(int index) const;
  inline ::Head::SectionHeader_TraceDBTable_TraceDB* mutable_trace_db_list(int index);
  inline ::Head::SectionHeader_TraceDBTable_TraceDB* add_trace_db_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_TraceDBTable_TraceDB >&
      trace_db_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_TraceDBTable_TraceDB >*
      mutable_trace_db_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.TraceDBTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_TraceDBTable_TraceDB > trace_db_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_TraceDBTable* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_LoadModuleTable_LoadModule : public ::google::protobuf::Message {
 public:
  SectionHeader_LoadModuleTable_LoadModule();
  virtual ~SectionHeader_LoadModuleTable_LoadModule();
  
  SectionHeader_LoadModuleTable_LoadModule(const SectionHeader_LoadModuleTable_LoadModule& from);
  
  inline SectionHeader_LoadModuleTable_LoadModule& operator=(const SectionHeader_LoadModuleTable_LoadModule& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_LoadModuleTable_LoadModule& default_instance();
  
  void Swap(SectionHeader_LoadModuleTable_LoadModule* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_LoadModuleTable_LoadModule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_LoadModuleTable_LoadModule& from);
  void MergeFrom(const SectionHeader_LoadModuleTable_LoadModule& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .Head.SectionHeader.Info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Head::SectionHeader_Info& info() const;
  inline ::Head::SectionHeader_Info* mutable_info();
  inline ::Head::SectionHeader_Info* release_info();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.LoadModuleTable.LoadModule)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::Head::SectionHeader_Info* info_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_LoadModuleTable_LoadModule* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_LoadModuleTable : public ::google::protobuf::Message {
 public:
  SectionHeader_LoadModuleTable();
  virtual ~SectionHeader_LoadModuleTable();
  
  SectionHeader_LoadModuleTable(const SectionHeader_LoadModuleTable& from);
  
  inline SectionHeader_LoadModuleTable& operator=(const SectionHeader_LoadModuleTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_LoadModuleTable& default_instance();
  
  void Swap(SectionHeader_LoadModuleTable* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_LoadModuleTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_LoadModuleTable& from);
  void MergeFrom(const SectionHeader_LoadModuleTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_LoadModuleTable_LoadModule LoadModule;
  
  // accessors -------------------------------------------------------
  
  // repeated .Head.SectionHeader.LoadModuleTable.LoadModule load_module_list = 1;
  inline int load_module_list_size() const;
  inline void clear_load_module_list();
  static const int kLoadModuleListFieldNumber = 1;
  inline const ::Head::SectionHeader_LoadModuleTable_LoadModule& load_module_list(int index) const;
  inline ::Head::SectionHeader_LoadModuleTable_LoadModule* mutable_load_module_list(int index);
  inline ::Head::SectionHeader_LoadModuleTable_LoadModule* add_load_module_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_LoadModuleTable_LoadModule >&
      load_module_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_LoadModuleTable_LoadModule >*
      mutable_load_module_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.LoadModuleTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_LoadModuleTable_LoadModule > load_module_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_LoadModuleTable* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_FileTable_File : public ::google::protobuf::Message {
 public:
  SectionHeader_FileTable_File();
  virtual ~SectionHeader_FileTable_File();
  
  SectionHeader_FileTable_File(const SectionHeader_FileTable_File& from);
  
  inline SectionHeader_FileTable_File& operator=(const SectionHeader_FileTable_File& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_FileTable_File& default_instance();
  
  void Swap(SectionHeader_FileTable_File* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_FileTable_File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_FileTable_File& from);
  void MergeFrom(const SectionHeader_FileTable_File& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .Head.SectionHeader.Info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Head::SectionHeader_Info& info() const;
  inline ::Head::SectionHeader_Info* mutable_info();
  inline ::Head::SectionHeader_Info* release_info();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.FileTable.File)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::Head::SectionHeader_Info* info_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_FileTable_File* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_FileTable : public ::google::protobuf::Message {
 public:
  SectionHeader_FileTable();
  virtual ~SectionHeader_FileTable();
  
  SectionHeader_FileTable(const SectionHeader_FileTable& from);
  
  inline SectionHeader_FileTable& operator=(const SectionHeader_FileTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_FileTable& default_instance();
  
  void Swap(SectionHeader_FileTable* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_FileTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_FileTable& from);
  void MergeFrom(const SectionHeader_FileTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_FileTable_File File;
  
  // accessors -------------------------------------------------------
  
  // repeated .Head.SectionHeader.FileTable.File file_list = 1;
  inline int file_list_size() const;
  inline void clear_file_list();
  static const int kFileListFieldNumber = 1;
  inline const ::Head::SectionHeader_FileTable_File& file_list(int index) const;
  inline ::Head::SectionHeader_FileTable_File* mutable_file_list(int index);
  inline ::Head::SectionHeader_FileTable_File* add_file_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_FileTable_File >&
      file_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_FileTable_File >*
      mutable_file_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.FileTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_FileTable_File > file_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_FileTable* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_ProcedureTable_Procedure : public ::google::protobuf::Message {
 public:
  SectionHeader_ProcedureTable_Procedure();
  virtual ~SectionHeader_ProcedureTable_Procedure();
  
  SectionHeader_ProcedureTable_Procedure(const SectionHeader_ProcedureTable_Procedure& from);
  
  inline SectionHeader_ProcedureTable_Procedure& operator=(const SectionHeader_ProcedureTable_Procedure& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_ProcedureTable_Procedure& default_instance();
  
  void Swap(SectionHeader_ProcedureTable_Procedure* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_ProcedureTable_Procedure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_ProcedureTable_Procedure& from);
  void MergeFrom(const SectionHeader_ProcedureTable_Procedure& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .Head.SectionHeader.Info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Head::SectionHeader_Info& info() const;
  inline ::Head::SectionHeader_Info* mutable_info();
  inline ::Head::SectionHeader_Info* release_info();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.ProcedureTable.Procedure)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::Head::SectionHeader_Info* info_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_ProcedureTable_Procedure* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader_ProcedureTable : public ::google::protobuf::Message {
 public:
  SectionHeader_ProcedureTable();
  virtual ~SectionHeader_ProcedureTable();
  
  SectionHeader_ProcedureTable(const SectionHeader_ProcedureTable& from);
  
  inline SectionHeader_ProcedureTable& operator=(const SectionHeader_ProcedureTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader_ProcedureTable& default_instance();
  
  void Swap(SectionHeader_ProcedureTable* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader_ProcedureTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader_ProcedureTable& from);
  void MergeFrom(const SectionHeader_ProcedureTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_ProcedureTable_Procedure Procedure;
  
  // accessors -------------------------------------------------------
  
  // repeated .Head.SectionHeader.ProcedureTable.Procedure procedure_list = 1;
  inline int procedure_list_size() const;
  inline void clear_procedure_list();
  static const int kProcedureListFieldNumber = 1;
  inline const ::Head::SectionHeader_ProcedureTable_Procedure& procedure_list(int index) const;
  inline ::Head::SectionHeader_ProcedureTable_Procedure* mutable_procedure_list(int index);
  inline ::Head::SectionHeader_ProcedureTable_Procedure* add_procedure_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_ProcedureTable_Procedure >&
      procedure_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_ProcedureTable_Procedure >*
      mutable_procedure_list();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader.ProcedureTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_ProcedureTable_Procedure > procedure_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader_ProcedureTable* default_instance_;
};
// -------------------------------------------------------------------

class SectionHeader : public ::google::protobuf::Message {
 public:
  SectionHeader();
  virtual ~SectionHeader();
  
  SectionHeader(const SectionHeader& from);
  
  inline SectionHeader& operator=(const SectionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectionHeader& default_instance();
  
  void Swap(SectionHeader* other);
  
  // implements Message ----------------------------------------------
  
  SectionHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectionHeader& from);
  void MergeFrom(const SectionHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SectionHeader_Info Info;
  typedef SectionHeader_MetricTable MetricTable;
  typedef SectionHeader_MetricDBTable MetricDBTable;
  typedef SectionHeader_TraceDBTable TraceDBTable;
  typedef SectionHeader_LoadModuleTable LoadModuleTable;
  typedef SectionHeader_FileTable FileTable;
  typedef SectionHeader_ProcedureTable ProcedureTable;
  
  // accessors -------------------------------------------------------
  
  // optional .Head.SectionHeader.MetricTable m_table = 1;
  inline bool has_m_table() const;
  inline void clear_m_table();
  static const int kMTableFieldNumber = 1;
  inline const ::Head::SectionHeader_MetricTable& m_table() const;
  inline ::Head::SectionHeader_MetricTable* mutable_m_table();
  inline ::Head::SectionHeader_MetricTable* release_m_table();
  
  // optional .Head.SectionHeader.MetricDBTable m_db_table = 2;
  inline bool has_m_db_table() const;
  inline void clear_m_db_table();
  static const int kMDbTableFieldNumber = 2;
  inline const ::Head::SectionHeader_MetricDBTable& m_db_table() const;
  inline ::Head::SectionHeader_MetricDBTable* mutable_m_db_table();
  inline ::Head::SectionHeader_MetricDBTable* release_m_db_table();
  
  // optional .Head.SectionHeader.TraceDBTable t_db_table = 3;
  inline bool has_t_db_table() const;
  inline void clear_t_db_table();
  static const int kTDbTableFieldNumber = 3;
  inline const ::Head::SectionHeader_TraceDBTable& t_db_table() const;
  inline ::Head::SectionHeader_TraceDBTable* mutable_t_db_table();
  inline ::Head::SectionHeader_TraceDBTable* release_t_db_table();
  
  // optional .Head.SectionHeader.LoadModuleTable lm_table = 4;
  inline bool has_lm_table() const;
  inline void clear_lm_table();
  static const int kLmTableFieldNumber = 4;
  inline const ::Head::SectionHeader_LoadModuleTable& lm_table() const;
  inline ::Head::SectionHeader_LoadModuleTable* mutable_lm_table();
  inline ::Head::SectionHeader_LoadModuleTable* release_lm_table();
  
  // optional .Head.SectionHeader.FileTable f_table = 5;
  inline bool has_f_table() const;
  inline void clear_f_table();
  static const int kFTableFieldNumber = 5;
  inline const ::Head::SectionHeader_FileTable& f_table() const;
  inline ::Head::SectionHeader_FileTable* mutable_f_table();
  inline ::Head::SectionHeader_FileTable* release_f_table();
  
  // optional .Head.SectionHeader.ProcedureTable p_table = 6;
  inline bool has_p_table() const;
  inline void clear_p_table();
  static const int kPTableFieldNumber = 6;
  inline const ::Head::SectionHeader_ProcedureTable& p_table() const;
  inline ::Head::SectionHeader_ProcedureTable* mutable_p_table();
  inline ::Head::SectionHeader_ProcedureTable* release_p_table();
  
  // repeated .Head.SectionHeader.Info info_list = 7;
  inline int info_list_size() const;
  inline void clear_info_list();
  static const int kInfoListFieldNumber = 7;
  inline const ::Head::SectionHeader_Info& info_list(int index) const;
  inline ::Head::SectionHeader_Info* mutable_info_list(int index);
  inline ::Head::SectionHeader_Info* add_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info >&
      info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info >*
      mutable_info_list();
  
  // optional int32 id = 8;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Head.SectionHeader)
 private:
  inline void set_has_m_table();
  inline void clear_has_m_table();
  inline void set_has_m_db_table();
  inline void clear_has_m_db_table();
  inline void set_has_t_db_table();
  inline void clear_has_t_db_table();
  inline void set_has_lm_table();
  inline void clear_has_lm_table();
  inline void set_has_f_table();
  inline void clear_has_f_table();
  inline void set_has_p_table();
  inline void clear_has_p_table();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Head::SectionHeader_MetricTable* m_table_;
  ::Head::SectionHeader_MetricDBTable* m_db_table_;
  ::Head::SectionHeader_TraceDBTable* t_db_table_;
  ::Head::SectionHeader_LoadModuleTable* lm_table_;
  ::Head::SectionHeader_FileTable* f_table_;
  ::Head::SectionHeader_ProcedureTable* p_table_;
  ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info > info_list_;
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_Metric_2dMgr_2eproto();
  friend void protobuf_AssignDesc_Metric_2dMgr_2eproto();
  friend void protobuf_ShutdownFile_Metric_2dMgr_2eproto();
  
  void InitAsDefaultInstance();
  static SectionHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// SectionHeader_Info_NameValue

// required string name = 1;
inline bool SectionHeader_Info_NameValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_Info_NameValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_Info_NameValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_Info_NameValue::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_Info_NameValue::name() const {
  return *name_;
}
inline void SectionHeader_Info_NameValue::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_Info_NameValue::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_Info_NameValue::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_Info_NameValue::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_Info_NameValue::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool SectionHeader_Info_NameValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_Info_NameValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_Info_NameValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_Info_NameValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SectionHeader_Info_NameValue::value() const {
  return *value_;
}
inline void SectionHeader_Info_NameValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SectionHeader_Info_NameValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void SectionHeader_Info_NameValue::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_Info_NameValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* SectionHeader_Info_NameValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string type = 3;
inline bool SectionHeader_Info_NameValue::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_Info_NameValue::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_Info_NameValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_Info_NameValue::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& SectionHeader_Info_NameValue::type() const {
  return *type_;
}
inline void SectionHeader_Info_NameValue::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SectionHeader_Info_NameValue::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SectionHeader_Info_NameValue::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_Info_NameValue::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* SectionHeader_Info_NameValue::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SectionHeader_Info

// optional string name = 1;
inline bool SectionHeader_Info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_Info::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_Info::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_Info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_Info::name() const {
  return *name_;
}
inline void SectionHeader_Info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_Info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_Info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_Info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_Info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Head.SectionHeader.Info.NameValue nv_list = 2;
inline int SectionHeader_Info::nv_list_size() const {
  return nv_list_.size();
}
inline void SectionHeader_Info::clear_nv_list() {
  nv_list_.Clear();
}
inline const ::Head::SectionHeader_Info_NameValue& SectionHeader_Info::nv_list(int index) const {
  return nv_list_.Get(index);
}
inline ::Head::SectionHeader_Info_NameValue* SectionHeader_Info::mutable_nv_list(int index) {
  return nv_list_.Mutable(index);
}
inline ::Head::SectionHeader_Info_NameValue* SectionHeader_Info::add_nv_list() {
  return nv_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info_NameValue >&
SectionHeader_Info::nv_list() const {
  return nv_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info_NameValue >*
SectionHeader_Info::mutable_nv_list() {
  return &nv_list_;
}

// -------------------------------------------------------------------

// SectionHeader_MetricTable_Metric_MetricFormula

// optional bool type = 1;
inline bool SectionHeader_MetricTable_Metric_MetricFormula::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::clear_type() {
  type_ = false;
  clear_has_type();
}
inline bool SectionHeader_MetricTable_Metric_MetricFormula::type() const {
  return type_;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::set_type(bool value) {
  set_has_type();
  type_ = value;
}

// required string formula = 2;
inline bool SectionHeader_MetricTable_Metric_MetricFormula::has_formula() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::set_has_formula() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::clear_has_formula() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::clear_formula() {
  if (formula_ != &::google::protobuf::internal::kEmptyString) {
    formula_->clear();
  }
  clear_has_formula();
}
inline const ::std::string& SectionHeader_MetricTable_Metric_MetricFormula::formula() const {
  return *formula_;
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::set_formula(const ::std::string& value) {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::kEmptyString) {
    formula_ = new ::std::string;
  }
  formula_->assign(value);
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::set_formula(const char* value) {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::kEmptyString) {
    formula_ = new ::std::string;
  }
  formula_->assign(value);
}
inline void SectionHeader_MetricTable_Metric_MetricFormula::set_formula(const char* value, size_t size) {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::kEmptyString) {
    formula_ = new ::std::string;
  }
  formula_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricTable_Metric_MetricFormula::mutable_formula() {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::kEmptyString) {
    formula_ = new ::std::string;
  }
  return formula_;
}
inline ::std::string* SectionHeader_MetricTable_Metric_MetricFormula::release_formula() {
  clear_has_formula();
  if (formula_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = formula_;
    formula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SectionHeader_MetricTable_Metric

// optional bool show_percent = 1 [default = true];
inline bool SectionHeader_MetricTable_Metric::has_show_percent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_show_percent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_show_percent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_MetricTable_Metric::clear_show_percent() {
  show_percent_ = true;
  clear_has_show_percent();
}
inline bool SectionHeader_MetricTable_Metric::show_percent() const {
  return show_percent_;
}
inline void SectionHeader_MetricTable_Metric::set_show_percent(bool value) {
  set_has_show_percent();
  show_percent_ = value;
}

// repeated .Head.SectionHeader.MetricTable.Metric.MetricFormula metric_formula_list = 2;
inline int SectionHeader_MetricTable_Metric::metric_formula_list_size() const {
  return metric_formula_list_.size();
}
inline void SectionHeader_MetricTable_Metric::clear_metric_formula_list() {
  metric_formula_list_.Clear();
}
inline const ::Head::SectionHeader_MetricTable_Metric_MetricFormula& SectionHeader_MetricTable_Metric::metric_formula_list(int index) const {
  return metric_formula_list_.Get(index);
}
inline ::Head::SectionHeader_MetricTable_Metric_MetricFormula* SectionHeader_MetricTable_Metric::mutable_metric_formula_list(int index) {
  return metric_formula_list_.Mutable(index);
}
inline ::Head::SectionHeader_MetricTable_Metric_MetricFormula* SectionHeader_MetricTable_Metric::add_metric_formula_list() {
  return metric_formula_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric_MetricFormula >&
SectionHeader_MetricTable_Metric::metric_formula_list() const {
  return metric_formula_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric_MetricFormula >*
SectionHeader_MetricTable_Metric::mutable_metric_formula_list() {
  return &metric_formula_list_;
}

// optional .Head.SectionHeader.Info info = 3;
inline bool SectionHeader_MetricTable_Metric::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_MetricTable_Metric::clear_info() {
  if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
  clear_has_info();
}
inline const ::Head::SectionHeader_Info& SectionHeader_MetricTable_Metric::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_MetricTable_Metric::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Head::SectionHeader_Info;
  return info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_MetricTable_Metric::release_info() {
  clear_has_info();
  ::Head::SectionHeader_Info* temp = info_;
  info_ = NULL;
  return temp;
}

// required int32 id = 4;
inline bool SectionHeader_MetricTable_Metric::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SectionHeader_MetricTable_Metric::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader_MetricTable_Metric::id() const {
  return id_;
}
inline void SectionHeader_MetricTable_Metric::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 5;
inline bool SectionHeader_MetricTable_Metric::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SectionHeader_MetricTable_Metric::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_MetricTable_Metric::name() const {
  return *name_;
}
inline void SectionHeader_MetricTable_Metric::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricTable_Metric::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_MetricTable_Metric::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 value = 6 [default = 0];
inline bool SectionHeader_MetricTable_Metric::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectionHeader_MetricTable_Metric::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 SectionHeader_MetricTable_Metric::value() const {
  return value_;
}
inline void SectionHeader_MetricTable_Metric::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 type = 7 [default = 0];
inline bool SectionHeader_MetricTable_Metric::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SectionHeader_MetricTable_Metric::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SectionHeader_MetricTable_Metric::type() const {
  return type_;
}
inline void SectionHeader_MetricTable_Metric::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 partner = 8;
inline bool SectionHeader_MetricTable_Metric::has_partner() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_partner() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_partner() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SectionHeader_MetricTable_Metric::clear_partner() {
  partner_ = 0;
  clear_has_partner();
}
inline ::google::protobuf::int32 SectionHeader_MetricTable_Metric::partner() const {
  return partner_;
}
inline void SectionHeader_MetricTable_Metric::set_partner(::google::protobuf::int32 value) {
  set_has_partner();
  partner_ = value;
}

// optional int32 fmt = 9;
inline bool SectionHeader_MetricTable_Metric::has_fmt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_fmt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_fmt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SectionHeader_MetricTable_Metric::clear_fmt() {
  fmt_ = 0;
  clear_has_fmt();
}
inline ::google::protobuf::int32 SectionHeader_MetricTable_Metric::fmt() const {
  return fmt_;
}
inline void SectionHeader_MetricTable_Metric::set_fmt(::google::protobuf::int32 value) {
  set_has_fmt();
  fmt_ = value;
}

// optional bool show = 10 [default = true];
inline bool SectionHeader_MetricTable_Metric::has_show() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_show() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_show() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SectionHeader_MetricTable_Metric::clear_show() {
  show_ = true;
  clear_has_show();
}
inline bool SectionHeader_MetricTable_Metric::show() const {
  return show_;
}
inline void SectionHeader_MetricTable_Metric::set_show(bool value) {
  set_has_show();
  show_ = value;
}

// optional string basename = 11;
inline bool SectionHeader_MetricTable_Metric::has_basename() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_basename() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_basename() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SectionHeader_MetricTable_Metric::clear_basename() {
  if (basename_ != &::google::protobuf::internal::kEmptyString) {
    basename_->clear();
  }
  clear_has_basename();
}
inline const ::std::string& SectionHeader_MetricTable_Metric::basename() const {
  return *basename_;
}
inline void SectionHeader_MetricTable_Metric::set_basename(const ::std::string& value) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::kEmptyString) {
    basename_ = new ::std::string;
  }
  basename_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_basename(const char* value) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::kEmptyString) {
    basename_ = new ::std::string;
  }
  basename_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_basename(const char* value, size_t size) {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::kEmptyString) {
    basename_ = new ::std::string;
  }
  basename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricTable_Metric::mutable_basename() {
  set_has_basename();
  if (basename_ == &::google::protobuf::internal::kEmptyString) {
    basename_ = new ::std::string;
  }
  return basename_;
}
inline ::std::string* SectionHeader_MetricTable_Metric::release_basename() {
  clear_has_basename();
  if (basename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = basename_;
    basename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string suffix = 12;
inline bool SectionHeader_MetricTable_Metric::has_suffix() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_suffix() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_suffix() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SectionHeader_MetricTable_Metric::clear_suffix() {
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    suffix_->clear();
  }
  clear_has_suffix();
}
inline const ::std::string& SectionHeader_MetricTable_Metric::suffix() const {
  return *suffix_;
}
inline void SectionHeader_MetricTable_Metric::set_suffix(const ::std::string& value) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_suffix(const char* value) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_suffix(const char* value, size_t size) {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  suffix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricTable_Metric::mutable_suffix() {
  set_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    suffix_ = new ::std::string;
  }
  return suffix_;
}
inline ::std::string* SectionHeader_MetricTable_Metric::release_suffix() {
  clear_has_suffix();
  if (suffix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = suffix_;
    suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string prefix = 13;
inline bool SectionHeader_MetricTable_Metric::has_prefix() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SectionHeader_MetricTable_Metric::set_has_prefix() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SectionHeader_MetricTable_Metric::clear_has_prefix() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SectionHeader_MetricTable_Metric::clear_prefix() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    prefix_->clear();
  }
  clear_has_prefix();
}
inline const ::std::string& SectionHeader_MetricTable_Metric::prefix() const {
  return *prefix_;
}
inline void SectionHeader_MetricTable_Metric::set_prefix(const ::std::string& value) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_prefix(const char* value) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
}
inline void SectionHeader_MetricTable_Metric::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricTable_Metric::mutable_prefix() {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  return prefix_;
}
inline ::std::string* SectionHeader_MetricTable_Metric::release_prefix() {
  clear_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prefix_;
    prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SectionHeader_MetricTable

// repeated .Head.SectionHeader.MetricTable.Metric m_list = 1;
inline int SectionHeader_MetricTable::m_list_size() const {
  return m_list_.size();
}
inline void SectionHeader_MetricTable::clear_m_list() {
  m_list_.Clear();
}
inline const ::Head::SectionHeader_MetricTable_Metric& SectionHeader_MetricTable::m_list(int index) const {
  return m_list_.Get(index);
}
inline ::Head::SectionHeader_MetricTable_Metric* SectionHeader_MetricTable::mutable_m_list(int index) {
  return m_list_.Mutable(index);
}
inline ::Head::SectionHeader_MetricTable_Metric* SectionHeader_MetricTable::add_m_list() {
  return m_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric >&
SectionHeader_MetricTable::m_list() const {
  return m_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricTable_Metric >*
SectionHeader_MetricTable::mutable_m_list() {
  return &m_list_;
}

// -------------------------------------------------------------------

// SectionHeader_MetricDBTable_MetricDB

// required int32 id = 1;
inline bool SectionHeader_MetricDBTable_MetricDB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader_MetricDBTable_MetricDB::id() const {
  return id_;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool SectionHeader_MetricDBTable_MetricDB::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_MetricDBTable_MetricDB::name() const {
  return *name_;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_MetricDBTable_MetricDB::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_MetricDBTable_MetricDB::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricDBTable_MetricDB::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_MetricDBTable_MetricDB::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string db_glob = 3;
inline bool SectionHeader_MetricDBTable_MetricDB::has_db_glob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_has_db_glob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_has_db_glob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_db_glob() {
  if (db_glob_ != &::google::protobuf::internal::kEmptyString) {
    db_glob_->clear();
  }
  clear_has_db_glob();
}
inline const ::std::string& SectionHeader_MetricDBTable_MetricDB::db_glob() const {
  return *db_glob_;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_db_glob(const ::std::string& value) {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  db_glob_->assign(value);
}
inline void SectionHeader_MetricDBTable_MetricDB::set_db_glob(const char* value) {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  db_glob_->assign(value);
}
inline void SectionHeader_MetricDBTable_MetricDB::set_db_glob(const char* value, size_t size) {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  db_glob_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_MetricDBTable_MetricDB::mutable_db_glob() {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  return db_glob_;
}
inline ::std::string* SectionHeader_MetricDBTable_MetricDB::release_db_glob() {
  clear_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_glob_;
    db_glob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 db_num_metrics = 4;
inline bool SectionHeader_MetricDBTable_MetricDB::has_db_num_metrics() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_has_db_num_metrics() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_has_db_num_metrics() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_db_num_metrics() {
  db_num_metrics_ = 0;
  clear_has_db_num_metrics();
}
inline ::google::protobuf::int32 SectionHeader_MetricDBTable_MetricDB::db_num_metrics() const {
  return db_num_metrics_;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_db_num_metrics(::google::protobuf::int32 value) {
  set_has_db_num_metrics();
  db_num_metrics_ = value;
}

// optional int32 db_header_sz = 5;
inline bool SectionHeader_MetricDBTable_MetricDB::has_db_header_sz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_has_db_header_sz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_has_db_header_sz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_db_header_sz() {
  db_header_sz_ = 0;
  clear_has_db_header_sz();
}
inline ::google::protobuf::int32 SectionHeader_MetricDBTable_MetricDB::db_header_sz() const {
  return db_header_sz_;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_db_header_sz(::google::protobuf::int32 value) {
  set_has_db_header_sz();
  db_header_sz_ = value;
}

// optional int32 db_id = 6;
inline bool SectionHeader_MetricDBTable_MetricDB::has_db_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_has_db_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_has_db_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectionHeader_MetricDBTable_MetricDB::clear_db_id() {
  db_id_ = 0;
  clear_has_db_id();
}
inline ::google::protobuf::int32 SectionHeader_MetricDBTable_MetricDB::db_id() const {
  return db_id_;
}
inline void SectionHeader_MetricDBTable_MetricDB::set_db_id(::google::protobuf::int32 value) {
  set_has_db_id();
  db_id_ = value;
}

// -------------------------------------------------------------------

// SectionHeader_MetricDBTable

// repeated .Head.SectionHeader.MetricDBTable.MetricDB metric_db_list = 1;
inline int SectionHeader_MetricDBTable::metric_db_list_size() const {
  return metric_db_list_.size();
}
inline void SectionHeader_MetricDBTable::clear_metric_db_list() {
  metric_db_list_.Clear();
}
inline const ::Head::SectionHeader_MetricDBTable_MetricDB& SectionHeader_MetricDBTable::metric_db_list(int index) const {
  return metric_db_list_.Get(index);
}
inline ::Head::SectionHeader_MetricDBTable_MetricDB* SectionHeader_MetricDBTable::mutable_metric_db_list(int index) {
  return metric_db_list_.Mutable(index);
}
inline ::Head::SectionHeader_MetricDBTable_MetricDB* SectionHeader_MetricDBTable::add_metric_db_list() {
  return metric_db_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricDBTable_MetricDB >&
SectionHeader_MetricDBTable::metric_db_list() const {
  return metric_db_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_MetricDBTable_MetricDB >*
SectionHeader_MetricDBTable::mutable_metric_db_list() {
  return &metric_db_list_;
}

// -------------------------------------------------------------------

// SectionHeader_TraceDBTable_TraceDB

// required int32 id = 1;
inline bool SectionHeader_TraceDBTable_TraceDB::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader_TraceDBTable_TraceDB::id() const {
  return id_;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string db_glob = 2;
inline bool SectionHeader_TraceDBTable_TraceDB::has_db_glob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_has_db_glob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_has_db_glob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_db_glob() {
  if (db_glob_ != &::google::protobuf::internal::kEmptyString) {
    db_glob_->clear();
  }
  clear_has_db_glob();
}
inline const ::std::string& SectionHeader_TraceDBTable_TraceDB::db_glob() const {
  return *db_glob_;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_db_glob(const ::std::string& value) {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  db_glob_->assign(value);
}
inline void SectionHeader_TraceDBTable_TraceDB::set_db_glob(const char* value) {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  db_glob_->assign(value);
}
inline void SectionHeader_TraceDBTable_TraceDB::set_db_glob(const char* value, size_t size) {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  db_glob_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_TraceDBTable_TraceDB::mutable_db_glob() {
  set_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    db_glob_ = new ::std::string;
  }
  return db_glob_;
}
inline ::std::string* SectionHeader_TraceDBTable_TraceDB::release_db_glob() {
  clear_has_db_glob();
  if (db_glob_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_glob_;
    db_glob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 db_min_time = 3;
inline bool SectionHeader_TraceDBTable_TraceDB::has_db_min_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_has_db_min_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_has_db_min_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_db_min_time() {
  db_min_time_ = GOOGLE_ULONGLONG(0);
  clear_has_db_min_time();
}
inline ::google::protobuf::uint64 SectionHeader_TraceDBTable_TraceDB::db_min_time() const {
  return db_min_time_;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_db_min_time(::google::protobuf::uint64 value) {
  set_has_db_min_time();
  db_min_time_ = value;
}

// optional uint64 db_max_time = 4;
inline bool SectionHeader_TraceDBTable_TraceDB::has_db_max_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_has_db_max_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_has_db_max_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_db_max_time() {
  db_max_time_ = GOOGLE_ULONGLONG(0);
  clear_has_db_max_time();
}
inline ::google::protobuf::uint64 SectionHeader_TraceDBTable_TraceDB::db_max_time() const {
  return db_max_time_;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_db_max_time(::google::protobuf::uint64 value) {
  set_has_db_max_time();
  db_max_time_ = value;
}

// optional int32 db_header_sz = 5;
inline bool SectionHeader_TraceDBTable_TraceDB::has_db_header_sz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_has_db_header_sz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_has_db_header_sz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SectionHeader_TraceDBTable_TraceDB::clear_db_header_sz() {
  db_header_sz_ = 0;
  clear_has_db_header_sz();
}
inline ::google::protobuf::int32 SectionHeader_TraceDBTable_TraceDB::db_header_sz() const {
  return db_header_sz_;
}
inline void SectionHeader_TraceDBTable_TraceDB::set_db_header_sz(::google::protobuf::int32 value) {
  set_has_db_header_sz();
  db_header_sz_ = value;
}

// -------------------------------------------------------------------

// SectionHeader_TraceDBTable

// repeated .Head.SectionHeader.TraceDBTable.TraceDB trace_db_list = 1;
inline int SectionHeader_TraceDBTable::trace_db_list_size() const {
  return trace_db_list_.size();
}
inline void SectionHeader_TraceDBTable::clear_trace_db_list() {
  trace_db_list_.Clear();
}
inline const ::Head::SectionHeader_TraceDBTable_TraceDB& SectionHeader_TraceDBTable::trace_db_list(int index) const {
  return trace_db_list_.Get(index);
}
inline ::Head::SectionHeader_TraceDBTable_TraceDB* SectionHeader_TraceDBTable::mutable_trace_db_list(int index) {
  return trace_db_list_.Mutable(index);
}
inline ::Head::SectionHeader_TraceDBTable_TraceDB* SectionHeader_TraceDBTable::add_trace_db_list() {
  return trace_db_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_TraceDBTable_TraceDB >&
SectionHeader_TraceDBTable::trace_db_list() const {
  return trace_db_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_TraceDBTable_TraceDB >*
SectionHeader_TraceDBTable::mutable_trace_db_list() {
  return &trace_db_list_;
}

// -------------------------------------------------------------------

// SectionHeader_LoadModuleTable_LoadModule

// required int32 id = 1;
inline bool SectionHeader_LoadModuleTable_LoadModule::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_LoadModuleTable_LoadModule::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_LoadModuleTable_LoadModule::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader_LoadModuleTable_LoadModule::id() const {
  return id_;
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool SectionHeader_LoadModuleTable_LoadModule::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_LoadModuleTable_LoadModule::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_LoadModuleTable_LoadModule::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_LoadModuleTable_LoadModule::name() const {
  return *name_;
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_LoadModuleTable_LoadModule::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_LoadModuleTable_LoadModule::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Head.SectionHeader.Info info = 3;
inline bool SectionHeader_LoadModuleTable_LoadModule::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_LoadModuleTable_LoadModule::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_LoadModuleTable_LoadModule::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_LoadModuleTable_LoadModule::clear_info() {
  if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
  clear_has_info();
}
inline const ::Head::SectionHeader_Info& SectionHeader_LoadModuleTable_LoadModule::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_LoadModuleTable_LoadModule::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Head::SectionHeader_Info;
  return info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_LoadModuleTable_LoadModule::release_info() {
  clear_has_info();
  ::Head::SectionHeader_Info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SectionHeader_LoadModuleTable

// repeated .Head.SectionHeader.LoadModuleTable.LoadModule load_module_list = 1;
inline int SectionHeader_LoadModuleTable::load_module_list_size() const {
  return load_module_list_.size();
}
inline void SectionHeader_LoadModuleTable::clear_load_module_list() {
  load_module_list_.Clear();
}
inline const ::Head::SectionHeader_LoadModuleTable_LoadModule& SectionHeader_LoadModuleTable::load_module_list(int index) const {
  return load_module_list_.Get(index);
}
inline ::Head::SectionHeader_LoadModuleTable_LoadModule* SectionHeader_LoadModuleTable::mutable_load_module_list(int index) {
  return load_module_list_.Mutable(index);
}
inline ::Head::SectionHeader_LoadModuleTable_LoadModule* SectionHeader_LoadModuleTable::add_load_module_list() {
  return load_module_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_LoadModuleTable_LoadModule >&
SectionHeader_LoadModuleTable::load_module_list() const {
  return load_module_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_LoadModuleTable_LoadModule >*
SectionHeader_LoadModuleTable::mutable_load_module_list() {
  return &load_module_list_;
}

// -------------------------------------------------------------------

// SectionHeader_FileTable_File

// required int32 id = 1;
inline bool SectionHeader_FileTable_File::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_FileTable_File::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_FileTable_File::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_FileTable_File::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader_FileTable_File::id() const {
  return id_;
}
inline void SectionHeader_FileTable_File::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool SectionHeader_FileTable_File::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_FileTable_File::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_FileTable_File::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_FileTable_File::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_FileTable_File::name() const {
  return *name_;
}
inline void SectionHeader_FileTable_File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_FileTable_File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_FileTable_File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_FileTable_File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_FileTable_File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Head.SectionHeader.Info info = 3;
inline bool SectionHeader_FileTable_File::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_FileTable_File::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_FileTable_File::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_FileTable_File::clear_info() {
  if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
  clear_has_info();
}
inline const ::Head::SectionHeader_Info& SectionHeader_FileTable_File::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_FileTable_File::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Head::SectionHeader_Info;
  return info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_FileTable_File::release_info() {
  clear_has_info();
  ::Head::SectionHeader_Info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SectionHeader_FileTable

// repeated .Head.SectionHeader.FileTable.File file_list = 1;
inline int SectionHeader_FileTable::file_list_size() const {
  return file_list_.size();
}
inline void SectionHeader_FileTable::clear_file_list() {
  file_list_.Clear();
}
inline const ::Head::SectionHeader_FileTable_File& SectionHeader_FileTable::file_list(int index) const {
  return file_list_.Get(index);
}
inline ::Head::SectionHeader_FileTable_File* SectionHeader_FileTable::mutable_file_list(int index) {
  return file_list_.Mutable(index);
}
inline ::Head::SectionHeader_FileTable_File* SectionHeader_FileTable::add_file_list() {
  return file_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_FileTable_File >&
SectionHeader_FileTable::file_list() const {
  return file_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_FileTable_File >*
SectionHeader_FileTable::mutable_file_list() {
  return &file_list_;
}

// -------------------------------------------------------------------

// SectionHeader_ProcedureTable_Procedure

// required int32 id = 1;
inline bool SectionHeader_ProcedureTable_Procedure::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader_ProcedureTable_Procedure::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader_ProcedureTable_Procedure::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader_ProcedureTable_Procedure::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader_ProcedureTable_Procedure::id() const {
  return id_;
}
inline void SectionHeader_ProcedureTable_Procedure::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool SectionHeader_ProcedureTable_Procedure::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader_ProcedureTable_Procedure::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader_ProcedureTable_Procedure::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader_ProcedureTable_Procedure::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader_ProcedureTable_Procedure::name() const {
  return *name_;
}
inline void SectionHeader_ProcedureTable_Procedure::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_ProcedureTable_Procedure::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader_ProcedureTable_Procedure::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader_ProcedureTable_Procedure::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader_ProcedureTable_Procedure::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Head.SectionHeader.Info info = 3;
inline bool SectionHeader_ProcedureTable_Procedure::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader_ProcedureTable_Procedure::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader_ProcedureTable_Procedure::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader_ProcedureTable_Procedure::clear_info() {
  if (info_ != NULL) info_->::Head::SectionHeader_Info::Clear();
  clear_has_info();
}
inline const ::Head::SectionHeader_Info& SectionHeader_ProcedureTable_Procedure::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_ProcedureTable_Procedure::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Head::SectionHeader_Info;
  return info_;
}
inline ::Head::SectionHeader_Info* SectionHeader_ProcedureTable_Procedure::release_info() {
  clear_has_info();
  ::Head::SectionHeader_Info* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SectionHeader_ProcedureTable

// repeated .Head.SectionHeader.ProcedureTable.Procedure procedure_list = 1;
inline int SectionHeader_ProcedureTable::procedure_list_size() const {
  return procedure_list_.size();
}
inline void SectionHeader_ProcedureTable::clear_procedure_list() {
  procedure_list_.Clear();
}
inline const ::Head::SectionHeader_ProcedureTable_Procedure& SectionHeader_ProcedureTable::procedure_list(int index) const {
  return procedure_list_.Get(index);
}
inline ::Head::SectionHeader_ProcedureTable_Procedure* SectionHeader_ProcedureTable::mutable_procedure_list(int index) {
  return procedure_list_.Mutable(index);
}
inline ::Head::SectionHeader_ProcedureTable_Procedure* SectionHeader_ProcedureTable::add_procedure_list() {
  return procedure_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_ProcedureTable_Procedure >&
SectionHeader_ProcedureTable::procedure_list() const {
  return procedure_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_ProcedureTable_Procedure >*
SectionHeader_ProcedureTable::mutable_procedure_list() {
  return &procedure_list_;
}

// -------------------------------------------------------------------

// SectionHeader

// optional .Head.SectionHeader.MetricTable m_table = 1;
inline bool SectionHeader::has_m_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectionHeader::set_has_m_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectionHeader::clear_has_m_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectionHeader::clear_m_table() {
  if (m_table_ != NULL) m_table_->::Head::SectionHeader_MetricTable::Clear();
  clear_has_m_table();
}
inline const ::Head::SectionHeader_MetricTable& SectionHeader::m_table() const {
  return m_table_ != NULL ? *m_table_ : *default_instance_->m_table_;
}
inline ::Head::SectionHeader_MetricTable* SectionHeader::mutable_m_table() {
  set_has_m_table();
  if (m_table_ == NULL) m_table_ = new ::Head::SectionHeader_MetricTable;
  return m_table_;
}
inline ::Head::SectionHeader_MetricTable* SectionHeader::release_m_table() {
  clear_has_m_table();
  ::Head::SectionHeader_MetricTable* temp = m_table_;
  m_table_ = NULL;
  return temp;
}

// optional .Head.SectionHeader.MetricDBTable m_db_table = 2;
inline bool SectionHeader::has_m_db_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectionHeader::set_has_m_db_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectionHeader::clear_has_m_db_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectionHeader::clear_m_db_table() {
  if (m_db_table_ != NULL) m_db_table_->::Head::SectionHeader_MetricDBTable::Clear();
  clear_has_m_db_table();
}
inline const ::Head::SectionHeader_MetricDBTable& SectionHeader::m_db_table() const {
  return m_db_table_ != NULL ? *m_db_table_ : *default_instance_->m_db_table_;
}
inline ::Head::SectionHeader_MetricDBTable* SectionHeader::mutable_m_db_table() {
  set_has_m_db_table();
  if (m_db_table_ == NULL) m_db_table_ = new ::Head::SectionHeader_MetricDBTable;
  return m_db_table_;
}
inline ::Head::SectionHeader_MetricDBTable* SectionHeader::release_m_db_table() {
  clear_has_m_db_table();
  ::Head::SectionHeader_MetricDBTable* temp = m_db_table_;
  m_db_table_ = NULL;
  return temp;
}

// optional .Head.SectionHeader.TraceDBTable t_db_table = 3;
inline bool SectionHeader::has_t_db_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectionHeader::set_has_t_db_table() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectionHeader::clear_has_t_db_table() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectionHeader::clear_t_db_table() {
  if (t_db_table_ != NULL) t_db_table_->::Head::SectionHeader_TraceDBTable::Clear();
  clear_has_t_db_table();
}
inline const ::Head::SectionHeader_TraceDBTable& SectionHeader::t_db_table() const {
  return t_db_table_ != NULL ? *t_db_table_ : *default_instance_->t_db_table_;
}
inline ::Head::SectionHeader_TraceDBTable* SectionHeader::mutable_t_db_table() {
  set_has_t_db_table();
  if (t_db_table_ == NULL) t_db_table_ = new ::Head::SectionHeader_TraceDBTable;
  return t_db_table_;
}
inline ::Head::SectionHeader_TraceDBTable* SectionHeader::release_t_db_table() {
  clear_has_t_db_table();
  ::Head::SectionHeader_TraceDBTable* temp = t_db_table_;
  t_db_table_ = NULL;
  return temp;
}

// optional .Head.SectionHeader.LoadModuleTable lm_table = 4;
inline bool SectionHeader::has_lm_table() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SectionHeader::set_has_lm_table() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SectionHeader::clear_has_lm_table() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SectionHeader::clear_lm_table() {
  if (lm_table_ != NULL) lm_table_->::Head::SectionHeader_LoadModuleTable::Clear();
  clear_has_lm_table();
}
inline const ::Head::SectionHeader_LoadModuleTable& SectionHeader::lm_table() const {
  return lm_table_ != NULL ? *lm_table_ : *default_instance_->lm_table_;
}
inline ::Head::SectionHeader_LoadModuleTable* SectionHeader::mutable_lm_table() {
  set_has_lm_table();
  if (lm_table_ == NULL) lm_table_ = new ::Head::SectionHeader_LoadModuleTable;
  return lm_table_;
}
inline ::Head::SectionHeader_LoadModuleTable* SectionHeader::release_lm_table() {
  clear_has_lm_table();
  ::Head::SectionHeader_LoadModuleTable* temp = lm_table_;
  lm_table_ = NULL;
  return temp;
}

// optional .Head.SectionHeader.FileTable f_table = 5;
inline bool SectionHeader::has_f_table() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SectionHeader::set_has_f_table() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SectionHeader::clear_has_f_table() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SectionHeader::clear_f_table() {
  if (f_table_ != NULL) f_table_->::Head::SectionHeader_FileTable::Clear();
  clear_has_f_table();
}
inline const ::Head::SectionHeader_FileTable& SectionHeader::f_table() const {
  return f_table_ != NULL ? *f_table_ : *default_instance_->f_table_;
}
inline ::Head::SectionHeader_FileTable* SectionHeader::mutable_f_table() {
  set_has_f_table();
  if (f_table_ == NULL) f_table_ = new ::Head::SectionHeader_FileTable;
  return f_table_;
}
inline ::Head::SectionHeader_FileTable* SectionHeader::release_f_table() {
  clear_has_f_table();
  ::Head::SectionHeader_FileTable* temp = f_table_;
  f_table_ = NULL;
  return temp;
}

// optional .Head.SectionHeader.ProcedureTable p_table = 6;
inline bool SectionHeader::has_p_table() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectionHeader::set_has_p_table() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectionHeader::clear_has_p_table() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectionHeader::clear_p_table() {
  if (p_table_ != NULL) p_table_->::Head::SectionHeader_ProcedureTable::Clear();
  clear_has_p_table();
}
inline const ::Head::SectionHeader_ProcedureTable& SectionHeader::p_table() const {
  return p_table_ != NULL ? *p_table_ : *default_instance_->p_table_;
}
inline ::Head::SectionHeader_ProcedureTable* SectionHeader::mutable_p_table() {
  set_has_p_table();
  if (p_table_ == NULL) p_table_ = new ::Head::SectionHeader_ProcedureTable;
  return p_table_;
}
inline ::Head::SectionHeader_ProcedureTable* SectionHeader::release_p_table() {
  clear_has_p_table();
  ::Head::SectionHeader_ProcedureTable* temp = p_table_;
  p_table_ = NULL;
  return temp;
}

// repeated .Head.SectionHeader.Info info_list = 7;
inline int SectionHeader::info_list_size() const {
  return info_list_.size();
}
inline void SectionHeader::clear_info_list() {
  info_list_.Clear();
}
inline const ::Head::SectionHeader_Info& SectionHeader::info_list(int index) const {
  return info_list_.Get(index);
}
inline ::Head::SectionHeader_Info* SectionHeader::mutable_info_list(int index) {
  return info_list_.Mutable(index);
}
inline ::Head::SectionHeader_Info* SectionHeader::add_info_list() {
  return info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info >&
SectionHeader::info_list() const {
  return info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Head::SectionHeader_Info >*
SectionHeader::mutable_info_list() {
  return &info_list_;
}

// optional int32 id = 8;
inline bool SectionHeader::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SectionHeader::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SectionHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SectionHeader::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SectionHeader::id() const {
  return id_;
}
inline void SectionHeader::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 9;
inline bool SectionHeader::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SectionHeader::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SectionHeader::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SectionHeader::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SectionHeader::name() const {
  return *name_;
}
inline void SectionHeader::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SectionHeader::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectionHeader::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SectionHeader::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Head

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Metric_2dMgr_2eproto__INCLUDED
