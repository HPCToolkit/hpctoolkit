// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct-Tree.proto

#ifndef PROTOBUF_Struct_2dTree_2eproto__INCLUDED
#define PROTOBUF_Struct_2dTree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace StructTree {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Struct_2dTree_2eproto();
void protobuf_AssignDesc_Struct_2dTree_2eproto();
void protobuf_ShutdownFile_Struct_2dTree_2eproto();

class Root;
class Root_Group;
class Root_LM;
class Root_File;
class Root_Proc;
class Root_Alien;
class Root_Loop;
class Root_Stmt;
class Root_Ref;
class Type;

// ===================================================================

class Root_Group : public ::google::protobuf::Message {
 public:
  Root_Group();
  virtual ~Root_Group();
  
  Root_Group(const Root_Group& from);
  
  inline Root_Group& operator=(const Root_Group& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_Group& default_instance();
  
  void Swap(Root_Group* other);
  
  // implements Message ----------------------------------------------
  
  Root_Group* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_Group& from);
  void MergeFrom(const Root_Group& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.Group)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_Group* default_instance_;
};
// -------------------------------------------------------------------

class Root_LM : public ::google::protobuf::Message {
 public:
  Root_LM();
  virtual ~Root_LM();
  
  Root_LM(const Root_LM& from);
  
  inline Root_LM& operator=(const Root_LM& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_LM& default_instance();
  
  void Swap(Root_LM* other);
  
  // implements Message ----------------------------------------------
  
  Root_LM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_LM& from);
  void MergeFrom(const Root_LM& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional string vma_intervals = 4;
  inline bool has_vma_intervals() const;
  inline void clear_vma_intervals();
  static const int kVmaIntervalsFieldNumber = 4;
  inline const ::std::string& vma_intervals() const;
  inline void set_vma_intervals(const ::std::string& value);
  inline void set_vma_intervals(const char* value);
  inline void set_vma_intervals(const char* value, size_t size);
  inline ::std::string* mutable_vma_intervals();
  inline ::std::string* release_vma_intervals();
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.LM)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_vma_intervals();
  inline void clear_has_vma_intervals();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* vma_intervals_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_LM* default_instance_;
};
// -------------------------------------------------------------------

class Root_File : public ::google::protobuf::Message {
 public:
  Root_File();
  virtual ~Root_File();
  
  Root_File(const Root_File& from);
  
  inline Root_File& operator=(const Root_File& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_File& default_instance();
  
  void Swap(Root_File* other);
  
  // implements Message ----------------------------------------------
  
  Root_File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_File& from);
  void MergeFrom(const Root_File& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.File)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_File* default_instance_;
};
// -------------------------------------------------------------------

class Root_Proc : public ::google::protobuf::Message {
 public:
  Root_Proc();
  virtual ~Root_Proc();
  
  Root_Proc(const Root_Proc& from);
  
  inline Root_Proc& operator=(const Root_Proc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_Proc& default_instance();
  
  void Swap(Root_Proc* other);
  
  // implements Message ----------------------------------------------
  
  Root_Proc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_Proc& from);
  void MergeFrom(const Root_Proc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional string vma_intervals = 4;
  inline bool has_vma_intervals() const;
  inline void clear_vma_intervals();
  static const int kVmaIntervalsFieldNumber = 4;
  inline const ::std::string& vma_intervals() const;
  inline void set_vma_intervals(const ::std::string& value);
  inline void set_vma_intervals(const char* value);
  inline void set_vma_intervals(const char* value, size_t size);
  inline ::std::string* mutable_vma_intervals();
  inline ::std::string* release_vma_intervals();
  
  // optional string line_range = 5;
  inline bool has_line_range() const;
  inline void clear_line_range();
  static const int kLineRangeFieldNumber = 5;
  inline const ::std::string& line_range() const;
  inline void set_line_range(const ::std::string& value);
  inline void set_line_range(const char* value);
  inline void set_line_range(const char* value, size_t size);
  inline ::std::string* mutable_line_range();
  inline ::std::string* release_line_range();
  
  // optional string link_name = 6;
  inline bool has_link_name() const;
  inline void clear_link_name();
  static const int kLinkNameFieldNumber = 6;
  inline const ::std::string& link_name() const;
  inline void set_link_name(const ::std::string& value);
  inline void set_link_name(const char* value);
  inline void set_link_name(const char* value, size_t size);
  inline ::std::string* mutable_link_name();
  inline ::std::string* release_link_name();
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.Proc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_vma_intervals();
  inline void clear_has_vma_intervals();
  inline void set_has_line_range();
  inline void clear_has_line_range();
  inline void set_has_link_name();
  inline void clear_has_link_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* vma_intervals_;
  ::std::string* line_range_;
  ::std::string* link_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_Proc* default_instance_;
};
// -------------------------------------------------------------------

class Root_Alien : public ::google::protobuf::Message {
 public:
  Root_Alien();
  virtual ~Root_Alien();
  
  Root_Alien(const Root_Alien& from);
  
  inline Root_Alien& operator=(const Root_Alien& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_Alien& default_instance();
  
  void Swap(Root_Alien* other);
  
  // implements Message ----------------------------------------------
  
  Root_Alien* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_Alien& from);
  void MergeFrom(const Root_Alien& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional string vma_intervals = 4;
  inline bool has_vma_intervals() const;
  inline void clear_vma_intervals();
  static const int kVmaIntervalsFieldNumber = 4;
  inline const ::std::string& vma_intervals() const;
  inline void set_vma_intervals(const ::std::string& value);
  inline void set_vma_intervals(const char* value);
  inline void set_vma_intervals(const char* value, size_t size);
  inline ::std::string* mutable_vma_intervals();
  inline ::std::string* release_vma_intervals();
  
  // optional string line_range = 5;
  inline bool has_line_range() const;
  inline void clear_line_range();
  static const int kLineRangeFieldNumber = 5;
  inline const ::std::string& line_range() const;
  inline void set_line_range(const ::std::string& value);
  inline void set_line_range(const char* value);
  inline void set_line_range(const char* value, size_t size);
  inline ::std::string* mutable_line_range();
  inline ::std::string* release_line_range();
  
  // optional string file_name = 6;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 6;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.Alien)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_vma_intervals();
  inline void clear_has_vma_intervals();
  inline void set_has_line_range();
  inline void clear_has_line_range();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* vma_intervals_;
  ::std::string* line_range_;
  ::std::string* file_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_Alien* default_instance_;
};
// -------------------------------------------------------------------

class Root_Loop : public ::google::protobuf::Message {
 public:
  Root_Loop();
  virtual ~Root_Loop();
  
  Root_Loop(const Root_Loop& from);
  
  inline Root_Loop& operator=(const Root_Loop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_Loop& default_instance();
  
  void Swap(Root_Loop* other);
  
  // implements Message ----------------------------------------------
  
  Root_Loop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_Loop& from);
  void MergeFrom(const Root_Loop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 parent_id = 2;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional string vma_intervals = 3;
  inline bool has_vma_intervals() const;
  inline void clear_vma_intervals();
  static const int kVmaIntervalsFieldNumber = 3;
  inline const ::std::string& vma_intervals() const;
  inline void set_vma_intervals(const ::std::string& value);
  inline void set_vma_intervals(const char* value);
  inline void set_vma_intervals(const char* value, size_t size);
  inline ::std::string* mutable_vma_intervals();
  inline ::std::string* release_vma_intervals();
  
  // optional string line_range = 4;
  inline bool has_line_range() const;
  inline void clear_line_range();
  static const int kLineRangeFieldNumber = 4;
  inline const ::std::string& line_range() const;
  inline void set_line_range(const ::std::string& value);
  inline void set_line_range(const char* value);
  inline void set_line_range(const char* value, size_t size);
  inline ::std::string* mutable_line_range();
  inline ::std::string* release_line_range();
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.Loop)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_vma_intervals();
  inline void clear_has_vma_intervals();
  inline void set_has_line_range();
  inline void clear_has_line_range();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* vma_intervals_;
  ::std::string* line_range_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_Loop* default_instance_;
};
// -------------------------------------------------------------------

class Root_Stmt : public ::google::protobuf::Message {
 public:
  Root_Stmt();
  virtual ~Root_Stmt();
  
  Root_Stmt(const Root_Stmt& from);
  
  inline Root_Stmt& operator=(const Root_Stmt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_Stmt& default_instance();
  
  void Swap(Root_Stmt* other);
  
  // implements Message ----------------------------------------------
  
  Root_Stmt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_Stmt& from);
  void MergeFrom(const Root_Stmt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 parent_id = 2;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional string vma_intervals = 3;
  inline bool has_vma_intervals() const;
  inline void clear_vma_intervals();
  static const int kVmaIntervalsFieldNumber = 3;
  inline const ::std::string& vma_intervals() const;
  inline void set_vma_intervals(const ::std::string& value);
  inline void set_vma_intervals(const char* value);
  inline void set_vma_intervals(const char* value, size_t size);
  inline ::std::string* mutable_vma_intervals();
  inline ::std::string* release_vma_intervals();
  
  // optional string line_range = 4;
  inline bool has_line_range() const;
  inline void clear_line_range();
  static const int kLineRangeFieldNumber = 4;
  inline const ::std::string& line_range() const;
  inline void set_line_range(const ::std::string& value);
  inline void set_line_range(const char* value);
  inline void set_line_range(const char* value, size_t size);
  inline ::std::string* mutable_line_range();
  inline ::std::string* release_line_range();
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.Stmt)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_vma_intervals();
  inline void clear_has_vma_intervals();
  inline void set_has_line_range();
  inline void clear_has_line_range();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* vma_intervals_;
  ::std::string* line_range_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_Stmt* default_instance_;
};
// -------------------------------------------------------------------

class Root_Ref : public ::google::protobuf::Message {
 public:
  Root_Ref();
  virtual ~Root_Ref();
  
  Root_Ref(const Root_Ref& from);
  
  inline Root_Ref& operator=(const Root_Ref& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root_Ref& default_instance();
  
  void Swap(Root_Ref* other);
  
  // implements Message ----------------------------------------------
  
  Root_Ref* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root_Ref& from);
  void MergeFrom(const Root_Ref& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 parent_id = 2;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional string vma_intervals = 3;
  inline bool has_vma_intervals() const;
  inline void clear_vma_intervals();
  static const int kVmaIntervalsFieldNumber = 3;
  inline const ::std::string& vma_intervals() const;
  inline void set_vma_intervals(const ::std::string& value);
  inline void set_vma_intervals(const char* value);
  inline void set_vma_intervals(const char* value, size_t size);
  inline ::std::string* mutable_vma_intervals();
  inline ::std::string* release_vma_intervals();
  
  // optional string line_range = 4;
  inline bool has_line_range() const;
  inline void clear_line_range();
  static const int kLineRangeFieldNumber = 4;
  inline const ::std::string& line_range() const;
  inline void set_line_range(const ::std::string& value);
  inline void set_line_range(const char* value);
  inline void set_line_range(const char* value, size_t size);
  inline ::std::string* mutable_line_range();
  inline ::std::string* release_line_range();
  
  // optional uint32 begin = 5;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 5;
  inline ::google::protobuf::uint32 begin() const;
  inline void set_begin(::google::protobuf::uint32 value);
  
  // optional uint32 end = 6;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 6;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:StructTree.Root.Ref)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_vma_intervals();
  inline void clear_has_vma_intervals();
  inline void set_has_line_range();
  inline void clear_has_line_range();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  ::std::string* vma_intervals_;
  ::std::string* line_range_;
  ::google::protobuf::uint32 begin_;
  ::google::protobuf::uint32 end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root_Ref* default_instance_;
};
// -------------------------------------------------------------------

class Root : public ::google::protobuf::Message {
 public:
  Root();
  virtual ~Root();
  
  Root(const Root& from);
  
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Root& default_instance();
  
  void Swap(Root* other);
  
  // implements Message ----------------------------------------------
  
  Root* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Root_Group Group;
  typedef Root_LM LM;
  typedef Root_File File;
  typedef Root_Proc Proc;
  typedef Root_Alien Alien;
  typedef Root_Loop Loop;
  typedef Root_Stmt Stmt;
  typedef Root_Ref Ref;
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StructTree.Root)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Root* default_instance_;
};
// -------------------------------------------------------------------

class Type : public ::google::protobuf::Message {
 public:
  Type();
  virtual ~Type();
  
  Type(const Type& from);
  
  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();
  
  void Swap(Type* other);
  
  // implements Message ----------------------------------------------
  
  Type* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:StructTree.Type)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Struct_2dTree_2eproto();
  friend void protobuf_AssignDesc_Struct_2dTree_2eproto();
  friend void protobuf_ShutdownFile_Struct_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Type* default_instance_;
};
// ===================================================================


// ===================================================================

// Root_Group

// optional int32 id = 1;
inline bool Root_Group::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_Group::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_Group::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_Group::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_Group::id() const {
  return id_;
}
inline void Root_Group::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Root_Group::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_Group::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_Group::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_Group::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Root_Group::name() const {
  return *name_;
}
inline void Root_Group::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_Group::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_Group::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Group::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Root_Group::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 parent_id = 3;
inline bool Root_Group::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_Group::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_Group::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_Group::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_Group::parent_id() const {
  return parent_id_;
}
inline void Root_Group::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// -------------------------------------------------------------------

// Root_LM

// optional int32 id = 1;
inline bool Root_LM::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_LM::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_LM::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_LM::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_LM::id() const {
  return id_;
}
inline void Root_LM::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Root_LM::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_LM::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_LM::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_LM::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Root_LM::name() const {
  return *name_;
}
inline void Root_LM::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_LM::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_LM::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_LM::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Root_LM::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 parent_id = 3;
inline bool Root_LM::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_LM::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_LM::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_LM::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_LM::parent_id() const {
  return parent_id_;
}
inline void Root_LM::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string vma_intervals = 4;
inline bool Root_LM::has_vma_intervals() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Root_LM::set_has_vma_intervals() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Root_LM::clear_has_vma_intervals() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Root_LM::clear_vma_intervals() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    vma_intervals_->clear();
  }
  clear_has_vma_intervals();
}
inline const ::std::string& Root_LM::vma_intervals() const {
  return *vma_intervals_;
}
inline void Root_LM::set_vma_intervals(const ::std::string& value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_LM::set_vma_intervals(const char* value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_LM::set_vma_intervals(const char* value, size_t size) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_LM::mutable_vma_intervals() {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  return vma_intervals_;
}
inline ::std::string* Root_LM::release_vma_intervals() {
  clear_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vma_intervals_;
    vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Root_File

// optional int32 id = 1;
inline bool Root_File::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_File::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_File::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_File::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_File::id() const {
  return id_;
}
inline void Root_File::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Root_File::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_File::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_File::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_File::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Root_File::name() const {
  return *name_;
}
inline void Root_File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Root_File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 parent_id = 3;
inline bool Root_File::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_File::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_File::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_File::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_File::parent_id() const {
  return parent_id_;
}
inline void Root_File::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// -------------------------------------------------------------------

// Root_Proc

// optional int32 id = 1;
inline bool Root_Proc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_Proc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_Proc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_Proc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_Proc::id() const {
  return id_;
}
inline void Root_Proc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Root_Proc::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_Proc::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_Proc::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_Proc::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Root_Proc::name() const {
  return *name_;
}
inline void Root_Proc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_Proc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_Proc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Proc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Root_Proc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 parent_id = 3;
inline bool Root_Proc::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_Proc::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_Proc::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_Proc::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_Proc::parent_id() const {
  return parent_id_;
}
inline void Root_Proc::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string vma_intervals = 4;
inline bool Root_Proc::has_vma_intervals() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Root_Proc::set_has_vma_intervals() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Root_Proc::clear_has_vma_intervals() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Root_Proc::clear_vma_intervals() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    vma_intervals_->clear();
  }
  clear_has_vma_intervals();
}
inline const ::std::string& Root_Proc::vma_intervals() const {
  return *vma_intervals_;
}
inline void Root_Proc::set_vma_intervals(const ::std::string& value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Proc::set_vma_intervals(const char* value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Proc::set_vma_intervals(const char* value, size_t size) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Proc::mutable_vma_intervals() {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  return vma_intervals_;
}
inline ::std::string* Root_Proc::release_vma_intervals() {
  clear_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vma_intervals_;
    vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string line_range = 5;
inline bool Root_Proc::has_line_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Root_Proc::set_has_line_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Root_Proc::clear_has_line_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Root_Proc::clear_line_range() {
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    line_range_->clear();
  }
  clear_has_line_range();
}
inline const ::std::string& Root_Proc::line_range() const {
  return *line_range_;
}
inline void Root_Proc::set_line_range(const ::std::string& value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Proc::set_line_range(const char* value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Proc::set_line_range(const char* value, size_t size) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Proc::mutable_line_range() {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  return line_range_;
}
inline ::std::string* Root_Proc::release_line_range() {
  clear_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_range_;
    line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string link_name = 6;
inline bool Root_Proc::has_link_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Root_Proc::set_has_link_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Root_Proc::clear_has_link_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Root_Proc::clear_link_name() {
  if (link_name_ != &::google::protobuf::internal::kEmptyString) {
    link_name_->clear();
  }
  clear_has_link_name();
}
inline const ::std::string& Root_Proc::link_name() const {
  return *link_name_;
}
inline void Root_Proc::set_link_name(const ::std::string& value) {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  link_name_->assign(value);
}
inline void Root_Proc::set_link_name(const char* value) {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  link_name_->assign(value);
}
inline void Root_Proc::set_link_name(const char* value, size_t size) {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  link_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Proc::mutable_link_name() {
  set_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    link_name_ = new ::std::string;
  }
  return link_name_;
}
inline ::std::string* Root_Proc::release_link_name() {
  clear_has_link_name();
  if (link_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_name_;
    link_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Root_Alien

// optional int32 id = 1;
inline bool Root_Alien::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_Alien::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_Alien::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_Alien::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_Alien::id() const {
  return id_;
}
inline void Root_Alien::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Root_Alien::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_Alien::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_Alien::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_Alien::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Root_Alien::name() const {
  return *name_;
}
inline void Root_Alien::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_Alien::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root_Alien::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Alien::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Root_Alien::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 parent_id = 3;
inline bool Root_Alien::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_Alien::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_Alien::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_Alien::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_Alien::parent_id() const {
  return parent_id_;
}
inline void Root_Alien::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string vma_intervals = 4;
inline bool Root_Alien::has_vma_intervals() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Root_Alien::set_has_vma_intervals() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Root_Alien::clear_has_vma_intervals() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Root_Alien::clear_vma_intervals() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    vma_intervals_->clear();
  }
  clear_has_vma_intervals();
}
inline const ::std::string& Root_Alien::vma_intervals() const {
  return *vma_intervals_;
}
inline void Root_Alien::set_vma_intervals(const ::std::string& value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Alien::set_vma_intervals(const char* value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Alien::set_vma_intervals(const char* value, size_t size) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Alien::mutable_vma_intervals() {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  return vma_intervals_;
}
inline ::std::string* Root_Alien::release_vma_intervals() {
  clear_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vma_intervals_;
    vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string line_range = 5;
inline bool Root_Alien::has_line_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Root_Alien::set_has_line_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Root_Alien::clear_has_line_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Root_Alien::clear_line_range() {
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    line_range_->clear();
  }
  clear_has_line_range();
}
inline const ::std::string& Root_Alien::line_range() const {
  return *line_range_;
}
inline void Root_Alien::set_line_range(const ::std::string& value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Alien::set_line_range(const char* value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Alien::set_line_range(const char* value, size_t size) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Alien::mutable_line_range() {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  return line_range_;
}
inline ::std::string* Root_Alien::release_line_range() {
  clear_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_range_;
    line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string file_name = 6;
inline bool Root_Alien::has_file_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Root_Alien::set_has_file_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Root_Alien::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Root_Alien::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& Root_Alien::file_name() const {
  return *file_name_;
}
inline void Root_Alien::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void Root_Alien::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void Root_Alien::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Alien::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* Root_Alien::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Root_Loop

// optional int32 id = 1;
inline bool Root_Loop::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_Loop::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_Loop::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_Loop::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_Loop::id() const {
  return id_;
}
inline void Root_Loop::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 parent_id = 2;
inline bool Root_Loop::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_Loop::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_Loop::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_Loop::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_Loop::parent_id() const {
  return parent_id_;
}
inline void Root_Loop::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string vma_intervals = 3;
inline bool Root_Loop::has_vma_intervals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_Loop::set_has_vma_intervals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_Loop::clear_has_vma_intervals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_Loop::clear_vma_intervals() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    vma_intervals_->clear();
  }
  clear_has_vma_intervals();
}
inline const ::std::string& Root_Loop::vma_intervals() const {
  return *vma_intervals_;
}
inline void Root_Loop::set_vma_intervals(const ::std::string& value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Loop::set_vma_intervals(const char* value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Loop::set_vma_intervals(const char* value, size_t size) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Loop::mutable_vma_intervals() {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  return vma_intervals_;
}
inline ::std::string* Root_Loop::release_vma_intervals() {
  clear_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vma_intervals_;
    vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string line_range = 4;
inline bool Root_Loop::has_line_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Root_Loop::set_has_line_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Root_Loop::clear_has_line_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Root_Loop::clear_line_range() {
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    line_range_->clear();
  }
  clear_has_line_range();
}
inline const ::std::string& Root_Loop::line_range() const {
  return *line_range_;
}
inline void Root_Loop::set_line_range(const ::std::string& value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Loop::set_line_range(const char* value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Loop::set_line_range(const char* value, size_t size) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Loop::mutable_line_range() {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  return line_range_;
}
inline ::std::string* Root_Loop::release_line_range() {
  clear_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_range_;
    line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Root_Stmt

// optional int32 id = 1;
inline bool Root_Stmt::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_Stmt::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_Stmt::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_Stmt::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_Stmt::id() const {
  return id_;
}
inline void Root_Stmt::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 parent_id = 2;
inline bool Root_Stmt::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_Stmt::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_Stmt::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_Stmt::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_Stmt::parent_id() const {
  return parent_id_;
}
inline void Root_Stmt::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string vma_intervals = 3;
inline bool Root_Stmt::has_vma_intervals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_Stmt::set_has_vma_intervals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_Stmt::clear_has_vma_intervals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_Stmt::clear_vma_intervals() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    vma_intervals_->clear();
  }
  clear_has_vma_intervals();
}
inline const ::std::string& Root_Stmt::vma_intervals() const {
  return *vma_intervals_;
}
inline void Root_Stmt::set_vma_intervals(const ::std::string& value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Stmt::set_vma_intervals(const char* value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Stmt::set_vma_intervals(const char* value, size_t size) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Stmt::mutable_vma_intervals() {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  return vma_intervals_;
}
inline ::std::string* Root_Stmt::release_vma_intervals() {
  clear_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vma_intervals_;
    vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string line_range = 4;
inline bool Root_Stmt::has_line_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Root_Stmt::set_has_line_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Root_Stmt::clear_has_line_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Root_Stmt::clear_line_range() {
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    line_range_->clear();
  }
  clear_has_line_range();
}
inline const ::std::string& Root_Stmt::line_range() const {
  return *line_range_;
}
inline void Root_Stmt::set_line_range(const ::std::string& value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Stmt::set_line_range(const char* value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Stmt::set_line_range(const char* value, size_t size) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Stmt::mutable_line_range() {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  return line_range_;
}
inline ::std::string* Root_Stmt::release_line_range() {
  clear_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_range_;
    line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Root_Ref

// optional int32 id = 1;
inline bool Root_Ref::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root_Ref::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root_Ref::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root_Ref::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root_Ref::id() const {
  return id_;
}
inline void Root_Ref::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 parent_id = 2;
inline bool Root_Ref::has_parent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root_Ref::set_has_parent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root_Ref::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root_Ref::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root_Ref::parent_id() const {
  return parent_id_;
}
inline void Root_Ref::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional string vma_intervals = 3;
inline bool Root_Ref::has_vma_intervals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root_Ref::set_has_vma_intervals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root_Ref::clear_has_vma_intervals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root_Ref::clear_vma_intervals() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    vma_intervals_->clear();
  }
  clear_has_vma_intervals();
}
inline const ::std::string& Root_Ref::vma_intervals() const {
  return *vma_intervals_;
}
inline void Root_Ref::set_vma_intervals(const ::std::string& value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Ref::set_vma_intervals(const char* value) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(value);
}
inline void Root_Ref::set_vma_intervals(const char* value, size_t size) {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  vma_intervals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Ref::mutable_vma_intervals() {
  set_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    vma_intervals_ = new ::std::string;
  }
  return vma_intervals_;
}
inline ::std::string* Root_Ref::release_vma_intervals() {
  clear_has_vma_intervals();
  if (vma_intervals_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vma_intervals_;
    vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string line_range = 4;
inline bool Root_Ref::has_line_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Root_Ref::set_has_line_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Root_Ref::clear_has_line_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Root_Ref::clear_line_range() {
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    line_range_->clear();
  }
  clear_has_line_range();
}
inline const ::std::string& Root_Ref::line_range() const {
  return *line_range_;
}
inline void Root_Ref::set_line_range(const ::std::string& value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Ref::set_line_range(const char* value) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(value);
}
inline void Root_Ref::set_line_range(const char* value, size_t size) {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  line_range_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root_Ref::mutable_line_range() {
  set_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    line_range_ = new ::std::string;
  }
  return line_range_;
}
inline ::std::string* Root_Ref::release_line_range() {
  clear_has_line_range();
  if (line_range_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_range_;
    line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 begin = 5;
inline bool Root_Ref::has_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Root_Ref::set_has_begin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Root_Ref::clear_has_begin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Root_Ref::clear_begin() {
  begin_ = 0u;
  clear_has_begin();
}
inline ::google::protobuf::uint32 Root_Ref::begin() const {
  return begin_;
}
inline void Root_Ref::set_begin(::google::protobuf::uint32 value) {
  set_has_begin();
  begin_ = value;
}

// optional uint32 end = 6;
inline bool Root_Ref::has_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Root_Ref::set_has_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Root_Ref::clear_has_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Root_Ref::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 Root_Ref::end() const {
  return end_;
}
inline void Root_Ref::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// Root

// optional string name = 1;
inline bool Root::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Root::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Root::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Root::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Root::name() const {
  return *name_;
}
inline void Root::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Root::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Root::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Root::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 id = 2;
inline bool Root::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Root::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Root::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Root::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Root::id() const {
  return id_;
}
inline void Root::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 parent_id = 3;
inline bool Root::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Root::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Root::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Root::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 Root::parent_id() const {
  return parent_id_;
}
inline void Root::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// -------------------------------------------------------------------

// Type

// required int32 type = 1;
inline bool Type::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Type::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Type::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Type::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Type::type() const {
  return type_;
}
inline void Type::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StructTree

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Struct_2dTree_2eproto__INCLUDED
