// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CCT-Tree.proto

#ifndef PROTOBUF_CCT_2dTree_2eproto__INCLUDED
#define PROTOBUF_CCT_2dTree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Nodes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CCT_2dTree_2eproto();
void protobuf_AssignDesc_CCT_2dTree_2eproto();
void protobuf_ShutdownFile_CCT_2dTree_2eproto();

class GenNode;
class Metric;

// ===================================================================

class GenNode : public ::google::protobuf::Message {
 public:
  GenNode();
  virtual ~GenNode();
  
  GenNode(const GenNode& from);
  
  inline GenNode& operator=(const GenNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GenNode& default_instance();
  
  void Swap(GenNode* other);
  
  // implements Message ----------------------------------------------
  
  GenNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GenNode& from);
  void MergeFrom(const GenNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 static_scope_id = 2;
  inline bool has_static_scope_id() const;
  inline void clear_static_scope_id();
  static const int kStaticScopeIdFieldNumber = 2;
  inline ::google::protobuf::int32 static_scope_id() const;
  inline void set_static_scope_id(::google::protobuf::int32 value);
  
  // required int32 parent_id = 3;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);
  
  // optional int32 name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline ::google::protobuf::int32 name() const;
  inline void set_name(::google::protobuf::int32 value);
  
  // repeated .Nodes.Metric metric_values = 5;
  inline int metric_values_size() const;
  inline void clear_metric_values();
  static const int kMetricValuesFieldNumber = 5;
  inline const ::Nodes::Metric& metric_values(int index) const;
  inline ::Nodes::Metric* mutable_metric_values(int index);
  inline ::Nodes::Metric* add_metric_values();
  inline const ::google::protobuf::RepeatedPtrField< ::Nodes::Metric >&
      metric_values() const;
  inline ::google::protobuf::RepeatedPtrField< ::Nodes::Metric >*
      mutable_metric_values();
  
  // required int32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 trace_id = 7;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 7;
  inline ::google::protobuf::int32 trace_id() const;
  inline void set_trace_id(::google::protobuf::int32 value);
  
  // optional int32 depth = 8;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 8;
  inline ::google::protobuf::int32 depth() const;
  inline void set_depth(::google::protobuf::int32 value);
  
  // optional int32 file = 9;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 9;
  inline ::google::protobuf::int32 file() const;
  inline void set_file(::google::protobuf::int32 value);
  
  // optional int32 line_range = 10;
  inline bool has_line_range() const;
  inline void clear_line_range();
  static const int kLineRangeFieldNumber = 10;
  inline ::google::protobuf::int32 line_range() const;
  inline void set_line_range(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Nodes.GenNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_static_scope_id();
  inline void clear_has_static_scope_id();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_line_range();
  inline void clear_has_line_range();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 static_scope_id_;
  ::google::protobuf::int32 parent_id_;
  ::google::protobuf::int32 name_;
  ::google::protobuf::RepeatedPtrField< ::Nodes::Metric > metric_values_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 trace_id_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 file_;
  ::google::protobuf::int32 line_range_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_CCT_2dTree_2eproto();
  friend void protobuf_AssignDesc_CCT_2dTree_2eproto();
  friend void protobuf_ShutdownFile_CCT_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static GenNode* default_instance_;
};
// -------------------------------------------------------------------

class Metric : public ::google::protobuf::Message {
 public:
  Metric();
  virtual ~Metric();
  
  Metric(const Metric& from);
  
  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metric& default_instance();
  
  void Swap(Metric* other);
  
  // implements Message ----------------------------------------------
  
  Metric* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::google::protobuf::int32 name() const;
  inline void set_name(::google::protobuf::int32 value);
  
  // required double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);
  
  // @@protoc_insertion_point(class_scope:Nodes.Metric)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double value_;
  ::google::protobuf::int32 name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_CCT_2dTree_2eproto();
  friend void protobuf_AssignDesc_CCT_2dTree_2eproto();
  friend void protobuf_ShutdownFile_CCT_2dTree_2eproto();
  
  void InitAsDefaultInstance();
  static Metric* default_instance_;
};
// ===================================================================


// ===================================================================

// GenNode

// optional int32 id = 1;
inline bool GenNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GenNode::id() const {
  return id_;
}
inline void GenNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 static_scope_id = 2;
inline bool GenNode::has_static_scope_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenNode::set_has_static_scope_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenNode::clear_has_static_scope_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenNode::clear_static_scope_id() {
  static_scope_id_ = 0;
  clear_has_static_scope_id();
}
inline ::google::protobuf::int32 GenNode::static_scope_id() const {
  return static_scope_id_;
}
inline void GenNode::set_static_scope_id(::google::protobuf::int32 value) {
  set_has_static_scope_id();
  static_scope_id_ = value;
}

// required int32 parent_id = 3;
inline bool GenNode::has_parent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenNode::set_has_parent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenNode::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenNode::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 GenNode::parent_id() const {
  return parent_id_;
}
inline void GenNode::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// optional int32 name = 4;
inline bool GenNode::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenNode::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GenNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GenNode::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::google::protobuf::int32 GenNode::name() const {
  return name_;
}
inline void GenNode::set_name(::google::protobuf::int32 value) {
  set_has_name();
  name_ = value;
}

// repeated .Nodes.Metric metric_values = 5;
inline int GenNode::metric_values_size() const {
  return metric_values_.size();
}
inline void GenNode::clear_metric_values() {
  metric_values_.Clear();
}
inline const ::Nodes::Metric& GenNode::metric_values(int index) const {
  return metric_values_.Get(index);
}
inline ::Nodes::Metric* GenNode::mutable_metric_values(int index) {
  return metric_values_.Mutable(index);
}
inline ::Nodes::Metric* GenNode::add_metric_values() {
  return metric_values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nodes::Metric >&
GenNode::metric_values() const {
  return metric_values_;
}
inline ::google::protobuf::RepeatedPtrField< ::Nodes::Metric >*
GenNode::mutable_metric_values() {
  return &metric_values_;
}

// required int32 type = 6;
inline bool GenNode::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GenNode::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GenNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GenNode::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GenNode::type() const {
  return type_;
}
inline void GenNode::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 trace_id = 7;
inline bool GenNode::has_trace_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GenNode::set_has_trace_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GenNode::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GenNode::clear_trace_id() {
  trace_id_ = 0;
  clear_has_trace_id();
}
inline ::google::protobuf::int32 GenNode::trace_id() const {
  return trace_id_;
}
inline void GenNode::set_trace_id(::google::protobuf::int32 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// optional int32 depth = 8;
inline bool GenNode::has_depth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GenNode::set_has_depth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GenNode::clear_has_depth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GenNode::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 GenNode::depth() const {
  return depth_;
}
inline void GenNode::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
}

// optional int32 file = 9;
inline bool GenNode::has_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GenNode::set_has_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GenNode::clear_has_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GenNode::clear_file() {
  file_ = 0;
  clear_has_file();
}
inline ::google::protobuf::int32 GenNode::file() const {
  return file_;
}
inline void GenNode::set_file(::google::protobuf::int32 value) {
  set_has_file();
  file_ = value;
}

// optional int32 line_range = 10;
inline bool GenNode::has_line_range() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GenNode::set_has_line_range() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GenNode::clear_has_line_range() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GenNode::clear_line_range() {
  line_range_ = 0;
  clear_has_line_range();
}
inline ::google::protobuf::int32 GenNode::line_range() const {
  return line_range_;
}
inline void GenNode::set_line_range(::google::protobuf::int32 value) {
  set_has_line_range();
  line_range_ = value;
}

// -------------------------------------------------------------------

// Metric

// required int32 name = 1;
inline bool Metric::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metric::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metric::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metric::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::google::protobuf::int32 Metric::name() const {
  return name_;
}
inline void Metric::set_name(::google::protobuf::int32 value) {
  set_has_name();
  name_ = value;
}

// required double value = 2;
inline bool Metric::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metric::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metric::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metric::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Metric::value() const {
  return value_;
}
inline void Metric::set_value(double value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Nodes

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CCT_2dTree_2eproto__INCLUDED
