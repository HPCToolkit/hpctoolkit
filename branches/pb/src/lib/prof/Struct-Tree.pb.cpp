// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Struct-Tree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace StructTree {

namespace {

const ::google::protobuf::Descriptor* Root_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_LM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_LM_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_Proc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_Proc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_Alien_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_Alien_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_Loop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_Loop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_Stmt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_Stmt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_Ref_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_Ref_reflection_ = NULL;
const ::google::protobuf::Descriptor* Type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Type_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Struct_2dTree_2eproto() {
  protobuf_AddDesc_Struct_2dTree_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Struct-Tree.proto");
  GOOGLE_CHECK(file != NULL);
  Root_descriptor_ = file->message_type(0);
  static const int Root_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, parent_id_),
  };
  Root_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_descriptor_,
      Root::default_instance_,
      Root_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root));
  Root_Group_descriptor_ = Root_descriptor_->nested_type(0);
  static const int Root_Group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Group, parent_id_),
  };
  Root_Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_Group_descriptor_,
      Root_Group::default_instance_,
      Root_Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_Group));
  Root_LM_descriptor_ = Root_descriptor_->nested_type(1);
  static const int Root_LM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_LM, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_LM, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_LM, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_LM, vma_intervals_),
  };
  Root_LM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_LM_descriptor_,
      Root_LM::default_instance_,
      Root_LM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_LM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_LM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_LM));
  Root_File_descriptor_ = Root_descriptor_->nested_type(2);
  static const int Root_File_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_File, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_File, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_File, parent_id_),
  };
  Root_File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_File_descriptor_,
      Root_File::default_instance_,
      Root_File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_File));
  Root_Proc_descriptor_ = Root_descriptor_->nested_type(3);
  static const int Root_Proc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, vma_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, line_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, link_name_),
  };
  Root_Proc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_Proc_descriptor_,
      Root_Proc::default_instance_,
      Root_Proc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Proc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_Proc));
  Root_Alien_descriptor_ = Root_descriptor_->nested_type(4);
  static const int Root_Alien_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, vma_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, line_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, file_name_),
  };
  Root_Alien_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_Alien_descriptor_,
      Root_Alien::default_instance_,
      Root_Alien_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Alien, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_Alien));
  Root_Loop_descriptor_ = Root_descriptor_->nested_type(5);
  static const int Root_Loop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Loop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Loop, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Loop, vma_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Loop, line_range_),
  };
  Root_Loop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_Loop_descriptor_,
      Root_Loop::default_instance_,
      Root_Loop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Loop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Loop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_Loop));
  Root_Stmt_descriptor_ = Root_descriptor_->nested_type(6);
  static const int Root_Stmt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Stmt, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Stmt, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Stmt, vma_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Stmt, line_range_),
  };
  Root_Stmt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_Stmt_descriptor_,
      Root_Stmt::default_instance_,
      Root_Stmt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Stmt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Stmt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_Stmt));
  Root_Ref_descriptor_ = Root_descriptor_->nested_type(7);
  static const int Root_Ref_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, vma_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, line_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, end_),
  };
  Root_Ref_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_Ref_descriptor_,
      Root_Ref::default_instance_,
      Root_Ref_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root_Ref, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root_Ref));
  Type_descriptor_ = file->message_type(1);
  static const int Type_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, type_),
  };
  Type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Type_descriptor_,
      Type::default_instance_,
      Type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Type));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Struct_2dTree_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_descriptor_, &Root::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_Group_descriptor_, &Root_Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_LM_descriptor_, &Root_LM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_File_descriptor_, &Root_File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_Proc_descriptor_, &Root_Proc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_Alien_descriptor_, &Root_Alien::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_Loop_descriptor_, &Root_Loop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_Stmt_descriptor_, &Root_Stmt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_Ref_descriptor_, &Root_Ref::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Type_descriptor_, &Type::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Struct_2dTree_2eproto() {
  delete Root::default_instance_;
  delete Root_reflection_;
  delete Root_Group::default_instance_;
  delete Root_Group_reflection_;
  delete Root_LM::default_instance_;
  delete Root_LM_reflection_;
  delete Root_File::default_instance_;
  delete Root_File_reflection_;
  delete Root_Proc::default_instance_;
  delete Root_Proc_reflection_;
  delete Root_Alien::default_instance_;
  delete Root_Alien_reflection_;
  delete Root_Loop::default_instance_;
  delete Root_Loop_reflection_;
  delete Root_Stmt::default_instance_;
  delete Root_Stmt_reflection_;
  delete Root_Ref::default_instance_;
  delete Root_Ref_reflection_;
  delete Type::default_instance_;
  delete Type_reflection_;
}

void protobuf_AddDesc_Struct_2dTree_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Struct-Tree.proto\022\nStructTree\"\340\005\n\004Root"
    "\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\021\n\tparent_id\030"
    "\003 \002(\005\0324\n\005Group\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t"
    "\022\021\n\tparent_id\030\003 \002(\005\032H\n\002LM\022\n\n\002id\030\001 \001(\005\022\014\n"
    "\004name\030\002 \001(\t\022\021\n\tparent_id\030\003 \002(\005\022\025\n\rvma_in"
    "tervals\030\004 \001(\t\0323\n\004File\022\n\n\002id\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\021\n\tparent_id\030\003 \002(\005\032q\n\004Proc\022\n\n\002id"
    "\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tparent_id\030\003 \002(\005\022"
    "\025\n\rvma_intervals\030\004 \001(\t\022\022\n\nline_range\030\005 \001"
    "(\t\022\021\n\tlink_name\030\006 \001(\t\032r\n\005Alien\022\n\n\002id\030\001 \001"
    "(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tparent_id\030\003 \002(\005\022\025\n\rv"
    "ma_intervals\030\004 \001(\t\022\022\n\nline_range\030\005 \001(\t\022\021"
    "\n\tfile_name\030\006 \001(\t\032P\n\004Loop\022\n\n\002id\030\001 \001(\005\022\021\n"
    "\tparent_id\030\002 \002(\005\022\025\n\rvma_intervals\030\003 \001(\t\022"
    "\022\n\nline_range\030\004 \001(\t\032P\n\004Stmt\022\n\n\002id\030\001 \001(\005\022"
    "\021\n\tparent_id\030\002 \002(\005\022\025\n\rvma_intervals\030\003 \001("
    "\t\022\022\n\nline_range\030\004 \001(\t\032k\n\003Ref\022\n\n\002id\030\001 \001(\005"
    "\022\021\n\tparent_id\030\002 \002(\005\022\025\n\rvma_intervals\030\003 \001"
    "(\t\022\022\n\nline_range\030\004 \001(\t\022\r\n\005begin\030\005 \001(\r\022\013\n"
    "\003end\030\006 \001(\r\"\024\n\004Type\022\014\n\004type\030\001 \002(\005B\030\n\010Prot"
    "obufB\014StructTreePB", 818);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Struct-Tree.proto", &protobuf_RegisterTypes);
  Root::default_instance_ = new Root();
  Root_Group::default_instance_ = new Root_Group();
  Root_LM::default_instance_ = new Root_LM();
  Root_File::default_instance_ = new Root_File();
  Root_Proc::default_instance_ = new Root_Proc();
  Root_Alien::default_instance_ = new Root_Alien();
  Root_Loop::default_instance_ = new Root_Loop();
  Root_Stmt::default_instance_ = new Root_Stmt();
  Root_Ref::default_instance_ = new Root_Ref();
  Type::default_instance_ = new Type();
  Root::default_instance_->InitAsDefaultInstance();
  Root_Group::default_instance_->InitAsDefaultInstance();
  Root_LM::default_instance_->InitAsDefaultInstance();
  Root_File::default_instance_->InitAsDefaultInstance();
  Root_Proc::default_instance_->InitAsDefaultInstance();
  Root_Alien::default_instance_->InitAsDefaultInstance();
  Root_Loop::default_instance_->InitAsDefaultInstance();
  Root_Stmt::default_instance_->InitAsDefaultInstance();
  Root_Ref::default_instance_->InitAsDefaultInstance();
  Type::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Struct_2dTree_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Struct_2dTree_2eproto {
  StaticDescriptorInitializer_Struct_2dTree_2eproto() {
    protobuf_AddDesc_Struct_2dTree_2eproto();
  }
} static_descriptor_initializer_Struct_2dTree_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Root_Group::kIdFieldNumber;
const int Root_Group::kNameFieldNumber;
const int Root_Group::kParentIdFieldNumber;
#endif  // !_MSC_VER

Root_Group::Root_Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_Group::InitAsDefaultInstance() {
}

Root_Group::Root_Group(const Root_Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_Group::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_Group::~Root_Group() {
  SharedDtor();
}

void Root_Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Root_Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_Group_descriptor_;
}

const Root_Group& Root_Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_Group* Root_Group::default_instance_ = NULL;

Root_Group* Root_Group::New() const {
  return new Root_Group;
}

void Root_Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    parent_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_Group::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_Group::MergeFrom(const Root_Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_Group::CopyFrom(const Root_Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Root_Group::Swap(Root_Group* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_Group_descriptor_;
  metadata.reflection = Root_Group_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_LM::kIdFieldNumber;
const int Root_LM::kNameFieldNumber;
const int Root_LM::kParentIdFieldNumber;
const int Root_LM::kVmaIntervalsFieldNumber;
#endif  // !_MSC_VER

Root_LM::Root_LM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_LM::InitAsDefaultInstance() {
}

Root_LM::Root_LM(const Root_LM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_LM::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_id_ = 0;
  vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_LM::~Root_LM() {
  SharedDtor();
}

void Root_LM::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    delete vma_intervals_;
  }
  if (this != default_instance_) {
  }
}

void Root_LM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_LM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_LM_descriptor_;
}

const Root_LM& Root_LM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_LM* Root_LM::default_instance_ = NULL;

Root_LM* Root_LM::New() const {
  return new Root_LM;
}

void Root_LM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    parent_id_ = 0;
    if (has_vma_intervals()) {
      if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
        vma_intervals_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_LM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vma_intervals;
        break;
      }
      
      // optional string vma_intervals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vma_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vma_intervals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vma_intervals().data(), this->vma_intervals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_LM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }
  
  // optional string vma_intervals = 4;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->vma_intervals(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_LM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }
  
  // optional string vma_intervals = 4;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vma_intervals(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_LM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
    // optional string vma_intervals = 4;
    if (has_vma_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vma_intervals());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_LM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_LM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_LM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_LM::MergeFrom(const Root_LM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_vma_intervals()) {
      set_vma_intervals(from.vma_intervals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_LM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_LM::CopyFrom(const Root_LM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_LM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Root_LM::Swap(Root_LM* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(vma_intervals_, other->vma_intervals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_LM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_LM_descriptor_;
  metadata.reflection = Root_LM_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_File::kIdFieldNumber;
const int Root_File::kNameFieldNumber;
const int Root_File::kParentIdFieldNumber;
#endif  // !_MSC_VER

Root_File::Root_File()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_File::InitAsDefaultInstance() {
}

Root_File::Root_File(const Root_File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_File::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_File::~Root_File() {
  SharedDtor();
}

void Root_File::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Root_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_File_descriptor_;
}

const Root_File& Root_File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_File* Root_File::default_instance_ = NULL;

Root_File* Root_File::New() const {
  return new Root_File;
}

void Root_File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    parent_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_File::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_File::MergeFrom(const Root_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_File::CopyFrom(const Root_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Root_File::Swap(Root_File* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_File_descriptor_;
  metadata.reflection = Root_File_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_Proc::kIdFieldNumber;
const int Root_Proc::kNameFieldNumber;
const int Root_Proc::kParentIdFieldNumber;
const int Root_Proc::kVmaIntervalsFieldNumber;
const int Root_Proc::kLineRangeFieldNumber;
const int Root_Proc::kLinkNameFieldNumber;
#endif  // !_MSC_VER

Root_Proc::Root_Proc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_Proc::InitAsDefaultInstance() {
}

Root_Proc::Root_Proc(const Root_Proc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_Proc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_id_ = 0;
  vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  link_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_Proc::~Root_Proc() {
  SharedDtor();
}

void Root_Proc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    delete vma_intervals_;
  }
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    delete line_range_;
  }
  if (link_name_ != &::google::protobuf::internal::kEmptyString) {
    delete link_name_;
  }
  if (this != default_instance_) {
  }
}

void Root_Proc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_Proc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_Proc_descriptor_;
}

const Root_Proc& Root_Proc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_Proc* Root_Proc::default_instance_ = NULL;

Root_Proc* Root_Proc::New() const {
  return new Root_Proc;
}

void Root_Proc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    parent_id_ = 0;
    if (has_vma_intervals()) {
      if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
        vma_intervals_->clear();
      }
    }
    if (has_line_range()) {
      if (line_range_ != &::google::protobuf::internal::kEmptyString) {
        line_range_->clear();
      }
    }
    if (has_link_name()) {
      if (link_name_ != &::google::protobuf::internal::kEmptyString) {
        link_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_Proc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vma_intervals;
        break;
      }
      
      // optional string vma_intervals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vma_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vma_intervals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vma_intervals().data(), this->vma_intervals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_line_range;
        break;
      }
      
      // optional string line_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->line_range().data(), this->line_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_link_name;
        break;
      }
      
      // optional string link_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link_name().data(), this->link_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_Proc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }
  
  // optional string vma_intervals = 4;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->vma_intervals(), output);
  }
  
  // optional string line_range = 5;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->line_range(), output);
  }
  
  // optional string link_name = 6;
  if (has_link_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_name().data(), this->link_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->link_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_Proc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }
  
  // optional string vma_intervals = 4;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vma_intervals(), target);
  }
  
  // optional string line_range = 5;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->line_range(), target);
  }
  
  // optional string link_name = 6;
  if (has_link_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_name().data(), this->link_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->link_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_Proc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
    // optional string vma_intervals = 4;
    if (has_vma_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vma_intervals());
    }
    
    // optional string line_range = 5;
    if (has_line_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_range());
    }
    
    // optional string link_name = 6;
    if (has_link_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_Proc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_Proc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_Proc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_Proc::MergeFrom(const Root_Proc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_vma_intervals()) {
      set_vma_intervals(from.vma_intervals());
    }
    if (from.has_line_range()) {
      set_line_range(from.line_range());
    }
    if (from.has_link_name()) {
      set_link_name(from.link_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_Proc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_Proc::CopyFrom(const Root_Proc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_Proc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Root_Proc::Swap(Root_Proc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(vma_intervals_, other->vma_intervals_);
    std::swap(line_range_, other->line_range_);
    std::swap(link_name_, other->link_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_Proc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_Proc_descriptor_;
  metadata.reflection = Root_Proc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_Alien::kIdFieldNumber;
const int Root_Alien::kNameFieldNumber;
const int Root_Alien::kParentIdFieldNumber;
const int Root_Alien::kVmaIntervalsFieldNumber;
const int Root_Alien::kLineRangeFieldNumber;
const int Root_Alien::kFileNameFieldNumber;
#endif  // !_MSC_VER

Root_Alien::Root_Alien()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_Alien::InitAsDefaultInstance() {
}

Root_Alien::Root_Alien(const Root_Alien& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_Alien::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_id_ = 0;
  vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_Alien::~Root_Alien() {
  SharedDtor();
}

void Root_Alien::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    delete vma_intervals_;
  }
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    delete line_range_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void Root_Alien::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_Alien::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_Alien_descriptor_;
}

const Root_Alien& Root_Alien::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_Alien* Root_Alien::default_instance_ = NULL;

Root_Alien* Root_Alien::New() const {
  return new Root_Alien;
}

void Root_Alien::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    parent_id_ = 0;
    if (has_vma_intervals()) {
      if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
        vma_intervals_->clear();
      }
    }
    if (has_line_range()) {
      if (line_range_ != &::google::protobuf::internal::kEmptyString) {
        line_range_->clear();
      }
    }
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_Alien::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vma_intervals;
        break;
      }
      
      // optional string vma_intervals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vma_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vma_intervals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vma_intervals().data(), this->vma_intervals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_line_range;
        break;
      }
      
      // optional string line_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->line_range().data(), this->line_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_name;
        break;
      }
      
      // optional string file_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_Alien::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }
  
  // optional string vma_intervals = 4;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->vma_intervals(), output);
  }
  
  // optional string line_range = 5;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->line_range(), output);
  }
  
  // optional string file_name = 6;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->file_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_Alien::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }
  
  // optional string vma_intervals = 4;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vma_intervals(), target);
  }
  
  // optional string line_range = 5;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->line_range(), target);
  }
  
  // optional string file_name = 6;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_Alien::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
    // optional string vma_intervals = 4;
    if (has_vma_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vma_intervals());
    }
    
    // optional string line_range = 5;
    if (has_line_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_range());
    }
    
    // optional string file_name = 6;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_Alien::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_Alien* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_Alien*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_Alien::MergeFrom(const Root_Alien& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_vma_intervals()) {
      set_vma_intervals(from.vma_intervals());
    }
    if (from.has_line_range()) {
      set_line_range(from.line_range());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_Alien::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_Alien::CopyFrom(const Root_Alien& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_Alien::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Root_Alien::Swap(Root_Alien* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(vma_intervals_, other->vma_intervals_);
    std::swap(line_range_, other->line_range_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_Alien::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_Alien_descriptor_;
  metadata.reflection = Root_Alien_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_Loop::kIdFieldNumber;
const int Root_Loop::kParentIdFieldNumber;
const int Root_Loop::kVmaIntervalsFieldNumber;
const int Root_Loop::kLineRangeFieldNumber;
#endif  // !_MSC_VER

Root_Loop::Root_Loop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_Loop::InitAsDefaultInstance() {
}

Root_Loop::Root_Loop(const Root_Loop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_Loop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  parent_id_ = 0;
  vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_Loop::~Root_Loop() {
  SharedDtor();
}

void Root_Loop::SharedDtor() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    delete vma_intervals_;
  }
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    delete line_range_;
  }
  if (this != default_instance_) {
  }
}

void Root_Loop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_Loop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_Loop_descriptor_;
}

const Root_Loop& Root_Loop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_Loop* Root_Loop::default_instance_ = NULL;

Root_Loop* Root_Loop::New() const {
  return new Root_Loop;
}

void Root_Loop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    parent_id_ = 0;
    if (has_vma_intervals()) {
      if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
        vma_intervals_->clear();
      }
    }
    if (has_line_range()) {
      if (line_range_ != &::google::protobuf::internal::kEmptyString) {
        line_range_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_Loop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vma_intervals;
        break;
      }
      
      // optional string vma_intervals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vma_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vma_intervals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vma_intervals().data(), this->vma_intervals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_range;
        break;
      }
      
      // optional string line_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->line_range().data(), this->line_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_Loop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }
  
  // optional string vma_intervals = 3;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vma_intervals(), output);
  }
  
  // optional string line_range = 4;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->line_range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_Loop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_id(), target);
  }
  
  // optional string vma_intervals = 3;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vma_intervals(), target);
  }
  
  // optional string line_range = 4;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line_range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_Loop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
    // optional string vma_intervals = 3;
    if (has_vma_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vma_intervals());
    }
    
    // optional string line_range = 4;
    if (has_line_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_Loop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_Loop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_Loop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_Loop::MergeFrom(const Root_Loop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_vma_intervals()) {
      set_vma_intervals(from.vma_intervals());
    }
    if (from.has_line_range()) {
      set_line_range(from.line_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_Loop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_Loop::CopyFrom(const Root_Loop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_Loop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Root_Loop::Swap(Root_Loop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(vma_intervals_, other->vma_intervals_);
    std::swap(line_range_, other->line_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_Loop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_Loop_descriptor_;
  metadata.reflection = Root_Loop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_Stmt::kIdFieldNumber;
const int Root_Stmt::kParentIdFieldNumber;
const int Root_Stmt::kVmaIntervalsFieldNumber;
const int Root_Stmt::kLineRangeFieldNumber;
#endif  // !_MSC_VER

Root_Stmt::Root_Stmt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_Stmt::InitAsDefaultInstance() {
}

Root_Stmt::Root_Stmt(const Root_Stmt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_Stmt::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  parent_id_ = 0;
  vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_Stmt::~Root_Stmt() {
  SharedDtor();
}

void Root_Stmt::SharedDtor() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    delete vma_intervals_;
  }
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    delete line_range_;
  }
  if (this != default_instance_) {
  }
}

void Root_Stmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_Stmt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_Stmt_descriptor_;
}

const Root_Stmt& Root_Stmt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_Stmt* Root_Stmt::default_instance_ = NULL;

Root_Stmt* Root_Stmt::New() const {
  return new Root_Stmt;
}

void Root_Stmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    parent_id_ = 0;
    if (has_vma_intervals()) {
      if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
        vma_intervals_->clear();
      }
    }
    if (has_line_range()) {
      if (line_range_ != &::google::protobuf::internal::kEmptyString) {
        line_range_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_Stmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vma_intervals;
        break;
      }
      
      // optional string vma_intervals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vma_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vma_intervals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vma_intervals().data(), this->vma_intervals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_range;
        break;
      }
      
      // optional string line_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->line_range().data(), this->line_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_Stmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }
  
  // optional string vma_intervals = 3;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vma_intervals(), output);
  }
  
  // optional string line_range = 4;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->line_range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_Stmt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_id(), target);
  }
  
  // optional string vma_intervals = 3;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vma_intervals(), target);
  }
  
  // optional string line_range = 4;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line_range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_Stmt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
    // optional string vma_intervals = 3;
    if (has_vma_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vma_intervals());
    }
    
    // optional string line_range = 4;
    if (has_line_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_Stmt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_Stmt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_Stmt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_Stmt::MergeFrom(const Root_Stmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_vma_intervals()) {
      set_vma_intervals(from.vma_intervals());
    }
    if (from.has_line_range()) {
      set_line_range(from.line_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_Stmt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_Stmt::CopyFrom(const Root_Stmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_Stmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Root_Stmt::Swap(Root_Stmt* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(vma_intervals_, other->vma_intervals_);
    std::swap(line_range_, other->line_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_Stmt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_Stmt_descriptor_;
  metadata.reflection = Root_Stmt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root_Ref::kIdFieldNumber;
const int Root_Ref::kParentIdFieldNumber;
const int Root_Ref::kVmaIntervalsFieldNumber;
const int Root_Ref::kLineRangeFieldNumber;
const int Root_Ref::kBeginFieldNumber;
const int Root_Ref::kEndFieldNumber;
#endif  // !_MSC_VER

Root_Ref::Root_Ref()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root_Ref::InitAsDefaultInstance() {
}

Root_Ref::Root_Ref(const Root_Ref& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root_Ref::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  parent_id_ = 0;
  vma_intervals_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_range_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root_Ref::~Root_Ref() {
  SharedDtor();
}

void Root_Ref::SharedDtor() {
  if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
    delete vma_intervals_;
  }
  if (line_range_ != &::google::protobuf::internal::kEmptyString) {
    delete line_range_;
  }
  if (this != default_instance_) {
  }
}

void Root_Ref::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root_Ref::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_Ref_descriptor_;
}

const Root_Ref& Root_Ref::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root_Ref* Root_Ref::default_instance_ = NULL;

Root_Ref* Root_Ref::New() const {
  return new Root_Ref;
}

void Root_Ref::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    parent_id_ = 0;
    if (has_vma_intervals()) {
      if (vma_intervals_ != &::google::protobuf::internal::kEmptyString) {
        vma_intervals_->clear();
      }
    }
    if (has_line_range()) {
      if (line_range_ != &::google::protobuf::internal::kEmptyString) {
        line_range_->clear();
      }
    }
    begin_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root_Ref::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vma_intervals;
        break;
      }
      
      // optional string vma_intervals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vma_intervals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vma_intervals()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vma_intervals().data(), this->vma_intervals().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_line_range;
        break;
      }
      
      // optional string line_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_range()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->line_range().data(), this->line_range().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_begin;
        break;
      }
      
      // optional uint32 begin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end;
        break;
      }
      
      // optional uint32 end = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root_Ref::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 parent_id = 2;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }
  
  // optional string vma_intervals = 3;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vma_intervals(), output);
  }
  
  // optional string line_range = 4;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->line_range(), output);
  }
  
  // optional uint32 begin = 5;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->begin(), output);
  }
  
  // optional uint32 end = 6;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root_Ref::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 parent_id = 2;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_id(), target);
  }
  
  // optional string vma_intervals = 3;
  if (has_vma_intervals()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vma_intervals().data(), this->vma_intervals().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vma_intervals(), target);
  }
  
  // optional string line_range = 4;
  if (has_line_range()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->line_range().data(), this->line_range().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line_range(), target);
  }
  
  // optional uint32 begin = 5;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->begin(), target);
  }
  
  // optional uint32 end = 6;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root_Ref::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 parent_id = 2;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
    // optional string vma_intervals = 3;
    if (has_vma_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vma_intervals());
    }
    
    // optional string line_range = 4;
    if (has_line_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_range());
    }
    
    // optional uint32 begin = 5;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin());
    }
    
    // optional uint32 end = 6;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root_Ref::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root_Ref* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root_Ref*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root_Ref::MergeFrom(const Root_Ref& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_vma_intervals()) {
      set_vma_intervals(from.vma_intervals());
    }
    if (from.has_line_range()) {
      set_line_range(from.line_range());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root_Ref::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root_Ref::CopyFrom(const Root_Ref& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root_Ref::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void Root_Ref::Swap(Root_Ref* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(vma_intervals_, other->vma_intervals_);
    std::swap(line_range_, other->line_range_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root_Ref::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_Ref_descriptor_;
  metadata.reflection = Root_Ref_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Root::kNameFieldNumber;
const int Root::kIdFieldNumber;
const int Root::kParentIdFieldNumber;
#endif  // !_MSC_VER

Root::Root()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Root::InitAsDefaultInstance() {
}

Root::Root(const Root& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Root::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  parent_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root::~Root() {
  SharedDtor();
}

void Root::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Root::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_descriptor_;
}

const Root& Root::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Root* Root::default_instance_ = NULL;

Root* Root::New() const {
  return new Root;
}

void Root::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    parent_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_parent_id;
        break;
      }
      
      // required int32 parent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Root::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parent_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Root::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 parent_id = 3;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parent_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Root::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 parent_id = 3;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void Root::Swap(Root* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_descriptor_;
  metadata.reflection = Root_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Type::kTypeFieldNumber;
#endif  // !_MSC_VER

Type::Type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Type::InitAsDefaultInstance() {
}

Type::Type(const Type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Type::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Type::~Type() {
  SharedDtor();
}

void Type::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}

const Type& Type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Struct_2dTree_2eproto();  return *default_instance_;
}

Type* Type::default_instance_ = NULL;

Type* Type::New() const {
  return new Type;
}

void Type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Type::Swap(Type* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Type_descriptor_;
  metadata.reflection = Type_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace StructTree

// @@protoc_insertion_point(global_scope)
