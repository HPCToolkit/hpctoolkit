# Paradyn overall build configuration (unix)
#
# $Id: make.config,v 1.227 2007/12/04 18:07:24 legendre Exp $
#

SUITE_NAME	= Paradyn
RELEASE_NUM	= 5.1

#BUILD_MARK	=
EXPLICIT_DEPENDS = 1
#USE_DEPRECATED_BPATCH_VECTOR	= 1
#IBM_BPATCH_COMPAT = 1
# Apart from actual "full" releases, don't modify these build Id components.
# For personal/experimental builds, feel free to use your core/make.config.local
# file to (re-)define BUILD_MARK as you desire.

# most "main" modules are only two levels deep, but we need to be able to
# change this for those that are deeper in the tree
ifndef TO_CORE
TO_CORE		= ../..
endif
TO_SCRIPTS = $(TO_CORE)/../scripts

# If the PLATFORM environment variable isn't set, we'll try to figure it out.
ifndef PLATFORM
SNAME = $(shell if [ -f ${TO_SCRIPTS}/sysname ]; then echo ${TO_SCRIPTS}/sysname; else pwd; fi )
ifdef SNAME
CURPLAT = $(shell ${SNAME})

# IA64/Linux, i386/Linux, or x86-64/Linux
ifneq (,$(findstring linux,$(CURPLAT)))
ifneq (,$(findstring ia64,$(CURPLAT)))
PLATFORM = ia64-unknown-linux2.4
endif 
ifneq (,$(findstring i686,$(CURPLAT)))
PLATFORM = i386-unknown-linux2.4 
endif
ifneq (,$(findstring i586,$(CURPLAT)))
PLATFORM = i386-unknown-linux2.4
endif
ifneq (,$(findstring i486,$(CURPLAT)))
PLATFORM = i386-unknown-linux2.4
endif
ifneq (,$(findstring i386,$(CURPLAT)))
PLATFORM = i386-unknown-linux2.4 
endif
ifneq (,$(findstring x86_64,$(CURPLAT)))
PLATFORM = x86_64-unknown-linux2.4
endif
endif
# AIX
ifneq (,$(findstring aix,$(CURPLAT)))
PLATFORM = rs6000-ibm-aix5.1
endif
# Solaris
ifneq (,$(findstring solaris,$(CURPLAT)))
PLATFORM = sparc-sun-solaris2.8
endif
# Irix
ifneq (,$(findstring irix,$(CURPLAT)))
PLATFORM = mips-sgi-irix6.5
endif
ifneq (,$(findstring osf,$(CURPLAT)))
PLATFORM = alpha-dec-osf5.1
endif

endif
endif

ifndef PLATFORM
$(error Could not determine you current platform.  Please set your PLATFORM environment variable to whichever closest matches your platform:  alpha-dec-osf5.1 i386-unknown-linux2.4 i386-unknown-nt4.0 ia64-unknown-linux2.4 ix86_64-unknown-linux2.4 mips-sgi-irix6.5 rs6000-ibm-aix5.1 sparc-sun-solaris2.8 )
endif

# Destinations for library and executable installation (relative to core!)
# Warning: modification of the build/install structure is not recommended!
LIBRARY_DEST	= ../${PLATFORM}/lib
PROGRAM_DEST	= ../${PLATFORM}/bin

# Usually, we look for files, binaries, libs in $(TO_CORE)/....<something>.
# But if the file doesn't exist there (i.e. if the user hasn't checked them out
# with cvs), then we should look in a backup location.  That's what this vrble
# is about.  It's used several times below in this file.
GCC      = gcc
GXX      = g++
LINKER   = ld
AS      	= as
CC       = $(GCC)
CXX      = $(GXX)
LEX      = flex
RANLIB   = ranlib
AR       = ar
YFLAGS   = -d -y
YACC     = bison
MV       = mv
CP       = cp
RM       = rm -f
LN       = ln -s
MKDIR		= mkdir -p
CHMOD    = chmod
PERL		= perl		# NB: perl v5 or higher required!

# COLLECTOR is only used by purify & quantify
COLLECTOR	= /s/gcc-2.7.2/bin/../lib/gcc-lib/$(PLATFORM)/2.7.2/ld
# BUILDSTAMP is used to generate local build vouchers
BUILDSTAMP	= $(TO_CORE)/../scripts/buildstamp

ifndef PLATFORM
BUILDERROR: PLATFORM must be defined in environment to build (and run) Paradyn
endif

# Define all tags based on the platform string. When a new platform
# is added, add it to the list

#
# Brief description of -Ds:
#
# CAP
# cap_save_the_world: support for creating a patched binary
# cap_relocation: function relocation
# cap_stripped_binaries: recursive parsing and function discovery without symbols
# cap_async_events: 
# cap_ptrace: uses ptrace interface
# cap_proc: uses /proc interface
# cap_proc_ioctl: uses ioctl interface to proc
# cap_proc_fd: uses solaris-style multiple-fd proc interface
# cap_threads: support for threaded applications
# cap_dynamic_heap: support for a dynamically growing inferior heap
# cap_threaded_times: (Linux only) times() returns per-thread information.
# cap_syscall_trap: The ability (or necessity) to place a trap instruction at the instruction following a system call.
# cap_slicing: (i386-unknown-linux2.4 and 2.6, sparc-sun-solaris2.8 and 2.9) Intraprocedural slicing feature
# cap_32_64: platforms that support 32- and 64-bit mutatees
# cap_liveness: liveness analysis
#
# BUG
# bug_aix_broken_fork: AIX child process does not stop on fork if requested.
# bug_syscall_changepc_rewind: Linux rewinds the PC by <addr width> if
#   the change occurs within a system call; reported by SGI.

ifeq ($(PLATFORM),alpha-dec-osf5.1)
OLD_DEF     = -Dalpha_dec_osf4_0
ARCH_DEF    = -Darch_alpha
OS_DEF      = -Dos_osf=51
CAP_DEF     = -Dcap_proc -Dcap_proc_ioctl -Dcap_dynamic_heap
BUG_DEF     =
DONT_BUILD_PARADYN = 1
endif
ifeq ($(PLATFORM),mips-sgi-irix6.5)
OLD_DEF     = -Dmips_sgi_irix6_4
ARCH_DEF    = -Darch_mips
OS_DEF      = -Dos_irix=65
CAP_DEF     = -Dcap_proc -Dcap_proc_ioctl -Dcap_dynamic_heap
BUG_DEF     = -Dbug_irix_broken_sigstop
endif
ifeq ($(PLATFORM),i386-unknown-linux2.4)
OLD_DEF     = -Di386_unknown_linux2_0
ARCH_DEF    = -Darch_x86
OS_DEF      = -Dos_linux=24
CAP_DEF     = -Dcap_ptrace -Dcap_save_the_world -Dcap_relocation -Dcap_stripped_binaries -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_dwarf -Dcap_slicing -Dcap_liveness
BUG_DEF     = -Dbug_syscall_changepc_rewind
endif
ifeq ($(PLATFORM),i386-unknown-linux2.6)
OLD_DEF     = -Di386_unknown_linux2_0
ARCH_DEF    = -Darch_x86
OS_DEF      = -Dos_linux=26
CAP_DEF     = -Dcap_ptrace -Dcap_save_the_world -Dcap_relocation -Dcap_stripped_binaries -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_dwarf -Dcap_slicing -Dcap_liveness
BUG_DEF     = -Dbug_syscall_changepc_rewind
endif
ifeq ($(PLATFORM),x86_64-unknown-linux2.4)
OLD_DEF     = -Dx86_64_unknown_linux2_4
ARCH_DEF    = -Darch_x86_64
OS_DEF      = -Dos_linux=24
CAP_DEF     = -Dcap_ptrace -Dcap_save_the_world -Dcap_stripped_binaries -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_relocation -Dcap_dwarf -Dcap_32_64 -Dcap_liveness
BUG_DEF     = -Dbug_syscall_changepc_rewind
endif
ifeq ($(PLATFORM),ia64-unknown-linux2.4)
OLD_DEF     = -Dia64_unknown_linux2_4
ARCH_DEF    = -Darch_ia64
OS_DEF      = -Dos_linux=24
CAP_DEF     = -Dcap_ptrace -Dcap_async_events -Dcap_unwind -Dcap_dynamic_heap -Dcap_threads -Dcap_dwarf
BUG_DEF     =
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.8)
OLD_DEF     = -Dsparc_sun_solaris2_4
ARCH_DEF    = -Darch_sparc
OS_DEF      = -Dos_solaris=8
CAP_DEF     = -Dcap_proc -Dcap_proc_fd -Dcap_save_the_world -Dcap_async_events -Dcap_dynamic_heap -Dcap_threads -Dcap_relocation -Dcap_dwarf -Dcap_syscall_trap -Dcap_slicing
BUG_DEF     =
endif
ifeq ($(PLATFORM),sparc-sun-solaris2.9)
OLD_DEF     = -Dsparc_sun_solaris2_4
ARCH_DEF    = -Darch_sparc
OS_DEF      = -Dos_solaris=9
CAP_DEF     = -Dcap_proc -Dcap_proc_fd -Dcap_save_the_world -Dcap_async_events -Dcap_dynamic_heap -Dcap_threads -Dcap_relocation -Dcap_dwarf -Dcap_syscall_trap -Dcap_slicing
BUG_DEF     =
endif
ifeq ($(PLATFORM),rs6000-ibm-aix5.1)
OLD_DEF     = -Drs6000_ibm_aix5_1 -Drs6000_ibm_aix4_1
ARCH_DEF    = -Darch_power
OS_DEF      = -Dos_aix=51
CAP_DEF     = -Dcap_proc -Dcap_proc_fd -Dcap_save_the_world -Dcap_async_events -Dcap_relocation -Dcap_threads -Dcap_dynamic_heap -Dcap_syscall_trap -Dcap_32_64
BUG_DEF     = 
endif
ifeq ($(PLATFORM),ppc64_linux)
OLD_DEF     = -Dppc64_linux
ARCH_DEF    = -Darch_power -Darch_64bit
OS_DEF      = -Dos_linux=26
CAP_DEF     = -Dcap_ptrace -Dcap_relocation -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_dwarf
BUG_DEF     = -Dbug_syscall_changepc_rewind
endif
ifeq ($(PLATFORM),ppc32_linux)
OLD_DEF     = -Dppc32_linux
ARCH_DEF    = -Darch_power
OS_DEF      = -Dos_linux=26
CAP_DEF     = -Dcap_ptrace -Dcap_relocation -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_dwarf -Dcap_liveness
BUG_DEF     = -Dbug_syscall_changepc_rewind
endif
#

# Combine all the #defines for ease of use
UNIFIED_DEF	= $(ARCH_DEF) $(OS_DEF) $(VER_DEF) $(CAP_DEF) $(BUG_DEF) $(OLD_DEF)

#ifeq (solaris,$(findstring solaris,$(PLATFORM)))
ifeq (solaris,$(findstring solaris,$(OS_DEF)))
AS		= /usr/ccs/bin/as
RANLIB		= true
endif

ifeq (linux,$(findstring linux,$(OS_DEF)))
AS              = /usr/bin/as
RANLIB          = true 
ASFLAGS         =
else
ASFLAGS         = -P $(UNIFIED_DEF) 
endif 

# set the macros that control whether the stdint limit and constant
# macros are defined for C++ on the compilers command line so that
# we don't have to worry about the ordering of #includes.
ifeq (linux,$(findstring linux,$(PLATFORM)))
STDINT_MACROS   = -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS
else
STDINT_MACROS   = 
endif # linux


# Default module compiler; modules which want $(CC) should redefine
# this, **NOT** CC

MODCC		= $(CXX)
MODCFLAGS	= $(CXXFLAGS)
DEPCC       = $(MODCC)

.SUFFIXES:	.I

# Added core/external for included external dependencies - bernat, 11JUN07
IFLAGS          = $(FIRST_INCLUDE) -I. -I$(TO_CORE) -I$(TO_CORE)/../$(PLATFORM)/include -I$(TO_CORE)/external -I$(TO_CORE)/dynutil/h

# uncomment/comment the line below to build with/without compilation warnings
# SILENCE_WARNINGS=true

ifndef SILENCE_WARNINGS
BASICWARNINGS	= -W -Wall

COMMONWARNINGS	= -W -Wall -Wshadow -Wpointer-arith       \
		-Wcast-qual            \
		-Wconversion        \
		-Wredundant-decls -Woverloaded-virtual

# not as strict as above, but can actually be used -- mdc
USEFULWARNINGS	= -W -Wall -Wpointer-arith       \
		-Wcast-qual            \
		-Wconversion        \
		-Woverloaded-virtual \
                -Wno-deprecated

# being nice to poor old pathetic tcl/tk header files --ari
TCLFRIENDLYWARNINGS = -W -Wall -Wpointer-arith \
		-Wcast-qual \
		-Wconversion \
		-Woverloaded-virtual

ifeq (solaris,$(findstring solaris,$(PLATFORM)))
COMMONWARNINGS       += -Wno-unknown-pragmas
USEFULWARNINGS       += -Wno-unknown-pragmas
TCLFRIENDLYWARNINGS  += -Wno-unknown-pragmas
else   # STL on Solaris with cast-align generates a warning with much output
COMMONWARNINGS       += -Wcast-align
USEFULWARNINGS       += -Wcast-align
endif
endif # SILENCE_WARNINGS


ifndef GCC_2_95
GCC_VER := $(shell gcc --version)
ifneq (,$(findstring 2.95,$(GCC_VER)))
GCC_2_95 = true
endif
endif

ifndef OLD_GCC
GCC_VER := $(shell gcc --version | head -n 1 | perl -ane 'print pop(@F)')
versionNumbers = $(sort $(GCC_VER) 2.95)
versionNumber  = $(firstword $(versionNumbers))
ifneq (2.95, $(versionNumber))
OLD_GCC = true
endif
endif

ifndef OLD_GCC
COMMONWARNINGS += -Wno-non-template-friend
USEFULWARNINGS += -Wno-non-template-friend
TCLFRIENDLYWARNINGS += -Wno-non-template-friend
endif

#don't inline -- for the files that won't emit template code
INLINE_DEFINES = 

#inline the private members of the class -- templates.o can use this
TEMP_INLINE_DEFINES = -DDO_INLINE_P="inline"

# inline everything -- the way things should be
ALL_INLINE_DEFINES = -DDO_INLINE_F="inline" -DDO_INLINE_P="inline"

USES_MT_THREAD =

ifeq (solaris,$(findstring solaris,$(PLATFORM)))
USES_LIBDYNINST_SO = true
endif
ifeq (linux,$(findstring linux,$(PLATFORM)))
USES_LIBDYNINST_SO = true
endif

ifeq (irix,$(findstring irix,$(PLATFORM)))
USES_LIBDYNINST_SO = true
USES_NATIVE_CC = true
NATIVE_CC      = cc
NATIVE_CXX     = CC
endif

# Set this variable if it's desired that dyninst be built with the native
# compiler on Solaris
SOLARIS_NATIVE =  #1

ifdef SOLARIS_NATIVE
ifeq (solaris,$(findstring solaris,$(PLATFORM)))
USES_LIBDYNINST_SO = true
USES_NATIVE_CC = true
NATIVE_CC      = cc
NATIVE_CXX     = CC
endif
endif

ifeq (osf,$(findstring osf,$(PLATFORM)))
USES_LIBDYNINST_SO = true
endif

ifeq (rs6000,$(findstring rs6000,$(PLATFORM)))
ifndef IBM_BPATCH_COMPAT
  USES_LIBDYNINST_SO = true
endif

USES_PERF_LIBRARY = true
USES_LIB_TEXT_HEAP = true

ifdef IBM_BPATCH_COMPAT
  ifeq (rs6000,$(findstring rs6000,$(PLATFORM)))
    USES_NATIVE_CC = true
    NATIVE_CC = xlc
    NATIVE_CXX = xlC
    DEPCC = xlC
    DEPENDFLAGS = -M -E -qhalt=E -qro -qtbtable=full -DCOMPILER="xlC"
  endif
endif

# As of AIX 5, the pm_init function in libpmapi takes more
# parameters. This is keyed by the USES_PMAPI_GROUPS define,
# and handled in the paradyn runtime library
PMAPI_VERSION := $(shell uname -v )
ifeq (5, $(findstring 5,$(PMAPI_VERSION)))
USES_PMAPI_GROUPS = true
endif
endif

# if we don't want OPT_FLAG defined for a particular part of the code
# (e.g. rtinst for aix), we just need to define NO_OPT_FLAG before doing
# the include of make.config - naim
ifndef NO_OPT_FLAG
OPT_FLAG	= -O2
endif

# flags for normal (non-kludge) files, with common warnings
CFLAGS		= $(IFLAGS) $(UNIFIED_DEF) $(OPT_FLAG) $(COMMON_WARNINGS)
CXXFLAGS	= $(IFLAGS) $(UNIFIED_DEF) $(OPT_FLAG) $(COMMON_WARNINGS) ${STDINT_MACROS}

# flags for kludge files, won't have warnings generated
KFLAGS          = $(IFLAGS) $(UNIFIED_DEF) $(BASICWARNINGS)

ifdef COVERAGE

CFLAGS += -fprofile-arcs -ftest-coverage
CXXFLAGS += -fprofile-arcs -ftest-coverage
LDFLAGS += -fprofile-arcs -ftest-coverage

endif

ifdef USING_PURIFY
CFLAGS		+= -DPURE_BUILD
CXXFLAGS	+= -DPURE_BUILD
endif

ifdef USES_MT_THREAD
CFLAGS		+= -DMT_THREAD
CXXFLAGS	+= -DMT_THREAD
endif

ifdef USES_PERF_LIBRARY
# Add any platform-specific performance libraries here
ifeq (rs6000,$(findstring rs6000,$(PLATFORM)))
USES_PMAPI = true
CFLAGS		+= -DUSES_PMAPI
CXXFLAGS	+= -DUSES_PMAPI
LDFLAGS		+= -lpmapi
ifdef USES_PMAPI_GROUPS
CFLAGS		+= -DPMAPI_GROUPS
CXXFLAGS	+= -DPMAPI_GROUPS
endif # USES_PMAPI_GROUPS
endif # rs6000
endif # perf_library

ifdef USE_DEPRECATED_BPATCH_VECTOR
CXXFLAGS	+= -DUSE_DEPRECATED_BPATCH_VECTOR
CFLAGS          += -DUSE_DEPRECATED_BPATCH_VECTOR
TFLAGS          += -DUSE_DEPRECATED_BPATCH_VECTOR
else
#CFLAGS        += -fimplicit-templates
CXXFLAGS        += -fimplicit-templates
TFLAGS        += -fimplicit-templates
endif

ifdef IBM_BPATCH_COMPAT
CXXFLAGS	+= -DIBM_BPATCH_COMPAT
CFLAGS		+= -DIBM_BPATCH_COMPAT
endif

ifndef OPT_FLAG
KFLAGS		+= -g
DEBUG_FLAG = -g
endif

ifeq ($(DEBUG_FLAG),none)
DEBUG_FLAG =
endif

ifdef DEBUG_FLAG
CFLAGS   += $(DEBUG_FLAG)
CXXFLAGS += $(DEBUG_FLAG)
KFLAGS   += $(DEBUG_FLAG)
endif

# flags for template files, don't define external template flags
# -g is optional in this case -- should be defined at module level
TFLAGS          = $(IFLAGS) $(TEMP_INLINE_DEFINES) $(UNIFIED_DEF) $(OPT_FLAG) $(BASICWARNINGS) ${STDINT_MACROS}

ifdef USES_MT_THREAD
TFLAGS		+= -DMT_THREAD
endif

ifdef DO_INLINE_ALL
CFLAGS	       += $(ALL_INLINE_DEFINES)
CXXFLAGS       += $(ALL_INLINE_DEFINES)
endif

# Start off LIBDIR to point to the user's devel area's paradyn lib directory.
# As a backup, in case the user hasn't checked out & compiled some paradyn lib,
LIBDIR		= $(FIRST_LIBDIR) \
                 -L$(TO_CORE)/../$(PLATFORM)/lib 

# Set IGEN to point to $(TO_CORE)/../bin/$(PLATFORM)/igen, if it exists,
# else set it to just "igen" (i.e. assume it's in the user's path)
ifdef CROSSCOMPILER
IGEN = $(shell if [ -f ${TO_CORE}/../${BASEPLATFORM}/bin/igen ]; then echo ${TO_CORE}/../${BASEPLATFORM}/bin/igen; else if [ -f ${TO_CORE}/igen/${BASEPLATFORM}/igen ]; then echo ${TO_CORE}/igen/${BASEPLATFORM}/igen; else echo igen; fi; fi )
else
IGEN = $(shell if [ -f ${TO_CORE}/${PROGRAM_DEST}/igen ]; then echo ${TO_CORE}/${PROGRAM_DEST}/igen; else if [ -f ${TO_CORE}/igen/$(PLATFORM)/igen ]; then echo ${TO_CORE}/igen/${PLATFORM}/igen; else echo igen; fi; fi )
endif

ifdef NO_IMPLICIT_TEMPLATES
ifdef USE_DEPRECATED_BPATCH_VECTOR
#  CFLAGS		+= -fno-implicit-templates
  CXXFLAGS	+= -fno-implicit-templates
  KFLAGS		+= -fno-implicit-templates
endif
endif

ifndef INSTANTIATE_TEMPLATES
ifndef NO_IMPLICIT_TEMPLATES
# -fexternal-templates and -Dexternal_templates should both be used or
# neither should be used; add them to CFLAGS, CXXFLAGS, and KFLAGS
# (but not to TFLAGS).
#
#CFLAGS		+=  -fexternal-templates -Dexternal_templates
CXXFLAGS	+=  -fexternal-templates -Dexternal_templates
KFLAGS		+=  -fexternal-templates -Dexternal_templates
endif
endif

THREADSLIB      =
USE_PTHREADS    = yes

ifeq (xyes,x$(USE_PTHREADS))
THREADSLIB      += -lpthread

# On Linux, programs using pthreads are supposed to define _REENTRANT
ifeq (linux,$(findstring linux,$(PLATFORM)))
CFLAGS			+= -D_REENTRANT=1
CXXFLAGS		+= -D_REENTRANT=1
KFLAGS			+= -D_REENTRANT=1
TFLAGS			+= -D_REENTRANT=1
endif

ifeq (rs6000,$(findstring rs6000,$(PLATFORM)))
#CFLAGS			+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
#CXXFLAGS		+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
#KFLAGS			+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
#TFLAGS			+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
endif

ifeq (solaris,$(findstring solaris,$(PLATFORM)))
CFLAGS			+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
CXXFLAGS		+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
KFLAGS			+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
TFLAGS			+= -D_REENTRANT=1 -D_THREAD_SAFE=1 -D_THREAD_SAFE_ERRNO=1
endif

endif

# System build constraints
#Build the MT daemon on AIX, Solaris, and Linux/x86
DONT_BUILD_PD_MT = true
ifeq (rs6000-ibm-aix,$(findstring rs6000-ibm-aix,$(PLATFORM)))
DONT_BUILD_PD_MT =
endif
ifeq (sparc-sun-solaris,$(findstring sparc-sun-solaris,$(PLATFORM)))
DONT_BUILD_PD_MT =
endif
ifeq (i386-unknown-linux2.4,$(findstring i386-unknown-linux2.4,$(PLATFORM)))
DONT_BUILD_PD_MT =
endif

# ***** EXTERNAL SOFTWARE CONFIGURATION *****

# Include any per-user configuration changes; this "local" config file
# should *not* be under CVS control, so that it never gets committed.
-include $(TO_CORE)/make.config.local

# Choose default development directories if necessary variables are unset

ifdef USES_MMTIMER
CFLAGS             += -Dcap_mmtimer
CXXFLAGS           += -Dcap_mmtimer
endif

ifdef USES_TCLTK
ifndef TCLTK_DIR
$(error error: TCLTK_DIR is not set.  Please set in make.config.local)
endif
TCLTK_LIB_DIR  ?= $(TCLTK_DIR)/lib
TCLTK_INC_DIR  ?= $(TCLTK_DIR)/include
endif

ifdef USES_UNWIND_LIB
CFLAGS         += -Dcap_unwind
CXXFLAGS       += -Dcap_unwind 
LIBUNWIND_LIB  ?= $(LIBUNWINDDIR)/lib
LIBUNWIND_INC  ?= $(LIBUNWINDDIR)/include
endif

ifdef USES_DWARF_DEBUG
LIBDWARF_INC   ?= $(LIBDWARFDIR)/include
LIBDWARF_LIB   ?= $(LIBDWARFDIR)/lib
endif

ifdef USES_LIBELF
LIBELF_INC     ?= $(LIBELFDIR)/include
LIBELF_LIB     ?= $(LIBELFDIR)/lib
endif

ifdef USES_FLEX
ifdef FLEX_DIR
WITHLIBFL       = --with-libfldir=$(FLEX_DIR)
else
WITHLIBFL       =
endif
endif

NASM           ?= nasm

#Build other variables based off of the above defaults

ifdef USES_TCLTK
# use the first set if using tcl8.4,
# use the second set if still using tcl8.3
ifndef USE_TCL83

TCLTK_LIBVER_ID	= 8.4
CFLAGS      += -DTCLCONST=const
CXXFLAGS    += -DTCLCONST=const
KFLAGS      += -DTCLCONST=const
TFLAGS      += -DTCLCONST=const

else

TCLTK_LIBVER_ID	= 8.3
CFLAGS      += -DTCLCONST=""
CXXFLAGS    += -DTCLCONST=""
KFLAGS      += -DTCLCONST=""
TFLAGS      += -DTCLCONST=""

endif

TCL_LIB		= -ltcl$(TCLTK_LIBVER_ID)
TK_LIB		= -ltk$(TCLTK_LIBVER_ID)

ifdef LIBTCLTKSTATIC
TCLTK_LIBS	+= -Wl,-Bstatic $(TCL_LIB) $(TK_LIB) -Wl,-Bdynamic
else
TCLTK_LIBS	+= $(TCL_LIB) $(TK_LIB)
endif

# TCL2C is used to generate compilable sources from tcl files
TCL2C		= $(TO_CORE)/../scripts/tcl2c
TCL2C_GEN_SRCS	= tcl2c.C

IFLAGS		+= -I$(TCLTK_INC_DIR)
ifdef CROSSCOMPILER
LIBDIR		+= $(patsubst %,-L%/rs_aix41/lib,$(TCLTK_DIR))
else
LIBDIR      += $(patsubst %,-L%,$(TCLTK_LIB_DIR))
endif

endif # USES_TCLTK

ifdef USES_PAPI
PAPI_INCDIR	= $(PAPI_ROOT)
PAPI_LIBDIR	= $(PAPI_ROOT)
#PAPI_LIB	= -Wl,-static -lpapi -Wl,-Bdynamic
#PAPI_LIB	= $(PAPI_LIBDIR)/libpapi.a
PAPI_LIB        = -Wl,-rpath=$(PAPI_LIBDIR) -L$(PAPI_LIBDIR) -lpapi  
IFLAGS          += -I$(PAPI_INCDIR)
LIBDIR          += $(patsubst %,-L%,$(PAPI_LIBDIR))
CFLAGS          += -DPAPI 
CXXFLAGS        += -DPAPI
TFLAGS          += -DPAPI 
endif

ifdef USES_FLEX
FLEX_LIB	= -lfl
ifdef FLEX_DIR
LIBDIR		+= $(patsubst %,-L%,$(FLEX_DIR))
VPATH		+= $(FLEX_DIR)
endif
endif

ifdef CROSSCOMPILER
FLEX_DIR	= /s/flex/rs_aix41/lib
LIBDIR		+= -L/p/sp2/gcc/lib 
endif

ifdef USES_LIBERTY
# Since libiberty.a is in the same g++ directory as libstdc++.a and
# libg++.a, no need for a "-L$(LIBERTY_DIR)" entry -at
endif

ifdef USES_X11
X11_LIB		= -lX11

ifeq (solaris,$(findstring solaris,$(PLATFORM)))
X11DIR		= /usr/openwin
CFLAGS		+= -I$(X11DIR)/include
CXXFLAGS	+= -I$(X11DIR)/include
TFLAGS		+= -I$(X11DIR)/include
LIBDIR		+= -R$(X11DIR)/lib -L$(X11DIR)/lib
endif

ifeq (linux,$(findstring linux,$(PLATFORM)))
X11DIR		= /usr/X11R6
CFLAGS          += -I$(X11DIR)/include/X11
CXXFLAGS        += -I$(X11DIR)/include/X11
TFLAGS          += -I$(X11DIR)/include/X11
LIBDIR          += -L$(X11DIR)/lib
endif

ifeq (x86_64,$(findstring x86_64,$(PLATFORM)))
LIBDIR          += -L$(X11DIR)/lib64
endif
ifeq (aix,$(findstring aix,$(PLATFORM)))
X11DIR		= /usr
endif

endif # USES_X11

ifeq (ppc64_linux,$(findstring ppc64_linux,$(PLATFORM)))
CFLAGS += -m64
CXXFLAGS += -m64
LDFLAGS += -m64
endif 

