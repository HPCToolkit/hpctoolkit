This patch adds the method getName() to return the call site name for
inlined functions.  It replaces getAllPrettyNames() from the old
dyninst 8.2 and usually returns a mangled name.

Copy this file into externals/symtabAPI/patches-82/


diff -Naurb dyninst-8.2.orig/symtabAPI/h/Aggregate.h dyninst-8.2/symtabAPI/h/Aggregate.h
--- dyninst-8.2.orig/symtabAPI/h/Aggregate.h	2015-06-18 14:58:07.000000000 -0500
+++ dyninst-8.2/symtabAPI/h/Aggregate.h	2015-06-18 15:16:49.209648173 -0500
@@ -72,8 +72,8 @@
       
       virtual ~Aggregate() {};
 
-      Offset   getOffset() const;
-      unsigned getSize() const;
+      virtual Offset   getOffset() const;
+      virtual unsigned getSize() const;
       Module * getModule() const { return module_; }
       Region * getRegion() const;
 
diff -Naurb dyninst-8.2.orig/symtabAPI/h/Function.h dyninst-8.2/symtabAPI/h/Function.h
--- dyninst-8.2.orig/symtabAPI/h/Function.h	2015-06-18 14:58:07.000000000 -0500
+++ dyninst-8.2/symtabAPI/h/Function.h	2015-06-18 15:16:49.209648173 -0500
@@ -76,7 +76,7 @@
 typedef std::vector<FunctionBase *> InlineCollection;
 typedef std::vector<FuncRange> FuncRangeCollection;
 
-class SYMTAB_EXPORT FunctionBase : public Aggregate
+class SYMTAB_EXPORT FunctionBase 
 {
    friend class InlinedFunction;
    friend class Function;
@@ -102,6 +102,11 @@
    std::vector<VariableLocation> &getFramePtrRefForInit();
    std::vector<VariableLocation> &getFramePtr();   
 
+   /***** Primary name *****/
+   virtual std::string getName() const = 0;
+   virtual bool addMangledName(std::string name, bool isPrimary) = 0;
+   virtual bool addPrettyName(std::string name, bool isPrimary) = 0;
+
    /***** Opaque data object pointers, usable by user ****/
    void *getData();
    void setData(void *d);
@@ -111,6 +116,10 @@
    bool addParam(localVar *);
    bool	setReturnType(Type *);
 
+   virtual Offset getOffset() const = 0;
+   virtual unsigned getSize() const = 0;
+   virtual Module* getModule() const = 0;
+
   protected:
    FunctionBase(Symbol *);
    FunctionBase(Module *);
@@ -120,8 +129,8 @@
    localVarCollection *locals;
    localVarCollection *params;
 
+   mutable unsigned functionSize_;
    Type          *retType_;
-   unsigned functionSize_;
 
    InlineCollection inlines;
    FunctionBase *inline_parent;
@@ -130,12 +139,11 @@
    std::vector<VariableLocation> frameBase_;
    bool frameBaseExpanded_;
    void *data;
-
    void expandLocation(const VariableLocation &loc,
                        std::vector<VariableLocation> &ret);
 };
 
-class SYMTAB_EXPORT Function : public FunctionBase
+ class SYMTAB_EXPORT Function : public FunctionBase, public Aggregate
 {
    friend class Symtab;
 	friend std::ostream &::operator<<(std::ostream &os, const Dyninst::SymtabAPI::Function &);
@@ -162,7 +170,14 @@
    Serializable * serialize_impl(SerializerBase *sb, 
                                 const char *tag = "Function") THROW_SPEC (SerializerError);
 
-   unsigned getSize();
+   virtual unsigned getSize() const;
+   virtual std::string getName() const;
+   virtual Offset getOffset() const { return Aggregate::getOffset(); }
+   virtual bool addMangledName(std::string name, bool isPrimary) 
+   {return Aggregate::addMangledName(name, isPrimary);}
+   virtual bool addPrettyName(std::string name, bool isPrimary)
+   {return Aggregate::addPrettyName(name, isPrimary);}
+   virtual Module* getModule() const { return module_; }
 };
 
 class SYMTAB_EXPORT InlinedFunction : public FunctionBase
@@ -172,12 +187,22 @@
   protected:
    InlinedFunction(FunctionBase *parent);
    ~InlinedFunction();
+   virtual Module* getModule() const { return module_; }
   public:
+   typedef vector<std::string>::const_iterator name_iter;
    std::pair<std::string, Dyninst::Offset> getCallsite();
    virtual bool removeSymbol(Symbol *sym);
+   virtual bool addMangledName(std::string name, bool isPrimary);
+   virtual bool addPrettyName(std::string name, bool isPrimary);
+   virtual std::string getName() const;
+   virtual Offset getOffset() const;
+   virtual unsigned getSize() const;
   private:
    std::string callsite_file;
    Dyninst::Offset callsite_line;
+   std::string name_;
+   Module* module_;
+   Dyninst::Offset offset_;
 };
 
 }
diff -Naurb dyninst-8.2.orig/symtabAPI/src/Aggregate.C dyninst-8.2/symtabAPI/src/Aggregate.C
--- dyninst-8.2.orig/symtabAPI/src/Aggregate.C	2015-06-18 14:58:07.000000000 -0500
+++ dyninst-8.2/symtabAPI/src/Aggregate.C	2015-06-18 15:16:49.209648173 -0500
@@ -200,7 +200,6 @@
       newSym->isDynamic_ = true;
       module_->exec()->addSymbol(newSym);
     }
-
     return true;
  }
 
diff -Naurb dyninst-8.2.orig/symtabAPI/src/Function.C dyninst-8.2/symtabAPI/src/Function.C
--- dyninst-8.2.orig/symtabAPI/src/Function.C	2015-06-18 14:58:07.000000000 -0500
+++ dyninst-8.2/symtabAPI/src/Function.C	2015-06-18 15:16:49.214648015 -0500
@@ -52,11 +52,10 @@
 using namespace Dyninst::SymtabAPI;
 
 FunctionBase::FunctionBase(Symbol *sym) :
-   Aggregate(sym),
    locals(NULL),
    params(NULL),
-   retType_(NULL),
    functionSize_(0),
+   retType_(NULL),
    inline_parent(NULL),
    frameBaseExpanded_(false),
    data(NULL)
@@ -64,11 +63,10 @@
 }
 
 FunctionBase::FunctionBase() :
-   Aggregate(),
    locals(NULL),
    params(NULL),
-   retType_(NULL),
    functionSize_(0),
+    retType_(NULL),
    inline_parent(NULL),
    frameBaseExpanded_(false),
    data(NULL)
@@ -76,11 +74,10 @@
 }
 
 FunctionBase::FunctionBase(Module *m) :
-   Aggregate(m),
    locals(NULL),
    params(NULL),
-   retType_(NULL),
    functionSize_(0),
+    retType_(NULL),
    inline_parent(NULL),
    frameBaseExpanded_(false),
    data(NULL)
@@ -90,7 +87,7 @@
 
 Type *FunctionBase::getReturnType() const
 {
-   module_->exec()->parseTypesNow();	
+    getModule()->exec()->parseTypesNow();	
    return retType_;
 }
 
@@ -102,7 +99,7 @@
 
 bool FunctionBase::findLocalVariable(std::vector<localVar *> &vars, std::string name)
 {
-   module_->exec()->parseTypesNow();	
+    getModule()->exec()->parseTypesNow();	
 
    unsigned origSize = vars.size();	
 
@@ -131,7 +128,7 @@
 
 bool FunctionBase::getLocalVariables(std::vector<localVar *> &vars)
 {
-   module_->exec()->parseTypesNow();	
+    getModule()->exec()->parseTypesNow();	
    if (!locals)
       return false;
 
@@ -145,7 +142,7 @@
 
 bool FunctionBase::getParams(std::vector<localVar *> &params_)
 {
-   module_->exec()->parseTypesNow();
+    getModule()->exec()->parseTypesNow();
    if (!params)
       return false;
 
@@ -177,13 +174,13 @@
 
 FunctionBase *FunctionBase::getInlinedParent()
 {
-   module_->exec()->parseTypesNow();	
+    getModule()->exec()->parseTypesNow();	
    return inline_parent;
 }
 
 const InlineCollection &FunctionBase::getInlines()
 {
-   module_->exec()->parseTypesNow();	
+    getModule()->exec()->parseTypesNow();	
    return inlines;
 }
 
@@ -254,8 +251,8 @@
    }
 
    Dyninst::Dwarf::DwarfFrameParser::Ptr frameParser =
-      Dyninst::Dwarf::DwarfFrameParser::create(*module_->exec()->getObject()->dwarf->frame_dbg(),
-                                               module_->exec()->getObject()->getArch());
+   Dyninst::Dwarf::DwarfFrameParser::create(*getModule()->exec()->getObject()->dwarf->frame_dbg(),
+					    getModule()->exec()->getObject()->getArch());
    
    std::vector<VariableLocation> FDEs;
    Dyninst::Dwarf::FrameErrors_t err;
@@ -334,7 +331,7 @@
 }
 
 Function::Function(Symbol *sym)
-    : FunctionBase(sym)
+    : FunctionBase(sym), Aggregate(sym)
 {}
 
 Function::Function()
@@ -385,7 +382,7 @@
 {
 	removeSymbolInt(sym);
 	if (symbols_.empty()) {
-		module_->exec()->deleteFunction(this);
+	    getModule()->exec()->deleteFunction(this);
 	}
 	return true;
 }
@@ -432,6 +429,11 @@
 
 }
 
+std::string Function::getName() const
+{
+    return getFirstSymbol()->getMangledName();
+}
+
 bool FunctionBase::operator==(const FunctionBase &f)
 {
 	if (retType_ && !f.retType_)
@@ -448,10 +450,12 @@
 }
 
 InlinedFunction::InlinedFunction(FunctionBase *parent) :
-   FunctionBase(parent->getModule()), callsite_line(0)
+    FunctionBase(parent->getModule()), callsite_line(0),
+    module_(parent->getModule())
 {
    inline_parent = parent;
    parent->inlines.push_back(this);
+    offset_ = parent->getOffset();
 }
 
 InlinedFunction::~InlinedFunction()
@@ -462,3 +466,30 @@
 {
    return false;
 }
+
+bool InlinedFunction::addMangledName(std::string name, bool isPrimary)
+{
+    name_ = name;
+    return true;
+}
+
+bool InlinedFunction::addPrettyName(std::string name, bool isPrimary)
+{
+    name_ = name;
+    return true;
+}
+
+std::string InlinedFunction::getName() const
+{
+    return name_;
+}
+
+Offset InlinedFunction::getOffset() const
+{
+    return offset_;
+}
+
+unsigned InlinedFunction::getSize() const
+{
+    return functionSize_;//inline_parent->getSize();
+}
diff -Naurb dyninst-8.2.orig/symtabAPI/src/Symtab-lookup.C dyninst-8.2/symtabAPI/src/Symtab-lookup.C
--- dyninst-8.2.orig/symtabAPI/src/Symtab-lookup.C	2015-06-18 14:58:07.000000000 -0500
+++ dyninst-8.2/symtabAPI/src/Symtab-lookup.C	2015-06-18 15:16:49.209648173 -0500
@@ -881,7 +881,7 @@
     return mod;
 }
 
-unsigned Function::getSize() {
+unsigned Function::getSize() const {
    if (functionSize_)
       return functionSize_;
    for (unsigned i=0; i<symbols_.size(); i++) {
diff -Naurb dyninst-8.2.orig/symtabAPI/src/dwarfWalker.C dyninst-8.2/symtabAPI/src/dwarfWalker.C
--- dyninst-8.2.orig/symtabAPI/src/dwarfWalker.C	2015-06-18 14:58:07.000000000 -0500
+++ dyninst-8.2/symtabAPI/src/dwarfWalker.C	2015-06-18 15:16:49.214648015 -0500
@@ -555,16 +555,23 @@
 
    if (parsedFuncs.find(func) != parsedFuncs.end()) {
       dwarf_printf("(0x%lx) parseSubprogram not parsing children b/c curFunc() not in parsedFuncs\n", id());
+      if(name_result) {
+	  dwarf_printf("\tname is %s\n", curName().c_str());
+      }
       setParseChild(false);
       return true;
    }
 
    if (name_result && !curName().empty()) {
       dwarf_printf("(0x%lx) Identified function name as %s\n", id(), curName().c_str());
-      if (isMangledName())
-         func->addMangledNameInternal(curName(), true, true);
-      //      else
-      // func->addPrettyName(curName(), true);
+      if (isMangledName()) {
+	  func->addMangledName(curName(), true);
+      }
+      // Only keep pretty names around for inlines, which probably don't have mangled names
+      else {
+	  dwarf_printf("(0x%lx) Adding as pretty name to inline\n", id());
+	  func->addPrettyName(curName(), true);
+      }
    }
 
    //Collect callsite information for inlined functions.
@@ -581,7 +588,8 @@
    }
 
    // Get range information
-   if (hasRanges() && func->ranges.empty()) {
+   if (hasRanges()) {
+       if(func->ranges.empty()) {
       Address last_low = 0, last_high = 0;
       func->ranges.reserve(rangesSize());
       for (range_set_t::iterator i = ranges_begin(); i != ranges_end(); i++) {
@@ -595,7 +603,7 @@
          func->ranges.push_back(FuncRange(low, high - low, func));         
       }
    }
-
+   }
    // Dwarf outlines some function information. You have the base entry, which contains
    // address ranges, frame base information, and optionally a "abstract origin"
    // or "specification" entry that points to more information. 
