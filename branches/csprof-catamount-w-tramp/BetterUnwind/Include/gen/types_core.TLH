/*BEGIN_LEGAL 
Intel Open Source License 

Copyright (c) 2002-2005 Intel Corporation 
All rights reserved. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.  Redistributions
in binary form must reproduce the above copyright notice, this list of
conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.  Neither the name of
the Intel Corporation nor the names of its contributors may be used to
endorse or promote products derived from this software without
specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
END_LEGAL */
//
// @ORIGINAL_AUTHOR: Robert Muth
//

/*! @file
  this headerfile contains defines the (additional) types needed by @ref LEVEL_CORE
 */


#ifndef TYPES_CORE_H
#define TYPES_CORE_H

//
// The following is quite an ugly hack but it reduces code duplication significantly
//

/*
  wrapper template class to encapsulate an INT32, dummy template arg is used to enable type checking 
 */

template<int dummy>
class INDEX
{
private:
    INT32 index;

public:
    BOOL operator==(const INDEX<dummy> right) const { return right.index == index;}\
    BOOL operator!=(const INDEX<dummy> right) const { return right.index != index;}\
    BOOL operator<(const INDEX<dummy> right)  const { return index < right.index;}\
    
    // please do not try to introduce a constructor here
    // otherwise prograns will not compile
    // and there are possibly performance penalties as well
    //INDEX(INT32 x=0) : index(x) {}  
    INT32 q() const {return index;}
    BOOL is_valid() const { return (index>0);}
    VOID  q_set(INT32 y) {index=y;}
    VOID  invalidate() {index=0;}

};

/*! @ingroup APP
Handle for APP */  
typedef class INDEX<0> APP;
/*! @ingroup IMG_BASIC_API
Handle for IMG */  
typedef class INDEX<1> IMG; 
/*! @ingroup SEC_BASIC_API
Handle for SEC */  
typedef class INDEX<2> SEC; 
/*! @ingroup RTN_BASIC_API
Handle for RTN */  
typedef class INDEX<3> RTN; 
/*! @ingroup BBL_BASIC_API
Handle for BBL */  
typedef class INDEX<4> BBL; 
/*! @ingroup EDG
Handle for EDG */  
typedef class INDEX<5> EDG;
/*! @ingroup INS_BASIC_API
Handle for INS */  
typedef class INDEX<6> INS;
/*! @ingroup REL
Handle for REL */  
typedef class INDEX<7> REL;
typedef class INDEX<8> EXT;
/*! @ingroup SYM_BASIC_API
Handle for SYM */  
typedef class INDEX<9> SYM;

typedef class INDEX<20> CHUNK;
typedef class INDEX<21> LDEF;

typedef class INDEX<22> GOT;

// scheduler stuff
typedef class INDEX<100> BBX;
typedef class INDEX<102> EDX;
typedef class INDEX<103> INX;


inline IMG MAKE_IMG(INT32 y){ IMG x; x.q_set(y); return x;}
inline INS MAKE_INS(INT32 y){ INS x; x.q_set(y); return x;}
inline BBL MAKE_BBL(INT32 y){ BBL x; x.q_set(y); return x;}
inline RTN MAKE_RTN(INT32 y){ RTN x; x.q_set(y); return x;}
inline EDG MAKE_EDG(INT32 y){ EDG x; x.q_set(y); return x;}
inline EXT MAKE_EXT(INT32 y){ EXT x; x.q_set(y); return x;}
inline REL MAKE_REL(INT32 y){ REL x; x.q_set(y); return x;}
inline SEC MAKE_SEC(INT32 y){ SEC x; x.q_set(y); return x;}
inline SYM MAKE_SYM(INT32 y){ SYM x; x.q_set(y); return x;}
inline GOT MAKE_GOT(INT32 y){ GOT x; x.q_set(y); return x;}
inline APP MAKE_APP(INT32 y){ APP x; x.q_set(y); return x;}

inline CHUNK MAKE_CHUNK(INT32 y){ CHUNK x; x.q_set(y); return x;}
inline LDEF MAKE_LDEF(INT32 y){ LDEF x; x.q_set(y); return x;}

// for initialization and performance reasons we avoid having an explicit constructor

template<int dummy>
class ADDR
{
  private:
    static const ADDRINT INVALID_ADDR = ~ADDRINT(0);
    
    ADDRINT address;
 public:

    //explicit ADDR(PTRINT v) : address(v) {}
    
    VOID value_set(ADDRINT v=INVALID_ADDR) {address = v;}

    VOID add(ADDRINT v)       {address += v;}
    VOID sub(ADDRINT v)       {address -= v;} 
    VOID round_up(UINT32 alignment)    {address = RoundUp(address,alignment);} 
    VOID round_down(UINT32 alignment)  {address = RoundDown(address,alignment);} 

    ADDRINT value() const {return address;}
    UINT32 value_mod_2() const {return address % 2;} 
    UINT32 value_mod_4() const {return address % 4;} 
    UINT32 value_mod_8() const {return address % 8;}
    UINT32 value_mod_16() const {return address % 16;}
    UINT32 value_mod_32() const {return address % 32;}

    BOOL   valid() const { return address !=  INVALID_ADDR; }
    BOOL   zero() const { return address ==  ADDRINT(0); }
    ADDRDELTA diff( ADDR<dummy> a) const {return address - a.address;}

    int operator==(const ADDR<dummy> right) const { return right.address == address;}
    int operator!=(const ADDR<dummy> right) const { return right.address != address;}

    bool operator<(const ADDR<dummy> right) const { return address < right.address;}
    bool operator<=(const ADDR<dummy> right) const { return address <= right.address;}
    bool operator>(const ADDR<dummy> right) const { return address > right.address;}
    bool operator>=(const ADDR<dummy> right) const { return address >= right.address;}

    static  int cmp(const ADDR<dummy> lhs, const ADDR<dummy> rhs)
    {
        if( lhs < rhs ) return -1;
        else if( rhs < lhs ) return 1;
        else return 0;
    }

    static int qcmp(const void*x1, const void *x2)
    {
        return cmp( *static_cast<const ADDR<dummy> *>(x1),*static_cast<const ADDR<dummy> *>(x2));
    }
    
};

template<int dummy> inline string str( ADDR<dummy> a) {return StringFromAddrint(a.value());}

typedef class ADDR<1> IADDR;
typedef class ADDR<2> OADDR;

inline IADDR IADDR_INVALID() {IADDR x;x.value_set(); return x;}
inline IADDR MAKE_IADDR(ADDRINT y) {IADDR x;x.value_set(y); return x;}
inline OADDR OADDR_INVALID() {OADDR x;x.value_set(); return x;}
inline OADDR MAKE_OADDR(ADDRINT y) {OADDR x;x.value_set(y); return x;}

inline UINT32 INDEX_INVALID() {return ~(0L);}

inline BOOL IADDR_valid(IADDR a){return a.valid();}
inline BOOL OADDR_valid(OADDR a){return a.valid();}

//class UNWIND_STUFF;
//class LSDA_STUFF;
class GOTENTRY;
class OPDENTRY;
class DYNAMICENTRY;

#endif
