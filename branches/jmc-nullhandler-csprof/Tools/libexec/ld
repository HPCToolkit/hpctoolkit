#!/bin/sh
#
# Rename symbols from system libraries and edit the link line.
#
# Environment variables:
#
#   HPC_LINK_CONFIG -- absolute path to config file.
#
#   HPC_LINK_CACHE_DIR -- (optional) absolute path to cache directory.
#       if unset, then defaults to $HOME/.hpctoolkit.
#
#   HPC_LINK_VERBOSE -- (optional) if set, turns on verbose output.
#
# Format of config file:
#
#   D directory
#   I file.o    (relative to D directory)
#   R old_name new_name file.[ao]
#
# Allows blank lines and comments lines beginning with #.
#

die()
{
    echo ; echo "hpclink error: $*" ; echo
    exit 1
}

verbose()
{
    if test -n "$HPC_LINK_VERBOSE" ; then
	echo "hpclink> $*"
    fi
}

#
# Rename and replace .o object file.
#
replace_o()
{
    old_name="$1"
    new_name="$2"
    obj="$3"

    if [ ! -f "$obj" ]; then
	sys_name=`echo $link_line | tr ' ' '\n' | grep -F "/$lib" | head -1`
	[ -n "$sys_name" ] || die "unable to find object: $obj"
	cp "$sys_name" "$obj" || die "unable to copy: $sys_name"
    fi

    tmp="tmp_${obj}"
    rm -f "$tmp"
    mv -f "$obj" "$tmp"
    objcopy --redefine-sym "${old_name}=${new_name}" "$tmp" "$obj"
    [ $? -eq 0 ] || die "unable to objcopy: $tmp to $obj"
    rm -f "$tmp"
    verbose "rename ${obj}: $old_name -> $new_name"
    lib_delete_list="$lib_delete_list $obj "
    full="${HPC_LINK_CACHE_DIR}/${obj}"
    echo "$lib_insert_list" | grep -F -e "$full" >/dev/null
    if [ $? -ne 0 ]; then
	lib_insert_list="${lib_insert_list} ${full} "
	verbose "add to link line: ${full} "
    fi
}

#
# Rename and replace .a library file.
#
replace_a()
{
    old_name="$1"
    new_name="$2"
    lib="$3"

    for dir in $search_path
    do
        if [ -f "${dir}/${lib}" ]; then
	    break
	fi
    done
    [ -f "${dir}/${lib}" ] || die "unable to find library: $lib"

    nm_line=`nm -A "${dir}/${lib}" 2>/dev/null | grep -E -e "[TW] $old_name" | head -1`
    obj=`echo "$nm_line" | awk -F: '{ print $2 }'`
    if [ ! -f "$obj" ]; then
	ar x "$dir/$lib" "$obj"
	[ $? -eq 0 ] || die "unable to extract: $obj"
    fi

    tmp="tmp_${obj}"
    rm -f "$tmp"
    mv -f "$obj" "$tmp"
    objcopy --redefine-sym "${old_name}=${new_name}" "$tmp" "$obj"
    [ $? -eq 0 ] || die "unable to objcopy: $tmp to $obj"
    rm -f "$tmp"
    verbose "rename ${lib}: $old_name -> $new_name"
    full="${HPC_LINK_CACHE_DIR}/${obj}"
    echo "$lib_insert_list" | grep -F -e "$full" >/dev/null
    if [ $? -ne 0 ]; then
	lib_insert_list="${lib_insert_list} ${full} "
	verbose "add to link line: ${full} "
    fi
}

verbose
verbose "begin hpc linker script ..."

#
# Step 1 -- Parse the link line for search directories with the form
# -Ldir or -L dir.
#
link_line="$*"
verbose "original link line: $link_line"
search_path=
arg_is_dir=no
for opt in $link_line
do
    dir=
    if [ $arg_is_dir = yes ]; then
	dir="$opt"
	arg_is_dir=no
    else
	case "$opt" in
	    -L?* )
		dir="${opt##-L}"
		;;
	    -L )
		arg_is_dir=yes
		;;
	esac
    fi
    if [ -d "$dir" ]; then
	search_path="$search_path $dir "
    fi
done
verbose "library search path: $search_path"

if [ ! -d "$HPC_LINK_CACHE_DIR" ]; then
    HPC_LINK_CACHE_DIR="${HOME}/.hpctoolkit"
fi
pushd "$HPC_LINK_CACHE_DIR" >/dev/null \
    || die "unable to cd: $HPC_LINK_CACHE_DIR"
verbose "cache directory: $HPC_LINK_CACHE_DIR"

#
# Step 2 -- Process lines from config file.
#
if [ ! -f "$HPC_LINK_CONFIG" ]; then
    die "missing config file: $HPC_LINK_CONFIG"
fi
verbose "config file: $HPC_LINK_CONFIG"

lib_insert_dir=
lib_insert_list=
lib_delete_list=
while read action old_name new_name lib
do
    # Skip # comments and blank lines.
    if expr "x${action}" : "x#" >/dev/null ; then
	continue
    fi
    if test -z "$action" ; then
	continue
    fi
    verbose "$action $old_name $new_name $lib"

    case "$action" in

	# D - The base directory for 'I' insert files.
	[Dd] )
	    lib_insert_dir="$old_name"
	    [ -d "$lib_insert_dir" ] \
		|| die "missing directory: $lib_insert_dir"
	    verbose "library insert directory: $lib_insert_dir"
	    ;;

	# E - John's crazy eval.
	[Ee] )
	    item=`eval echo $old_name`
	    verbose "item = $item"
	    lib_insert_list="$lib_insert_list $item "
	    ;;

	# I - Library to insert into link line.
	[Ii] )
	    full="${lib_insert_dir}/${old_name}"
	    [ -f "$full" ] || die "missing file: $full"
	    lib_insert_list="${lib_insert_list} ${full} "
	    verbose "add to link line: $full"
	    ;;

	# R - Rename symbol and replace on link line.
	[Rr] )
	     case "$lib" in
		 *.o )
		     replace_o "$old_name" "$new_name" "$lib"
		     ;;
		 *.a )
		     replace_a "$old_name" "$new_name" "$lib"
		     ;;
		 * )
		     die "unknown library file type: $lib"
		     ;;
	     esac
	     ;;

	* )
	    die "unknown config action: $action"
	    ;;
    esac
done < "$HPC_LINK_CONFIG"

#
# Build the new linker line.  Delete items on $lib_delete_list and
# insert $lib_insert_list after the first .o file.
#
new_line=
first=yes
for opt in $link_line
do
    case "$opt" in
	/*.o )
	    # Insert $lib_insert_list before first .o file.
	    if [ "$first" = yes ]; then
		new_line="${new_line} ${lib_insert_list} "
		first=no
	    fi

	    # Replace system objects on $lib_delete_list with our
	    # renamed copy.
	    base=`basename $opt`
	    expr "$lib_delete_list" : ".* $base " >/dev/null
	    if [ $? -ne 0 ]; then
		new_line="${new_line} ${opt} "
	    fi
	    ;;

	* )
	    # Everything else is just passed on.
	    new_line="${new_line} ${opt} "
	    ;;
    esac
done
verbose "new link line: $new_line"

#
# Run the new link line.  Delete the first occurrence of 'ld' from
# PATH (that's how we got here), so we don't have an infinite loop.
#
new_path=
found=no
OLDIFS="$IFS"
IFS=:
for dir in $PATH
do
    if [ "$found" = no ] && [ -x "$dir/ld" ]; then
	found=yes
    else
	new_path="${new_path}:${dir}"
    fi
done
IFS="$OLDIFS"
PATH="$new_path"

popd >/dev/null
ld $new_line
if [ $? -eq 0 ]; then
    verbose "done"
fi
