# SPDX-FileCopyrightText: 2022-2024 Rice University
# SPDX-FileCopyrightText: 2024 Contributors to the HPCToolkit Project
#
# SPDX-License-Identifier: BSD-3-Clause

default_language_version:
  python: python3
default_install_hook_types: [pre-commit, commit-msg]
default_stages: [pre-commit]

# NB: The hooks in this file are listed in a particular order to reduce the number of times
# pre-commit has to run before getting an all-clear.

repos:
# ------------------------------------------------------------------------------------
#  Automation hooks:  Hooks that can alter the semantics of files
# ------------------------------------------------------------------------------------

- repo: https://github.com/asottile/pyupgrade
  rev: v3.17.0
  hooks:
  # Automatically elide older Python syntax and replace with newer ones
  - id: pyupgrade
    args: [--py38-plus]

- repo: https://github.com/charliermarsh/ruff-pre-commit
  rev: 'v0.5.7'
  hooks:
  # Run a number of Python linters in Rust. Not completely feature-parity with Python-based linters,
  # but can autofix a number of issues before they run. Also wicked fast.
  - id: ruff
    args: [--target-version=py38, --fix, --line-length=100]


# ------------------------------------------------------------------------------------
#  Formatting hooks:  Hooks that alter the syntax but not semantics of files
# ------------------------------------------------------------------------------------

- repo: https://github.com/psf/black
  rev: '24.8.0'
  hooks:
  # Blacken all Python code, except allow slightly longer line lengths
  - id: black
    args: ['--line-length=100', '--target-version=py38']

- repo: https://github.com/PyCQA/isort
  rev: 5.13.2
  hooks:
  # Sort imports in all the Python code
  - id: isort
    args: [--profile, black, --line-length=100]

- repo: local
  hooks:
  # Format all Meson code with a consistent style
  - id: meson-format
    name: meson format
    entry: meson format
    args: [--inplace, --configuration=./meson.format]
    language: python
    types: [text]  # TODO: This should be just [meson] but that doesn't cover new Meson filenames
    files: (^|/)(meson\.(build|options|format)|meson_options\.txt)$
    additional_dependencies:
    - meson ==1.5.0rc2

- repo: https://github.com/executablebooks/mdformat
  rev: 0.7.17
  hooks:
  # Format CommonMark (Markdown) files to have a consistent style.
  - id: mdformat
    exclude: ^(doc/src/|doc/FORMATS\.md$|LICENSE\.md$|\.gitlab/)
    additional_dependencies:
    - mdformat-tables ==0.4.1
  # FORMATS.md is carefully crafted for viewing in a terminal (i.e. unrendered)
  - id: mdformat
    files: ^doc/FORMATS\.md$
    args: [--wrap=80, --number]
    additional_dependencies:
    - mdformat-tables ==0.4.1
  # LICENSE.md is a pure-CommonMark format with full numbering in the source
  - id: mdformat
    files: ^LICENSE\.md$
    args: [--number]
  # Format MyST (CommonMark for Sphinx) files to have a consistent style.
  - id: mdformat
    files: ^doc/src/
    additional_dependencies:
    - mdformat-myst ==0.1.5
    - mdformat-deflist ==0.1.2
  # Format GFM (CommmonMark for GitHub/GitLab) files to have a consistent style.
  - id: mdformat
    files: ^\.gitlab/
    additional_dependencies:
    - mdformat-gfm ==0.3.6

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.6.0
  hooks:
  # Format JSON files to have a consistent style.
  - id: pretty-format-json
    args: ['--autofix', '--no-ensure-ascii', '--top-keys=name,id']
  # Remove trailing whitespace
  - id: trailing-whitespace
    exclude: &vendored |
      (?x)^(
        .*/[^/]+\.patch |    # Patches
        src/vendor/valgrind/[^/]+\.h |    # External Valgrind headers
        tests/data/dbase/[^/]+\.d/.* |    # Generated test data
        tests/data/meas/[^/]+\.m/.* |    # Generated test data
        tests/data/struct/[^/]+\.hpcstruct |    # Generated test data
      )$
  # All files must end in a single newline (or be perfectly empty)
  - id: end-of-file-fixer
    exclude: *vendored
  # Remove the UTF8 BOM from the start of any files
  - id: fix-byte-order-marker
  # Ensure files have consistent endings. (This operates in the worktree, Git also normalizes the index)
  - id: mixed-line-ending


# ------------------------------------------------------------------------------------
#  Linting hooks:  Hooks that do not alter files but checks that they satisfy various conditions
# ------------------------------------------------------------------------------------

- repo: meta
  hooks:
  # Check that hooks listed actually do something
  - id: check-hooks-apply
  # Check that any excludes do indeed exclude something
  - id: check-useless-excludes

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.6.0
  hooks:
  # Ensure all executable scripts have a shebang
  - id: check-executables-have-shebangs
  # Ensure symlinks always point to something
  # - id: check-symlinks
  # Warn if symlinks are ever accidentally destroyed
  - id: destroyed-symlinks
  # Ensure conflict markers are never committed anywhere
  - id: check-merge-conflict
  # Ensure files do not differ only in case (problematic on some filesystems)
  - id: check-case-conflict
  # Reminder to always work in a branch separate from the main two
  - id: no-commit-to-branch
    args: [--branch, master, --branch, develop]

- repo: https://github.com/editorconfig-checker/editorconfig-checker.python
  rev: '2.7.3'
  hooks:
  # Run a separate checker to ensure the .editorconfig rules are being followed
  - id: editorconfig-checker
    alias: ec
    args: [-disable-indent-size, -disable-max-line-length]
    exclude: *vendored

- repo: https://github.com/python-poetry/poetry
  rev: '1.8.0'
  hooks:
  # Ensure the pyproject.toml files are valid for Poetry
  - id: poetry-check
    args: [-C, src/hpctesttool/, --lock]

- repo: https://github.com/netromdk/vermin
  rev: v1.6.0
  hooks:
  # Check that the Python code doesn't require a newer version than expected
  - id: vermin
    args:
    - --target=3.8-
    - --eval-annotations
    - --parse-comments
    - --violations
    - -vvv

- repo: https://github.com/jendrikseipp/vulture
  rev: v2.11
  hooks:
  # Check that there isn't any dead Python code lying around
  - id: vulture
    args: ['src/hpctesttool']

- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v1.11.1
  hooks:
 # Run static checks on the Python code
  - id: mypy
    args:
    - --config-file=src/hpctesttool/pyproject.toml
    # - --scripts-are-modules
    # NB: The MyPy cache needs to be disabled (--no-incremental) to dodge
    # https://github.com/python/mypy/issues/12664 which affects ruamel.yaml
    - --no-incremental
    - --show-column-numbers
    - --pretty
    files: '^src/hpctesttool'
    additional_dependencies:
    - pytest >=7.3.2, <8
    - ruamel.yaml >=0.17.16, <0.18
    - click >=8.1.5, <9
    - pyparsing >=3.0.9, <4
    - Jinja2 >=3.1, <4
  - id: mypy
    exclude: '^src/hpctesttool/'
    args: [--scripts-are-modules, --pretty]

- repo: https://github.com/pylint-dev/pylint
  rev: v3.2.6
  hooks:
  # Run the aggressive static Python linter
  - id: pylint
    args: ['--rcfile=src/hpctesttool/pyproject.toml']
    files: '^src/hpctesttool/'
    additional_dependencies:
    - ruamel.yaml >=0.17.32, <0.18
    - pylint-pytest
  - id: pylint
    exclude: '^src/hpctesttool/'
    args: [--disable=line-too-long]

- repo: https://github.com/shellcheck-py/shellcheck-py
  rev: v0.10.0.1
  hooks:
  # Find common errors in shell scripts using shellcheck
  - id: shellcheck
    args: ['--exclude=SC2154']

- repo: https://github.com/python-jsonschema/check-jsonschema
  rev: '0.29.1'
  hooks:
  # Validate the GitLab CI scripts against the schema. Doesn't catch everything but helps
  - id: check-gitlab-ci
  # Validate the devcontainers configurations against the schema.
  - id: check-jsonschema
    alias: check-devcontainer
    files: '(^|/)devcontainer\.json'
    args: ['--schemafile', 'https://raw.githubusercontent.com/devcontainers/spec/d424cc157e9a110f3bf67d311b46c7306d5a465d/schemas/devContainer.base.schema.json']

- repo: https://github.com/codespell-project/codespell
  rev: v2.2.6
  hooks:
  # Identify common spelling mistakes in code and comments
  - id: codespell
    stages: [pre-commit, commit-msg]
    args:
    # HSA is part of the ROCm software stack. codespell mistakes it for "has".
    # deques is the plural of "deque" (doubly-ended queue). codespell mistakes it for "dequeues".
    # InsId is a type name from GTPin. codespell mistakes it for "inside".
    - --ignore-words-list=hsa,deques,insid
    # Wil Phan is one of our staff members. codespell mistakes it for "will/well".
    - --ignore-regex=\b(Wil\s+Phan)\b
    exclude: |
      (?x)^(
        doc/dtd/mathml/.*\.ent |    # MathML follows LaTeX's habit of funny names for math symbols
        src/vendor/valgrind/[^/]+\.h |    # External Valgrind headers
        .*\.svg |  # Images
      )$

- repo: https://github.com/Yelp/detect-secrets
  rev: v1.5.0
  hooks:
  # Scan for secrets that should never appear in the repo itself
  - id: detect-secrets
    exclude: |
      (?x)^(
        .*\.hpcstruct |  # Structfiles have lots of high-entropy strings
        subprojects/[^/]+\.wrap |  # Wraps almost always contain SHA256 hashes
      )$
