diff -Naurb symtabAPI.orig/src/core/common/mips64_linux/Makefile symtabAPI.mips64-Linux/src/core/common/mips64_linux/Makefile
--- symtabAPI.orig/src/core/common/mips64_linux/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ symtabAPI.mips64-Linux/src/core/common/mips64_linux/Makefile	2009-01-08 13:08:10.204815000 -0500
@@ -0,0 +1,39 @@
+# Define any symbols needed to invoke configuration changes in make.config
+
+NO_IMPLICIT_TEMPLATES = true
+USES_DWARF_DEBUG = true
+USES_LIBELF = true
+
+# Include standard make configuration stuff that applies to everything
+# in the paradyn tree.
+
+include ../../make.config 
+
+# Now make any necessary architecture specific changes to variables:
+
+SRCS =                ../../common/src/linuxKludges.C \
+              ../../common/src/timing-linux.C \
+              ../../common/src/parseauxv.C
+
+CXXFLAGS        += $(MYFLAGS)
+CFLAGS          += $(MYFLAGS)
+TFLAGS          += $(MYFLAGS)
+
+SYSLIBS               = -ldl 
+
+LIBS    += -lgcc
+
+AS            = /usr/bin/as
+
+# Add preprocessor and special link information for G++
+G_PTHREAD       = -pthread
+
+# Include the module-specific Makefile, which defines everything about
+# the module that is common across architectures.
+
+include ../make.module.tmpl
+
+# Include the "standard library template".  This defines all the
+# common targets like "clean", "install", etc.
+
+include ../../make.library.tmpl
diff -Naurb symtabAPI.orig/src/core/make.config symtabAPI.mips64-Linux/src/core/make.config
--- symtabAPI.orig/src/core/make.config	2008-03-07 19:51:56.000000000 -0500
+++ symtabAPI.mips64-Linux/src/core/make.config	2009-01-08 13:08:10.234815000 -0500
@@ -47,6 +47,9 @@
 ifneq (,$(findstring x86_64,$(CURPLAT)))
 PLATFORM = x86_64-unknown-linux2.4cv
 endif
+ifneq (,$(findstring mips64,$(CURPLAT)))
+PLATFORM = mips64_linux
+endif
 endif
 # AIX
 ifneq (,$(findstring aix,$(CURPLAT)))
@@ -225,6 +228,14 @@
 CAP_DEF     = -Dcap_ptrace -Dcap_relocation -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_dwarf -Dcap_liveness
 BUG_DEF     = -Dbug_syscall_changepc_rewind
 endif
+ifeq ($(PLATFORM),mips64_linux)
+OLD_DEF     = -Dmips64_linux
+ARCH_DEF    = -Darch_mips -Darch_64bit
+OS_DEF      = -Dos_linux=26
+CAP_DEF     = -Dcap_ptrace -Dcap_stripped_binaries -Dcap_async_events -Dcap_threads -Dcap_dynamic_heap -Dcap_relocation -Dcap_dwarf -Dcap_32_64 -Dcap_liveness -Dcap_fixpoint_gen -Dcap_noaddr_gen -Dcap_mutatee_traps
+BUG_DEF     = -Dbug_syscall_changepc_rewind
+endif
+
 #
 
 # Combine all the #defines for ease of use
diff -Naurb symtabAPI.orig/src/core/symtabAPI/mips64_linux/Makefile symtabAPI.mips64-Linux/src/core/symtabAPI/mips64_linux/Makefile
--- symtabAPI.orig/src/core/symtabAPI/mips64_linux/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ symtabAPI.mips64-Linux/src/core/symtabAPI/mips64_linux/Makefile	2009-01-08 13:08:10.282860000 -0500
@@ -0,0 +1,61 @@
+# Define any symbols needed to invoke configuration changes in make.config
+
+NO_IMPLICIT_TEMPLATES = true
+USES_DWARF_DEBUG = true
+USES_LIBELF = true
+
+# Include standard make configuration stuff that applies to everything
+# in the paradyn tree.
+
+include ../../make.config 
+
+# Now make any necessary architecture specific changes to variables:
+
+SRCS =          ../src/Object-elf.C \
+                ../src/parseDwarf.C \
+		../src/parseStab.C \
+		../src/emitElf.C \
+		../src/emitElf-64.C \
+		../src/addrtranslate.C \
+		../src/addrtranslate-linux.C \
+		../src/addrtranslate-sysv.C
+
+MYFLAGS		+= -DUSES_DWARF_DEBUG -I$(LIBDWARF_INC)
+MYFLAGS     	+= -I$(LIBELF_INC)
+
+CXXFLAGS        += $(MYFLAGS)
+CFLAGS          += $(MYFLAGS)
+TFLAGS          += $(MYFLAGS)
+
+SYSLIBS		= -ldl 
+
+LIBS	  +=  -L$(LIBDWARF_LIB) -L$(LIBELF_LIB) -R$(LIBDWARF_LIB):$(LIBELF_LIB)
+ifdef LIBDWARFSTATIC
+LIBS    += -Wl,-static -ldwarf -Wl,-call_shared
+else
+LIBS    += -ldwarf
+endif
+ifdef LIBELFSTATIC
+LIBS    += -Wl,-static -lelf -Wl,-call_shared
+else
+LIBS    += -lelf
+endif
+LIBS    += -lgcc
+
+LIBS	+= -liberty
+
+AS		= /usr/bin/as
+
+# Add preprocessor and special link information for G++
+G_PTHREAD	= -pthread
+G_PTHREAD_LD	= -pthread
+
+# Include the module-specific Makefile, which defines everything about
+# the module that is common across architectures.
+
+include ../make.module.tmpl
+
+# Include the "standard library template".  This defines all the
+# common targets like "clean", "install", etc.
+
+include ../../make.library.tmpl
diff -Naurb symtabAPI.orig/src/core/symtabAPI/src/Elf_X.h symtabAPI.mips64-Linux/src/core/symtabAPI/src/Elf_X.h
--- symtabAPI.orig/src/core/symtabAPI/src/Elf_X.h	2008-02-04 13:23:03.000000000 -0500
+++ symtabAPI.mips64-Linux/src/core/symtabAPI/src/Elf_X.h	2009-01-08 13:08:10.298860000 -0500
@@ -86,56 +86,6 @@
 };
 #endif
 
-#if defined(arch_mips)
-// ------------------------------------------------------------------------
-// Class Elf_X_RegInfo simulates the Elf(32|64)_RegInfo structure.
-class Elf_X_RegInfo {
-  public:
-    unsigned long ri_gprmask() const = 0;
-    unsigned long ri_gprmask(unsigned long input) = 0;
-    unsigned long ri_cprmask(int i) const = 0;
-    unsigned long ri_cprmask(int i, unsigned long input) = 0;
-    unsigned long ri_gp_value() const = 0;
-    unsigned long ri_gp_value(unsigned long input) = 0;
-};
-
-class Elf_32_RegInfo : public Elf_X_RegInfo {
-  public:
-    Elf_32_RegInfo(Elf_Data *input) : reg((Elf32_RegInfo *)input.d_buf) { }
-
-    // Read Interface
-    unsigned long ri_gprmask() const { return reg->ri_gprmask; }
-    unsigned long ri_cprmask(int i) const { return reg->ri_cprmask[i]; }
-    unsigned long ri_gp_value() const { return reg->ri_gp_value; }
-
-    // Write Interface
-    unsigned long ri_gprmask(unsigned long input) { return (reg->ri_gprmask = input); }
-    unsigned long ri_cprmask(int i, unsigned long input) { return (reg->ri_cprmask[i] = input); }
-    unsigned long ri_gp_value(unsigned long input) { return (reg->ri_gp_value = input); }
-
-  private:
-    Elf32_RegInfo *reg;
-};
-
-class Elf_64_RegInfo : public Elf_X_RegInfo {
-  public:
-    Elf_64_RegInfo(Elf_Data *input) : reg((Elf64_RegInfo *)input.d_buf) { }
-
-    // Read Interface
-    unsigned long ri_gprmask() const { return reg->ri_gprmask; }
-    unsigned long ri_cprmask(int i) const { return reg->ri_cprmask[i]; }
-    unsigned long ri_gp_value() const { return reg->ri_gp_value; }
-
-    // Write Interface
-    unsigned long ri_gprmask(unsigned long input) { return (reg->ri_gprmask = input); }
-    unsigned long ri_cprmask(int i, unsigned long input) { return (reg->ri_cprmask[i] = input); }
-    unsigned long ri_gp_value(unsigned long input) { return (reg->ri_gp_value = input); }
-
-  private:
-    Elf64_RegInfo *reg;
-};
-#endif
-
 // ------------------------------------------------------------------------
 // Class Elf_X_Rel simulates the Elf(32|64)_Rel structure.
 class Elf_X_Rel {
@@ -288,34 +238,6 @@
     bool is64;
 };
 
-#if defined(arch_mips)
-// ------------------------------------------------------------------------
-// Class Elf_X_Options simulates the Elf_Options structure.
-class Elf_X_Options {
-  public:
-    Elf_X_Options(Elf_Data *input) : data(input), opt((Elf_Options *)data->d_buf) { }
-
-    // Read Interface
-    unsigned char kind(int i) const { return opt[i].kind; }
-    unsigned char size(int i) const { return opt[i].size; }
-    unsigned short section(int i) const { return opt[i].section; }
-    unsigned long info(int i) const { return opt[i].info; }
-
-    // Write Interface
-    unsigned char kind(int i, unsigned char input) { return (opt[i].kind = input); }
-    unsigned char size(int i, unsigned char input) { return (opt[i].size = input); }
-    unsigned short section(int i, unsigned short input) { return (opt[i].section = input); }
-    unsigned long info(int i, unsigned long input) { return (opt[i].info = input); }
-
-    // Meta-Info Interface
-    unsigned long count() const { return (data->d_size / sizeof(Elf_Options)); }
-
-  private:
-    Elf_Data *data;
-    Elf_Options *opt;
-};
-#endif
-
 #if !defined(os_solaris)
 // ------------------------------------------------------------------------
 // Class Elf_X_Versym simulates the SHT_GNU_versym structure.
@@ -568,15 +490,9 @@
     Elf_X_Verdef *get_verDefSym() { return new Elf_X_Verdef(is64, data->d_buf); }
 #endif
 
-#if defined(arch_mips)
-    Elf_X_RegInfo get_regInfo() { return Elf_X_RegInfo(is64, data); }
-#endif
     Elf_X_Rel get_rel() { return Elf_X_Rel(is64, data); }
     Elf_X_Rela get_rela() { return Elf_X_Rela(is64, data); }
     Elf_X_Sym get_sym() { return Elf_X_Sym(is64, data); }
-#if defined(arch_mips)
-    Elf_X_Options get_options() { return Elf_X_Options(is64, data); }
-#endif
 
     bool isValid() { return data; }
 
diff -Naurb symtabAPI.orig/src/core/symtabAPI/src/Object-elf.C symtabAPI.mips64-Linux/src/core/symtabAPI/src/Object-elf.C
--- symtabAPI.orig/src/core/symtabAPI/src/Object-elf.C	2008-04-11 16:46:40.000000000 -0400
+++ symtabAPI.mips64-Linux/src/core/symtabAPI/src/Object-elf.C	2009-01-08 13:10:02.392897000 -0500
@@ -39,7 +39,7 @@
 
 #include "emitElf.h"
 
-#if defined(x86_64_unknown_linux2_4) || defined(ia64_unknown_linux2_4) || defined(ppc64_linux)
+#if defined(x86_64_unknown_linux2_4) || defined(ia64_unknown_linux2_4) || defined(ppc64_linux) || defined(mips64_linux)
 #include "emitElf-64.h"
 #endif
 
@@ -539,7 +539,7 @@
 	    Elf_X_Rela rela = reldata.get_rela();
 	    const char *strs = strdata.get_string();
 
-	    if (sym.isValid() && (rel.isValid() || rela.isValid()) && strs) {
+	    if (sym.isValid() && (rel.isValid() || rela.isValid()) && strs && rel_entry_size_) {
     		/* Iterate over the entries. */
 	    	for( u_int i = 0; i < (rel_size_/rel_entry_size_); ++i ) {
 		        long offset;
@@ -563,7 +563,9 @@
     	    		// We should never reach this case.
 	    	    	return false;
 		        };
-		        // /* DEBUG */ fprintf( stderr, "%s: relocation information for target 0x%lx\n", __FUNCTION__, next_plt_entry_addr );
+	
+	if (index >= sym.count())
+	  continue;
     		    relocationEntry re( offset, string( &strs[ sym.st_name(index) ] ), NULL, type );
                 if(symbols_.find(&strs[ sym.st_name(index)]) != symbols_.end()){
                     vector<Symbol *> syms = symbols_[&strs[ sym.st_name(index)]];
@@ -3465,7 +3467,7 @@
       em->checkIfStripped(obj ,functions, variables, mods, notypes, relocation_table_, fbt_); 
       return em->driver(obj, fName);
    }
-#if defined(x86_64_unknown_linux2_4) || defined(ia64_unknown_linux2_4) || defined(ppc64_linux)
+#if defined(x86_64_unknown_linux2_4) || defined(ia64_unknown_linux2_4) || defined(ppc64_linux) || defined(mips64_linux)
    else if (elfHdr.e_ident()[EI_CLASS] == 2) {
       emitElf64 *em = new emitElf64(elfHdr, isStripped, flag, err_func_);
       em->checkIfStripped(obj ,functions, variables, mods, notypes, relocation_table_, fbt_); 
